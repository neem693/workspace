<!DOCTYPE html>
<html>
<head>
<link rel="stylesheet" href="style.css">
<meta charset="UTF-8">
<meta name="viewport"
	content="width=device-width,initial-scale = 1.0" />
<script src="../../js/jquery-3.1.1.min.js"></script>
<title>Insert title here</title>
</head>
<body>

	<title>자바스크립트</title>
</head>
<body>

	<header>JQUERY</header>
	<section>
		<article>
			<h1 class="subject">자바스크립트로 Canvas 제어</h1>
			<h1>HTML 5 캔버스의 사용법</h1>
			<p>여기서는 HTML5 캔버스의 사용법 및 캔버스에 도형을 그리는 방법에 대해서 살펴본다.
				HTML5에서 제공하는 캔버스는 &lt;canvas&gt;태그를 사용해서 웹 페이지에 그래픽을
				그린다. 이때 자바스크립트를 사용해서 그때그때 그려지는 것들이 표시된다.
				&lt;canvas&gt;태그는 단지 그래픽을 그릴 수 있는 영역을 제공하는 컨테이너(그릇)로,
				실제로 그래픽을 그리기 위해서는 자바스크립트를 사용해야 한다. 캔버스는 각종 도형, 문자열 및 그림을
				그릴 수 있는 메소드를 제공한다. &lt;canvas&gt;태그는 현재 주요 웹 브라우저에서 대부분
				지원한다.</p>
			<h1>HTML 5 캔버스의 사용법</h1>
			<p>HTML5 캔버스를 사용하려면 &lt;canvas&gt;태그를 사용한다. 캔버스는 그래픽을
				그릴 수 있는 영역으로 너비(width)와 높이(height)를 속성으로 갖는다. 또한
				자바스크립트에서 캔버스를 제어하기 위해서는 id속성도 필요하다.</p>
			<div class="code">&lt;canvas id = "id" width = "너비"
				height = "높이"&gt;&lt;/canvas&gt;</div>
			<p>canvas 태그는 HTML 페이지에서 특정 구역을 정의하는데 쓰이는 div 태그안에
				넣어서 사용하는 것이 좋다. 캔버스에 표시할 마우스 포인터의 상대적인 위치등을 얻을 수 있기
				때문이다. 따라서 권장 형태르르 사용한 가로 300px, 세로 200px의 캔버스를 작성한 예시는
				다음과 같다.</p>
			<div class="code">&lt;canvas id = "canvas1" width =
				"300" height = "200" &gt;&lt;/canvas&gt;</div>
			<h1>캔버스 제어하기</h1>
			<p>여기서는 캔버스 영역에 그리기 위해 자바스크립트로 영역을 제어하는 방법을 살펴본다.
				앞에서는 canvas 태그를 사용해서 영역을 만드는 것을 살펴보았다. 만들어진 캔버스에 도형이나 그림
				등을 그리거나, 그려진 것들을 움직이게 만드는 등의 제어는 자바스크립트에서 한다.</p>
			<div class="code">
				&lt;script&gt;<br>//여기에 캔버스를 제어하는 코드를 입력한다.<br>&lt;/script&gt;
			</div>
			<p>자바스크립트는 HTML페이지가 모두 로드된 후에 사용되는 것이 좋기 때문에 캔버스를
				제어하는 코드도 $(document).ready()메소드 안에 기술한다.</p>
			<div class="code">
				&lt;script&gt;<br>$(document).ready(function(){ <br>//캔버스제어코드들<br>});<br>&lt;/script&gt;
			</div>
			<p>캔버스 제어 코드가 복잡한 경우 별도의 함수로 따로 정의해서 js파일로 작성한다.</p>
			<div class="code">
				&lt;script&gt;<br>$(document).ready(function(){<br>
				drawShape();//캔버스 제어 메소드 호출<br>});<br>function
				drawShape(){//캔버스 제어 메소드<br>//캔버스 제어 코드들<br>}<br>&lt;/script&gt;
			</div>
			<p>자바스크립트에서 캔버스를 제어하기 위해서는 먼저 2가지를 얻어내야 한다. 첫 번째가 그림이
				그려질 영역인 캔버스를 얻어내야 하고, 두 번째는 그리기 작업을 위한 그래픽 2D콘텍스트를 얻어내야
				한다. 다음과 같은 순서로 코딩된다.</p>
			<h2>1. 그림이 그려질 캔버스 영역 얻어내기</h2>
			<p>HTML 코드 부분에 정의한 &lt;canvas&gt;태그를 자바스크립트에서 제어할 수
				있도록 얻어낸다. 자바스크립트에서 HTML의 &lt;canvas id = "canvas1" width
				= "300" height = "200"&gt;&lt;/canvas&gt;과 같은 코드에서 캔버스를
				얻어내려면 id속성 값을 사용해서 유일한 태그에 접근해야 한다. 자바스크립트에서 id 속성의 값을
				얻어내려면 documnet.getElementById("id속성값") 또는
				$("#id속성값")[0]을 사용해서 한다. 만일 jQuery를사용한다면 var cvs =
				$("#canvas1")[0];과 같이 써서 canvas 엘리먼트 객체를 cvs 변수에 저장할 수
				있다.
			<div class="code">
				--JS--<br>$(document).ready(function(){<br>var
				cvs = $("#canvas1")[0]; -- ①<br>});<br> <br>
				--HTML--<br>&lt;cavnas id = "canvas1" width = "300"
				height = "200"&gt;&lt;/canvas&gt;
			</div>
			<h2>2. 그리기 작업을 위한 그래픽 2D콘텍스트 얻어내기</h2>
			<p>얻어낸 canvas 엘리먼트객체에서 getContext("2d"); 메소드를 사용해서
				2D콘텍스트를 얻어낸다.</p>
			<div class="code">
				--JS--<br>$(document).ready(function(){<br>var
				cvs = $("#canvas1")[0]; //①cvs는 canvas 엘리먼트 객체가 저장된 객체
				변수<br>var ctx = cvs.getContext("2d");//②그래픽 2D 콘텍스트
				얻어내기<br>}); <br> <br> --HTML-- <br>&lt;canvas
				id = "canvas1" width = "300" height =
				"200"&gt;&lt;/canvas&gt;<br>
			</div>
			<p>위의 코드들 다음엔느 실제로 그리는 작업을 수행하는 메소드를 사용하며, 이들은 다음절에서
				살펴본다.</p>

			<h1 class="subject">도형 문자열. 이미지 그리기</h1>
			<p>여기서는 캔버스에 도형, 문자열, 그림 그리기 등의 그리기 메소드를 살펴보고, 그리는
				바업을 예제를 통해 학습한다.</p>
			<p>캔버스에 그리기 위해서 ① canvas 엘리먼트 객체를 얻어내고, 이 얻어낸 객체의
				getContext("2d") 메소드를 사용해서 ②2D콘텐스트 객체를 얻어내고 나면 이제 ③그리기
				메소드를 사용해서 그리기 작업을 할 수 있다. 그리기 관련 메소드들은 [2D 콘텍스트 객체, 그리기
				메소드()]와 같은 형태로 사용한다.</p>
			<div class="code">
				$(document).ready(function(){<br>var cvs =
				$("#canvas1")[0];//①캔버스 객체를 얻어냄<br> var ctx =
				cvs.getContext("2d");//②캔버스 객체로부터 2D콘텍스트 객체를 얻어냄<br>
				//(10,10)좌표에 가로 80 , 세로 50 크기의 채워진 사각형을 그린다.<br>
				etx.fillRect(10,10,80,50); //③캔버스 객체로부터 2D콘텍스트 객체를 얻어냄 <br>});
			</div>

			<p>그리기의 가장 기본이 되는 주요 속성 및 메소드는 다음과 같다. (좀 더 자세한 사항은
				http://www.w3schools.com/tags/ref_canvas.asp 또는
				https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial을
				참조한다.)</p>
			<br>
			<table>
				<tr>
					<th>속성</th>
					<th>설명</th>
				</tr>
				<tr>
					<td>data</td>
					<td>주어진 이미지 데이터가 포함된 ImageData 객체를 리턴<br> 빈
						ImageData 객체를 생성 후에 파랑색을 지정하고 화면에 출력: 화면에 파란 사각형 출력<br>
						//가로 100, 세로 100의 빈 ImageData 객체 생성<br>var
						imgData = ctx.createimageData(100,100);<br>
						imgData.data[i+0] = 0; //R: 빨강색<br>
						imgData.data[i+1] = 0; //G: 초록색<br>
						imgData.data[i+2] = 255; //B: 파랑색<br> //0-완전투명,
						255-완전 불투명<br> imgData.data[i+3] = 255;
						//Alpha:투명도<br> ctx.putImageData(imgData,20,20);
						//화면에 이미지 출력

					</td>
				</tr>
				<tr>
					<td>fillStyle</td>
					<td>색, 그러데이션, 패턴 등으로 채우기를 지정하거나 얻어냄.예))도형의 채우기 색을
						초록색으로 지정<br>ctx.fillStyle = "#00FF00";
					</td>
				</tr>
				<tr>
					<td>font</td>
					<td>텍스트 폰트를 지정하거나 얻어냄.<br> 예))40px 크기의 Arial
						폰트를 갖는 글꼴을 지정<br> ctx.font = "40px.Arial";//글꼴
						크기와 폰트 지정<br> //(10,10)좌표에 40px 크기의 Arial 폰트를 갖는
						"테스트 출력 <br> ctx.fillText("테스트",10,10);
					</td>
				</tr>
				<tr>
					<td>height</td>
					<td>ImageData 객체의 높이(이미지의 세로 높이)를 얻어냄.<br>
						예))ImageData 객체의 높이를 알림상자에 표시<br> var ImgData =
						ctx.createImageData(100,100); alert(imgData.height);
					</td>
				</tr>
				<tr>
					<td>lineCap</td>
					<td>선의 끝 모양의 스타일을 지정하거나 얻어냄. 끝 모양에는 butt(평평한 끝모양),
						round(butt+라운드 사각형), square(butt + 사각형)가 있음. round와
						square가 butt보다 좀 더 길다.<br>ctx.lineCap = "butt";<br>ctx.lineCap
						= "round";<br>ctx.lineCap = "square";
					</td>
				</tr>
				<tr>
					<td>lineJoin</td>
					<td>두 선이 모서리 부분에서 만났을 때의 모양을 지정하거나 얻어냄. bevel,
						round, miter가 있음.<br> ctx.lineJoin = "bevel";//아주
						약간 비스듬함<br> ctx.lineJoin = "round";//완전히 둥금<br>
						ctx.lineJoin = "miter";//이건 완전히 각이 진것이고
					</td>
				</tr>
				<tr>
					<td>lineWidth</td>
					<td>선의 두께를 지정하거나 얻어냄.<br>예))선의 두께를 5픽셀로 지정<br>ctx.lineWidth
						= 5;
					</td>
				</tr>
				<tr>
					<td>miterLimit</td>
					<td>최대 miter값을 지정하거나 얻어냄. miter값은 안쪽 코너에서 바깥쪽 코너간의
						거리<br> 그러니까 모서리 부분의 테두리 부분 굵기를 의미한다.<br>
						예))최대 miter 값을 10으로 지정. ctx.miter=10;//10이 기본값
					</td>
				</tr>
				<tr>
					<td>shadowBlur</td>
					<td>그림자의 퍼짐(번짐) 값을 지정하거나 얻어냄. 숫자가 클수록 더 퍼짐.<br>
						예))그림자의 퍼짐을 10으로 지정<br> ctx.shadowBlur =10;
					</td>
				</tr>
				<tr>
					<td>shadowColor</td>
					<td>그림자의 색을 지정하거나 얻어냄.<br> 예))그림자의 색을 회색으로 지정<br>
						ctx.shadowColor ="gray";
					</td>
				</tr>
				<tr>
					<td>shadowOffsetX</td>
					<td>도형으로부터 그림자의 수평 거리를 지정하거나 얻어냄. 숫자가 커질수록 그림자가
						가로로 길어진다.<br>예))그림자의 가로 길이를 10으로 지정<br>
						ctx.shadowOffsetX = 10;
					</td>
				</tr>
				<tr>
					<td>shadowOffsetY</td>
					<td>도형으로부터 그림자의 수직 거리를 지정하거나 얻어냄. 숫자가 커질수록 그림자가
						세로로 길어진다.<br>예))그림자의 세로 길이를 10으로 지정<br>
						ctx.shadowOffsetY = 10;
					</td>
				</tr>
				<tr>
					<td>strokeStyle</td>
					<td>도형이나 글자의 테두리 선에 사용되는 선 색을 지정하거나 얻어냄<br>예))선색을
						검정색으로 지정<br> ctx.strokeStyle = "#000000";
					</td>
				</tr>
				<tr>
					<td>textAlign</td>
					<td>텍스트의 맞춤을 지정하거나 얻어냄. center, left, right,
						start가 있다. left와 start는 같으며,지정한 좌표를 중심으로 왼쪽 맞춤을 한다.
						right와 end는 같으며, 지정한 좌표를 중심으로 오른쪽 맞춤을 한다. center는 지정한
						좌표를 중심으로 가운데 맞춤을 한다. <br>예))(100,50)좌표에 왼쪽 맞춤으로
						문자열 그리기 <br> ctx.textAlign = 'left';//왼쪽 맞춤<br>
						ctx.fillText('test',100,50); (100,50)좌표에 문자열 그리기

					</td>
				</tr>
				<tr>
					<td>textBaseline</td>
					<td>텍스트의 베이스 라인을 지정하거나 얻어냄. alphabetic, top,
						hanging, middle, ideographic, bottom이 있다.<br> <img
						alt="alphabetic" src="../images/img_textbaseline.gif"><br>
						예))문자열의 베이스라인 지정<br> ctx.textBaseline =
						"alphabetic";//기본값으로 지정
					</td>
				</tr>
				<tr>
					<td>width</td>
					<td>ImageData 객체의 너비(이미지가로의 너비)를 얻어냄.<br>
						예))ImageData 객체의 너비를 알림 상자에 표시 <br> var imgData =
						ctx.createImageData(100,100);<br>
						alert(imgData.width);<br>
					</td>
				</tr>
			</table>
			<p>캔버스의 그리기 관련 메소드들</p>
			<table>
				<tr>
					<td>addColorStop()</td>
					<td>그러데이션에서 색상과 중단 위치를 설정한다.<br>예))//선형그라데이션 생성<br>var grad = ctx.createLinearGradient(0,0,180,0);<br>
					grad.addColorStop(0,"blue");//제1 색상 지점<br>
					grad.addColorStop(1,"white");//제2 색상 지점<br>
					ctx.fillStyle = grd; //채우기 색으로 그러데이션 지정<br>
					ctx.fillRect(20,20,200,100);//채워진 사각형 그린다.</td>
				</tr>
				<tr>
					<td>arc()</td>
					<td>호를 그린다.<br>
					예))(175,175) 좌표에 반지름 50,0~Math.PI*2(360도)로 그려지는 호를 그린다. 0~Math.PI*2(360도)는 원이 됨.<br>
					ctx.arc(175,175,50,0,Math.PI*2,true);</td>
				</tr>
				<tr>
					<td>arcTo()</td>
					<td>두 탄젠트 사이의 호를 그린다.<br>
					예))시작호의 (155,20) 좌표, 끝 호의 (150,80)좌표에 반지름 60의 호<br>
					ctx.arcTo(150,20,150,80,60);</td>
				</tr>
				<tr>
					<td>beginPath()</td>
					<td>다각선의 시작선을 그리거나 현재의 선을 재설정한다.<br>예))ctx.beginPath();</td>
				</tr>
				<tr>
					<td>bezierCurveTo()</td>
					<td>큐빅 베지어 곡선을 생성한다.<br>
					<img alt="큐빅베지어" src="../images/cubic_basia.png"></td>
				</tr>
			</table>
		</article>
	</section>
	<footer></footer>


</body>
</html>