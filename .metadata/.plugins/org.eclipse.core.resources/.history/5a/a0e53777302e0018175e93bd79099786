<!DOCTYPE html>
<html>
<head>
<link rel="stylesheet" href="/java/style.css">
<meta charset="UTF-8">
<meta name="viewport"
	content="width=device-width,initial-scale = 1.0" />
<script src="/java/js/jquery-3.2.1.min.js"></script>
<script src="/java/js/jquery_index.js"></script>
<title>자바를 공부하자</title>
</head>
<body>
	<header>자바 스터디</header>


	<h1 id="index_subject">목차</h1>
	<div id="list"></div>
	<h1 id="bookmark_subject">부록</h1>
	<div id="bookmark_list"></div>
	<p class="subject_fix" id="subject_line"></p>




	<h1 class="subject">이 페이지는 무엇이냐?</h1>
	<p>이 페이지는 Java를 공부하면 Java에 대해서 작성,수정,추가 할 수 있는 페이지이다.</p>
	<h1 class="subject">자바설치&amp;설정</h1>
	<h1>자바 설치</h1>
	<p>
		자바는 다음 링크를 이용해 설치할 수 있다. <a target="_blank"
			href="http://java.sun.com">java.sun.com</a> 혹은 <a
			target="_blank" href="http://oracle.com">오라클</a>을 통해서 들어가
		설치할 수 있다.
	</p>
	<p>여기서 중요한점은 JDK버젼과 JRE버젼이 있다는 것. JDK버젼은 개발용. JRE 버젼은
		일반적인 자바 API를 돌릴 수 있는 프로그램이라고 할 수 있다. java에 들어가서는 SE버젼 또는
		EE 버젼을 다운받아 설치하는게 좋으나, 여기서는 SE버젼 즉, Standard Edition을
		설치한다. 이 SE버젼은 JDK와 JRE 버젼 두 가지 모두가 들어있으며, EE버젼은 SE 버젼 +
		서버부분을 추가한 버젼임을 알아 두자.</p>
	<h1>환경변수</h1>
	<p>자바 이외에 프로그램에서도 자바가 잘 구동되게 할라면 Window상에서 환경변수 설정을 따로
		해줘야 한다.</p>
	<p class="imp">컴퓨터->고급 시스템 설정->고급->환경변수</p>
	<p>여기서 설정해야 하는 것이 3가지가 있다.</p>
	<ul>
		<li>JAVA_HOME : 자바의 홈 Directory <span class="code">자바가
				설치된 폴더</span></li>
		<li>CLASSPATH : 실행 시 클래스 파일의 위치와 참조 파일들의 위치 지정 (기본 공용
			폴더)<span class="code">%JAVA_HOME%\lib;</span>
		</li>
		<li>PATH : 실행 명령어 위치 지정 (bin)<span class="code">;(앞의
				코드 보전하기 위한 세미콜론)%JAVA_HOME%\bin;</span></li>
	</ul>
	<h1>설치 확인</h1>
	<p>
		설치가 다 진행된다면, 명령프롬포트 상에서 <span class="code">java
			-version</span>이라고 쳐서 확인한다.
	</p>
	<img class="img" alt="명령프롬프트"
		src="/java/img/java_version.png">
	<p class="img cap">이러한 내용이 뜬다면 java SE가 잘 설치되었다는 것.</p>
	<p>
		마찬가지로 명령프롬포트 상에서 <span class="code">javac</span>이라고 친다.
	</p>
	<img class="img" alt="명령프롬프트2" src="/java/img/javac.png">
	<p class="img cap">이러한 내용이 뜬다면 java 컴파일에 대해 문제가 없다는 것.</p>
	<h1 class="subject">이클립스 설치</h1>
	<p>이클립스 설치는 10번 넘게 해봤다. 그냥 해라 씨부랄</p>
	<h1 class="subject">자바와 친해지기</h1>
	<iframe class="img" width="560" height="315"
		src="https://www.youtube.com/embed/PMe5G84YKcA?rel=0"
		frameborder="0" allow="autoplay; encrypted-media"
		allowfullscreen></iframe>
	<p>다음을 진행해보자</p>
	<ol>
		<li>자바 프로젝트를 만들어보자.</li>
		<li>자바 패키지와 클래스에 이름을 입력해보자. 클래스는 첫문자에 대문자 나머지는 소문자이다.
			밑의 public static args는 반드시 체크해주자</li>
		<li>이클립스 코드 글자 크기에 대해서 설정하고 <span class="code">이클립스
				window -> preperence -> General -> appearance -> colors
				and Fonts -> Basic -> TextFont 알아서 변경</span>, 글자 인코딩에 대해서도
			UTF-8로 설정해주자. <span class="code">이클립스
				window->workspace->왼쪽 하단 text file encoding -> other로 해서
				utf - 8로 바꾸기</span></li>
		<li>글자 출력 시스템프린트아웃으로 스트링 출력한다.(아 씨부랄 이걸 또하네)</li>
		<li>돌려본다. 녹색 아이콘, <span class="code">ctrl +
				f11</span> 등을 이용해보자.
		</li>
	</ol>
	<p>프렉티스 1에서 진행한다.</p>
	<pre class="code">
package againjava;

public class Practice1 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		System.out.println("씨부랄");

	}

}
</pre>
	<h1 class="subject">Basic Syntax</h1>
	<p class="imp">
		이걸 본다고 해도 내가 계속 요약을 해야되는데.. 그걸 타자로 치고 있어야 한다. 아 씨부랄 이게 말이나
		되는거냐. 차라리 웹으로 검색을 해봐서 따오도록 하자. 이렇게 해야지만 내가 계속 이곳에서 수월하게
		요약및 교육을 받을 수 있다. 해당 교육사이트는 <a
			href="https://www.tutorialspoint.com/java/java_basic_syntax.htm"
			target="_blank">튜토리얼 포인트</a> 이고 Basic Syntax부터 정리를 하도록
		하자. 즉 위의 영상은 그저 이클립스와 자바에 대한 설치 용도로만 활용하도록 하자.
	</p>
	<p>When we consider a Java program, it can be defined
		as a collection of objects that communicate via invoking
		each other's methods. Let us now briefly look into what do
		class, object, methods, and instance variables mean.</p>
	<ul>
		<li>Object − Objects have states and behaviors.
			Example: A dog has states - color, name, breed as well as
			behavior such as wagging their tail, barking, eating. An
			object is an instance of a class.</li>

		<li>Class − A class can be defined as a
			template/blueprint that describes the behavior/state that
			the object of its type supports.</li>

		<li>Methods − A method is basically a behavior. A
			class can contain many methods. It is in methods where
			the logics are written, data is manipulated and all the
			actions are executed.</li>

		<li>Instance Variables − Each object has its unique
			set of instance variables. An object's state is created
			by the values assigned to these instance variables.</li>
	</ul>
	<h1>First Java Program</h1>
	<p>Let us look at a simple code that will print the
		words Hello World.</p>
	<pre class="code">
public class MyFirstJavaProgram {

   /* This is my first java program.
    * This will print 'Hello World' as the output
    */

   public static void main(String []args) {
      System.out.println("Hello World"); // prints Hello World
   }
}</pre>
	<p class="imp">씨발 이건 한거다.</p>
	<p>Let's look at how to save the file, compile, and run
		the program. Please follow the subsequent steps −</p>
	<ul>
		<li>Open notepad and add the code as above.</li>

		<li>Save the file as: MyFirstJavaProgram.java.</li>

		<li>Open a command prompt window and go to the
			directory where you saved the class. Assume it's C:\.</li>

		<li>Type 'javac MyFirstJavaProgram.java' and press
			enter to compile your code. If there are no errors in
			your code, the command prompt will take you to the next
			line (Assumption : The path variable is set).</li>

		<li>Now, type ' java MyFirstJavaProgram ' to run your
			program.</li>

		<li>You will be able to see ' Hello World ' printed
			on the window.</li>
	</ul>
	<h2>Output</h2>
	<pre class="code">
C:\> javac MyFirstJavaProgram.java
C:\> java MyFirstJavaProgram 
Hello World</pre>
	<h1>Basic Syntax</h1>
	<p>About Java programs, it is very important to keep in
		mind the following points.</p>
	<ul>
		<li>Case Sensitivity − Java is case sensitive, which
			means identifier Hello and hello would have different
			meaning in Java.</li>
		<li>Class Names − For all class names the first
			letter should be in Upper Case. If several words are used
			to form a name of the class, each inner word's first
			letter should be in Upper Case. <br> Example: class
			MyFirstJavaClass
		</li>
		<li>Method Names − All method names should start with
			a Lower Case letter. If several words are used to form
			the name of the method, then each inner word's first
			letter should be in Upper Case. <br> Example: public
			void myMethodName()
		</li>
		<li>Program File Name − Name of the program file
			should exactly match the class name. <br> When
			saving the file, you should save it using the class name
			(Remember Java is case sensitive) and append '.java' to
			the end of the name (if the file name and the class name
			do not match, your program will not compile). <br>
			Example: Assume 'MyFirstJavaProgram' is the class name.
			Then the file should be saved as
			'MyFirstJavaProgram.java'
		</li>
		<li>public static void main(String args[]) − Java
			program processing starts from the main() method which is
			a mandatory part of every Java program.</li>
	</ul>
	<h1>Java Identifiers</h1>
	<p>
		All Java components require names. Names used for classes,
		variables, and methods are called identifiers. <br> <br>
		In Java, there are several points to remember about
		identifiers. They are as follows −
	</p>
	<ul>
		<li>All identifiers should begin with a letter (A to
			Z or a to z), currency character ($) or an underscore
			(_).</li>
		<li>After the first character, identifiers can have
			any combination of characters.</li>
		<li>A key word cannot be used as an identifier.</li>
		<li>Most importantly, identifiers are case sensitive.</li>
		<li>Examples of legal identifiers: age, $salary,
			_value, __1_value.</li>
		<li>Examples of illegal identifiers: 123abc, -salary.</li>
	</ul>
	<h1>Java Modifiers</h1>
	<p>Like other languages, it is possible to modify
		classes, methods, etc., by using modifiers. There are two
		categories of modifiers −</p>
	<ul>
		<li>Access Modifiers − default, public , protected,
			private</li>
		<li>Non-access Modifiers − final, abstract, strictfp
		</li>
	</ul>
	<p>We will be looking into more details about modifiers
		in the next section.</p>
	<h1>Java Variables</h1>
	<p>Following are the types of variables in Java −</p>
	<ul>
		<li>Local Variables</li>
		<li>Class Variables (Static Variables)</li>
		<li>Instance Variables (Non-static Variables)</li>
	</ul>
	<h1>Java Arrays</h1>
	<p>Arrays are objects that store multiple variables of
		the same type. However, an array itself is an object on
		the heap. We will look into how to declare, construct, and
		initialize in the upcoming chapters.</p>
	<h1>Java Enums</h1>
	<p>
		Enums were introduced in Java 5.0. Enums restrict a
		variable to have one of only a few predefined values. The
		values in this enumerated list are called enums. <br>
		<br> With the use of enums it is possible to reduce
		the number of bugs in your code. <br> <br> For
		example, if we consider an application for a fresh juice
		shop, it would be possible to restrict the glass size to
		small, medium, and large. This would make sure that it
		would not allow anyone to order any size other than small,
		medium, or large.
	</p>

	<pre class="code">
class FreshJuice {
   enum FreshJuiceSize{ SMALL, MEDIUM, LARGE }
   FreshJuiceSize size;
}

public class FreshJuiceTest {

   public static void main(String args[]) {
      FreshJuice juice = new FreshJuice();
      juice.size = FreshJuice.FreshJuiceSize.MEDIUM ;
      System.out.println("Size: " + juice.size);
   }
}</pre>
	<p class="imp">studyjava/practice001 패키지에서 진행한다.</p>

	<p>The above example will produce the following result
		−</p>
	<h2>Output</h2>
	<pre class="code">
Size: MEDIUM
</pre>
	<p class="imp">Note − Enums can be declared as their
		own or inside a class. Methods, variables, constructors
		can be defined inside enums as well.</p>
	<h1>Java Keywords</h1>
	<p>The following list shows the reserved words in Java.
		These reserved words may not be used as constant or
		variable or any other identifier names.</p>
	<table>
		<tbody>
			<tr>
				<td>abstract</td>
				<td>assert</td>
				<td>boolean</td>
				<td>break</td>
			</tr>
			<tr>
				<td>byte</td>
				<td>case</td>
				<td>catch</td>
				<td>char</td>
			</tr>
			<tr>
				<td>class</td>
				<td>const</td>
				<td>continue</td>
				<td>default</td>
			</tr>
			<tr>
				<td>do</td>
				<td>double</td>
				<td>else</td>
				<td>enum</td>
			</tr>
			<tr>
				<td>extends</td>
				<td>final</td>
				<td>finally</td>
				<td>float</td>
			</tr>
			<tr>
				<td>for</td>
				<td>goto</td>
				<td>if</td>
				<td>implements</td>
			</tr>
			<tr>
				<td>import</td>
				<td>instanceof</td>
				<td>int</td>
				<td>interface</td>
			</tr>
			<tr>
				<td>long</td>
				<td>native</td>
				<td>new</td>
				<td>package</td>
			</tr>
			<tr>
				<td>private</td>
				<td>protected</td>
				<td>public</td>
				<td>return</td>
			</tr>
			<tr>
				<td>short</td>
				<td>static</td>
				<td>strictfp</td>
				<td>super</td>
			</tr>
			<tr>
				<td>switch</td>
				<td>synchronized</td>
				<td>this</td>
				<td>throw</td>
			</tr>
			<tr>
				<td>throws</td>
				<td>transient</td>
				<td>try</td>
				<td>void</td>
			</tr>
			<tr>
				<td>volatile</td>
				<td>while</td>
				<td></td>
				<td></td>
			</tr>
		</tbody>
	</table>
	<h1>Comments in Java</h1>
	<p>Java supports single-line and multi-line comments
		very similar to C and C++. All characters available inside
		any comment are ignored by Java compiler.</p>
	<h2>Example</h2>
	<pre class="code">
public class MyFirstJavaProgram {

   /* This is my first java program.
    * This will print 'Hello World' as the output
    * This is an example of multi-line comments.
    */

   public static void main(String []args) {
      // This is an example of single line comment
      /* This is also an example of single line comment. */
      System.out.println("Hello World");
   }
}</pre>
	<h2>Output</h2>
	<pre class="code">
Hello World</pre>
	<h1>Using Blank Lines</h1>
	<p>A line containing only white space, possibly with a
		comment, is known as a blank line, and Java totally
		ignores it.</p>
	<h1>Inheritance</h1>
	<p>
		In Java, classes can be derived from classes. Basically,
		if you need to create a new class and here is already a
		class that has some of the code you require, then it is
		possible to derive your new class from the already
		existing code. <br> <br> This concept allows you
		to reuse the fields and methods of the existing class
		without having to rewrite the code in a new class. In this
		scenario, the existing class is called the <span
			class="code">superclass</span> and the derived class is
		called the <span class="code">subclass</span>.
	<h1>Interfaces</h1>
	<p>
		In Java language, an interface can be defined as a
		contract between objects on how to communicate with each
		other. Interfaces play a vital role when it comes to the
		concept of inheritance. <br> <br> An interface
		defines the methods, a deriving class (subclass) should
		use. But the implementation of the methods is totally up
		to the subclass.
	</p>
	<h1>What is Next?</h1>
	<p>The next section explains about Objects and classes
		in Java programming. At the end of the session, you will
		be able to get a clear picture as to what are objects and
		what are classes in Java.</p>

	<h1 class="subject">Java - Object and Classes</h1>
	<p>Java is an Object-Oriented Language. As a language
		that has the Object-Oriented feature, Java supports the
		following fundamental concepts −</p>
	<ul>
		<li>Polymorphism</li>
		<li>Inheritance</li>
		<li>Encapsulation</li>
		<li>Abstraction</li>
		<li>Classes</li>
		<li>Objects</li>
		<li>Instance</li>
		<li>Method</li>
		<li>Message Parsing</li>
	</ul>

	<p>In this chapter, we will look into the concepts -
		Classes and Objects.</p>
	<ul>
		<li>Object − Objects have states and behaviors.
			Example: A dog has states - color, name, breed as well as
			behaviors – wagging the tail, barking, eating. An object
			is an instance of a class.</li>
		<li>Class − A class can be defined as a
			template/blueprint that describes the behavior/state that
			the object of its type support.</li>
	</ul>
	<h1>Objects in Java</h1>
	<p>
		Let us now look deep into what are objects. If we consider
		the real-world, we can find many objects around us, cars,
		dogs, humans, etc. All these objects have a state and a
		behavior. <br> <br> If we consider a dog, then
		its state is - name, breed, color, and the behavior is -
		barking, wagging the tail, running. <br> <br> If
		you compare the software object with a real-world object,
		they have very similar characteristics. <br> <br>
		Software objects also have a state and a behavior. A
		software object's state is stored in fields and behavior
		is shown via methods. <br> <br> So in software
		development, methods operate on the internal state of an
		object and the object-to-object communication is done via
		methods.
	</p>
	<h1>Classes in Java</h1>
	<p>
		A class is a blueprint from which individual objects are
		created. <br> <br> Following is a sample of a
		class.
	</p>
	<pre class="code">
public class Dog {
   String breed;
   int age;
   String color;

   void barking() {
   }

   void hungry() {
   }

   void sleeping() {
   }
}</pre>
	<ul>
		<li>Local variables − Variables defined inside
			methods, constructors or blocks are called local
			variables. The variable will be declared and initialized
			within the method and the variable will be destroyed when
			the method has completed.</li>
		<li>Instance variables − Instance variables are
			variables within a class but outside any method. These
			variables are initialized when the class is instantiated.
			Instance variables can be accessed from inside any
			method, constructor or blocks of that particular class.</li>
		<li>Class variables − Class variables are variables
			declared within a class, outside any method, with the
			static keyword.</li>
	</ul>
	<p>
		A class can have any number of methods to access the value
		of various kinds of methods. In the above example,
		barking(), hungry() and sleeping() are methods. <br>
		<br> Following are some of the important topics that
		need to be discussed when looking into classes of the Java
		Language.
	</p>
	<h1>Constructors</h1>
	<p>
		When discussing about classes, one of the most important
		sub topic would be constructors. Every class has a
		constructor. If we do not explicitly write a constructor
		for a class, the Java compiler builds a default
		constructor for that class. <br> <br> Each time
		a new object is created, at least one constructor will be
		invoked. The main rule of constructors is that they should
		have the same name as the class. A class can have more
		than one constructor. <br> <br> Following is an
		example of a constructor −
	</p>
	<pre class="code">
public class Puppy {
   public Puppy() {
   }

   public Puppy(String name) {
      // This constructor has one parameter, name.
   }
}</pre>
	<p>
		Java also supports Singleton Classes where you would be
		able to create only one instance of a class. <br> <br>
		<span class="imp"> Note − We have two different
			types of constructors. We are going to discuss
			constructors in detail in the subsequent chapters.</span>
	</p>
	<h1>Creating an Object</h1>
	<p>
		As mentioned previously, a class provides the blueprints
		for objects. So basically, an <span class="code">object
			is created from a class.</span> In Java, the new keyword is used
		to create new objects. <br> <br> There are three
		steps when creating an object from a class −
	</p>
	<ul>

		<li>Declaration − A variable declaration with a
			variable name with an object type.</li>
		<li>Instantiation − The 'new' keyword is used to
			create the object.</li>
		<li>Initialization − The 'new' keyword is followed by
			a call to a constructor. This call initializes the new
			object.</li>
	</ul>
	<p>Following is an example of creating an object −</p>
	<pre class="code">
public class Puppy {
   public Puppy(String name) {
      // This constructor has one parameter, name.
      System.out.println("Passed Name is :" + name );
   }

   public static void main(String []args) {
      // Following statement would create an object myPuppy
      Puppy myPuppy = new Puppy( "tommy" );
   }
}</pre>
	<p class="imp">/studyjava/practice002에서 연습진행한다.</p>
	<p>If we compile and run the above program, then it
		will produce the following result −</p>
	<h2>Output</h2>
	<pre class="code">Passed Name is :tommy</pre>
	<h1>Accessing Instance Variables and Methods</h1>
	<p>Instance variables and methods are accessed via
		created objects. To access an instance variable, following
		is the fully qualified path −</p>
	<pre class="code">
/* First create an object */
ObjectReference = new Constructor();

/* Now call a variable as follows */
ObjectReference.variableName;

/* Now you can call a class method as follows */
ObjectReference.MethodName();</pre>
	<h2>Example</h2>
	<p>This example explains how to access instance
		variables and methods of a class.</p>
	<pre class="code">
public class Puppy {
   int puppyAge;

   public Puppy(String name) {
      // This constructor has one parameter, name.
      System.out.println("Name chosen is :" + name );
   }

   public void setAge( int age ) {
      puppyAge = age;
   }

   public int getAge( ) {
      System.out.println("Puppy's age is :" + puppyAge );
      return puppyAge;
   }

   public static void main(String []args) {
      /* Object creation */
      Puppy myPuppy = new Puppy( "tommy" );

      /* Call class method to set puppy's age */
      myPuppy.setAge( 2 );

      /* Call another class method to get puppy's age */
      myPuppy.getAge( );

      /* You can access instance variable as follows as well */
      System.out.println("Variable Value :" + myPuppy.puppyAge );
   }
}</pre>
	<p class="imp">/studyjava/src/practice003 에서 한다.</p>
	<p>If we compile and run the above program, then it
		will produce the following result −</p>
	<h2>Output</h2>
	<pre class="code">
Name chosen is :tommy
Puppy's age is :2
Variable Value :2</pre>
	<h1>Source File Declaration Rules</h1>
	<p>As the last part of this section, let's now look
		into the source file declaration rules. These rules are
		essential when declaring classes, import statements and
		package statements in a source file.</p>
	<ul>
		<li>There can be only one public class per source
			file.</li>
		<li>A source file can have multiple non-public
			classes.</li>
		<li>The public class name should be the name of the
			source file as well which should be appended by .java at
			the end. For example: the class name is public class
			Employee{} then the source file should be as
			Employee.java.</li>
		<li>If the class is defined inside a package, then
			the package statement should be the first statement in
			the source file.</li>
		<li>If import statements are present, then they must
			be written between the package statement and the class
			declaration. If there are no package statements, then the
			import statement should be the first line in the source
			file.</li>
		<li>Import and package statements will imply to all
			the classes present in the source file. It is not
			possible to declare different import and/or package
			statements to different classes in the source file.</li>
	</ul>
	<p>
		Classes have several access levels and there are different
		types of classes; abstract classes, final classes, etc. We
		will be explaining about all these in the access modifiers
		chapter. <br> <br> Apart from the above
		mentioned types of classes, Java also has some special
		classes called Inner classes and Anonymous classes.
	</p>
	<h1>Java Package</h1>
	<p>In simple words, it is a way of categorizing the
		classes and interfaces. When developing applications in
		Java, hundreds of classes and interfaces will be written,
		therefore categorizing these classes is a must as well as
		makes life much easier.</p>
	<h1>Import Statements</h1>
	<p>
		In Java if a fully qualified name, which includes the
		package and the class name is given, then the compiler can
		easily locate the source code or classes. Import statement
		is a way of giving the proper location for the compiler to
		find that particular class. <br> <br> For
		example, the following line would ask the compiler to load
		all the classes available in directory
		java_installation/java/io −
	</p>
	<pre class="code">
<span class="code">import java.io.*;</span>
	</pre>
	<h1>A Simple Case Study</h1>
	<p>
		For our case study, we will be creating two classes. They
		are Employee and EmployeeTest. <br> <br> First
		open notepad and add the following code. Remember this is
		the Employee class and the class is a public class. Now,
		save this source file with the name Employee.java. <br>
		<br> The Employee class has four <span class="code">instance
			variables</span> - name, age, designation and salary. The class
		has one explicitly defined constructor, which takes a
		parameter.
	</p>
	<pre class="code">
import java.io.*;
public class Employee {

   String name;
   int age;
   String designation;
   double salary;

   // This is the constructor of the class Employee
   public Employee(String name) {
      this.name = name;
   }

   // Assign the age of the Employee  to the variable age.
   public void empAge(int empAge) {
      age = empAge;
   }

   /* Assign the designation to the variable designation.*/
   public void empDesignation(String empDesig) {
      designation = empDesig;
   }

   /* Assign the salary to the variable	salary.*/
   public void empSalary(double empSalary) {
      salary = empSalary;
   }

   /* Print the Employee details */
   public void printEmployee() {
      System.out.println("Name:"+ name );
      System.out.println("Age:" + age );
      System.out.println("Designation:" + designation );
      System.out.println("Salary:" + salary);
   }
}</pre>
	<p>
		As mentioned previously in this tutorial, processing
		starts from the main method. Therefore, in order for us to
		run this Employee class there should be a main method and
		objects should be created. We will be creating a separate
		class for these tasks. <br> <br> Following is
		the EmployeeTest class, which creates two instances of the
		class Employee and invokes the methods for each object to
		assign values for each variable. <br> <br> Save
		the following code in EmployeeTest.java file.
	</p>
	<pre class="code">
import java.io.*;
public class EmployeeTest {

   public static void main(String args[]) {
      /* Create two objects using constructor */
      Employee empOne = new Employee("James Smith");
      Employee empTwo = new Employee("Mary Anne");

      // Invoking methods for each object created
      empOne.empAge(26);
      empOne.empDesignation("Senior Software Engineer");
      empOne.empSalary(1000);
      empOne.printEmployee();

      empTwo.empAge(21);
      empTwo.empDesignation("Software Engineer");
      empTwo.empSalary(500);
      empTwo.printEmployee();
   }
}</pre>
	<p class="imp">/studyjava/src/practice004 에서 프렉티스 진행한다.</p>
	<p>Now, compile both the classes and then run
		EmployeeTest to see the result as follows −</p>
	<h2>Output</h2>
	<pre class="code">
C:\> javac Employee.java
C:\> javac EmployeeTest.java
C:\> java EmployeeTest
Name:James Smith
Age:26
Designation:Senior Software Engineer
Salary:1000.0
Name:Mary Anne
Age:21
Designation:Software Engineer
Salary:500.0</pre>
	<h1>What is Next?</h1>
	<p>In the next session, we will discuss the basic data
		types in Java and how they can be used when developing
		Java applications.</p>
	<h1 class="subject">Java - Basic Datatypes</h1>
	<p>
		Variables are nothing but reserved memory locations to
		store values. This means that when you create a variable
		you reserve some space in the memory. <br> <br>
		Based on the data type of a variable, the operating system
		allocates memory and decides what can be stored in the
		reserved memory. Therefore, by assigning different data
		types to variables, you can store integers, decimals, or
		characters in these variables.<br> <br>There are
		two data types available in Java −
	</p>
	<ul>
		<li>Primitive Data Types</li>
		<li>Reference/Object Data Types</li>
	</ul>
	<h1>Primitive Data Types</h1>
	<p>There are eight primitive datatypes supported by
		Java. Primitive datatypes are predefined by the language
		and named by a keyword. Let us now look into the eight
		primitive data types in detail.</p>
	<h2>byte</h2>


	<ul>
		<li>Byte data type is an 8-bit signed two's
			complement integer</li>

		<li>Minimum value is -128 (-2^7)</li>

		<li>Maximum value is 127 (inclusive)(2^7 -1)</li>

		<li>Default value is 0</li>

		<li>Byte data type is used to save space in large
			arrays, mainly in place of integers, since a byte is four
			times smaller than an integer.</li>

		<li>Example: byte a = 100, byte b = -50</li>
	</ul>
	<h2>short</h2>
	<ul>

		<li>Short data type is a 16-bit signed two's
			complement integer</li>

		<li>Minimum value is -32,768 (-2^15)</li>

		<li>Maximum value is 32,767 (inclusive) (2^15 -1)</li>

		<li>Short data type can also be used to save memory
			as byte data type. A short is 2 times smaller than an
			integer</li>

		<li>Default value is 0.</li>

		<li>Example: short s = 10000, short r = -20000</li>
	</ul>
	<h2>int</h2>
	<ul>

		<li>Int data type is a 32-bit signed two's complement
			integer.</li>
		<li>Minimum value is - 2,147,483,648 (-2^31)</li>
		<li>Maximum value is 2,147,483,647(inclusive) (2^31
			-1)</li>
		<li>Integer is generally used as the default data
			type for integral values unless there is a concern about
			memory.</li>
		<li>The default value is 0</li>
		<li>Example: int a = 100000, int b = -200000</li>
	</ul>

	<h2>long</h2>

	<ul>
		<li>Long data type is a 64-bit signed two's
			complement integer</li>
		<li>Minimum value is
			-9,223,372,036,854,775,808(-2^63)</li>
		<li>Maximum value is 9,223,372,036,854,775,807
			(inclusive)(2^63 -1)</li>
		<li>This type is used when a wider range than int is
			needed</li>
		<li>Default value is 0L</li>
		<li>Example: long a = 100000L, long b = -200000L</li>
	</ul>
	<h2>float</h2>
	<ul>
		<li>Float data type is a single-precision 32-bit IEEE
			754 floating point</li>
		<li>Float is mainly used to save memory in large
			arrays of floating point numbers</li>
		<li>Default value is 0.0f</li>
		<li>Float data type is never used for precise values
			such as currency</li>
		<li>Example: float f1 = 234.5f</li>
	</ul>
	<h2>double</h2>
	<ul>
		<li>double data type is a double-precision 64-bit
			IEEE 754 floating point</li>
		<li>This data type is generally used as the default
			data type for decimal values, generally the default
			choice</li>
		<li>Double data type should never be used for precise
			values such as currency</li>
		<li>Default value is 0.0d</li>
		<li>Example: double d1 = 123.4</li>
	</ul>
	<h2>boolean</h2>
	<ul>
		<li>boolean data type represents one bit of
			information</li>
		<li>There are only two possible values: true and
			false</li>
		<li>This data type is used for simple flags that
			track true/false conditions</li>
		<li>Default value is false</li>
		<li>Example: boolean one = true</li>
	</ul>
	<h2>char</h2>
	<ul>
		<li>char data type is a single 16-bit Unicode
			character</li>
		<li>Minimum value is '\u0000' (or 0)</li>
		<li>Maximum value is '\uffff' (or 65,535 inclusive)</li>
		<li>Char data type is used to store any character</li>
		<li>Example: char letterA = 'A'</li>
	</ul>
	<h1>Reference Datatypes</h1>
	<ul>
		<li>Reference variables are created using defined
			constructors of the classes. They are used to access
			objects. These variables are declared to be of a specific
			type that cannot be changed. For example, Employee,
			Puppy, etc.</li>
		<li>Class objects and various type of array variables
			come under reference datatype.</li>
		<li>Default value of any reference variable is null.
		</li>
		<li>A reference variable can be used to refer any
			object of the declared type or any compatible type.</li>
		<li>Example: Animal animal = new Animal("giraffe");</li>
	</ul>
	<h1>Java Literals</h1>
	<p>
		A literal is a source code representation of a fixed
		value. They are represented directly in the code without
		any computation. <br> <br> Literals can be
		assigned to any primitive type variable. For example −
	</p>
	<pre class="code">
byte a = 68;
char a = 'A'</pre>
	<p>
		byte, int, long, and short can be expressed in
		decimal(base 10), hexadecimal(base 16) or octal(base 8)
		number systems as well. <br> <br> Prefix 0 is
		used to indicate octal, and prefix 0x indicates
		hexadecimal when using these number systems for literals.
		For example −
	</p>
	<pre class="code">
int decimal = 100;
int octal = 0144;
int hexa =  0x64;</pre>
	<p>String literals in Java are specified like they are
		in most other languages by enclosing a sequence of
		characters between a pair of double quotes. Examples of
		string literals are −</p>
	<pre class="code">
"Hello World"
"two\nlines"
"\"This is in quotes\""</pre>
	<p>String and char types of literals can contain any
		Unicode characters. For example −</p>
	<pre class="code">
char a = '\u0001';
String a = "\u0001";</pre>
	<p>Java language supports few special escape sequences
		for String and char literals as well. They are −</p>
	<table>
		<tbody>
			<tr>
				<th>Notation</th>
				<th>Character represented</th>
			</tr>
			<tr>
				<td>\n</td>
				<td>Newline (0x0a)</td>
			</tr>
			<tr>
				<td>\r</td>
				<td>Carriage return (0x0d)</td>
			</tr>
			<tr>
				<td>\f</td>
				<td>Formfeed (0x0c)</td>
			</tr>
			<tr>
				<td>\b</td>
				<td>Backspace (0x08)</td>
			</tr>
			<tr>
				<td>\s</td>
				<td>Space (0x20)</td>
			</tr>
			<tr>
				<td>\t</td>
				<td>tab</td>
			</tr>
			<tr>
				<td>\"</td>
				<td>Double quote</td>
			</tr>
			<tr>
				<td>\'</td>
				<td>Single quote</td>
			</tr>
			<tr>
				<td>\\</td>
				<td>backslash</td>
			</tr>
			<tr>
				<td>\ddd</td>
				<td>Octal character (ddd)</td>
			</tr>
			<tr>
				<td>\uxxxx</td>
				<td>Hexadecimal UNICODE character (xxxx)</td>
			</tr>
		</tbody>
	</table>
	<h1>What is Next?</h1>
	<p>This chapter explained the various data types. The
		next topic explains different variable types and their
		usage. This will give you a good understanding on how they
		can be used in the Java classes, interfaces, etc.</p>
	<h1 class="subject">Java - Variable Types</h1>
	<p>
		A variable provides us with named storage that our
		programs can manipulate. Each variable in Java has a
		specific type, which determines the size and layout of the
		variable's memory; the range of values that can be stored
		within that memory; and the set of operations that can be
		applied to the variable. <br> <br> You must
		declare all variables before they can be used. Following
		is the basic form of a variable declaration −
	</p>
	<pre class="code">
data type variable [ = value][, variable [ = value] ...] ;</pre>
	<p>
		Here data type is one of Java's datatypes and variable is
		the name of the variable. To declare more than one
		variable of the specified type, you can use a
		comma-separated list. <br> <br> Following are
		valid examples of variable declaration and initialization
		in Java −
	</p>
	<h2>Example</h2>
	<pre class="code">
int a, b, c;         // Declares three ints, a, b, and c.
int a = 10, b = 10;  // Example of initialization
byte B = 22;         // initializes a byte type variable B.
double pi = 3.14159; // declares and assigns a value of PI.
char a = 'a';        // the char variable a iis initialized with value 'a'</pre>
	<p>This chapter will explain various variable types
		available in Java Language. There are three kinds of
		variables in Java −</p>
	<ul>
		<li>Local variables</li>
		<li>Instance variables</li>
		<li>Class/Static variables
	</ul>
	<h1>Local Variables</h1>
	<ul>
		<li>Local variables are declared in methods,
			constructors, or blocks.</li>
		<li>Local variables are created when the method,
			constructor or block is entered and the variable will be
			destroyed once it exits the method, constructor, or
			block.</li>
		<li>Access modifiers cannot be used for local
			variables.</li>
		<li>Local variables are visible only within the
			declared method, constructor, or block.</li>
		<li>Local variables are implemented at stack level
			internally.</li>
		<li>There is no default value for local variables, <span
			class="imp">so local variables should be declared
				and an initial value should be assigned before the first
				use.</span></li>
	</ul>
	<h2>Example</h2>
	<p>
		Here, <span class="code">age</span> is a local variable.
		This is defined inside <span class="code">pupAge()</span>
		method and its scope is limited to only this method.
	</p>
	<pre class="code">
public class Test {
   public void pupAge() {
      <span class="code">int age</span> = 0;
      age = age + 7;
      System.out.println("Puppy age is : " + age);
   }

   public static void main(String args[]) {
      Test test = new Test();
      test.pupAge();
   }
}</pre>
	<p class="imp">practice005/Test.java 에서 해당 프렉티스 진행한다.</p>
	<h2>Output</h2>
	<pre class="code">
Puppy age is: 7</pre>
	<h2>Example2</h2>
	<p>
		Following example uses <span class="code">age</span>
		without initializing it, so it would give an error at the
		time of compilation.
	</p>
	<pre class="code">
public class Test {
   public void pupAge() {
      int age;
      age = age + 7;
      System.out.println("Puppy age is : " + age);
   }

   public static void main(String args[]) {
      Test test = new Test();
      test.pupAge();
   }
}</pre>
	<p>This will produce the following error while
		compiling it −</p>
	<h2>Output</h2>
	<pre class="code">
Test.java:4:variable number might not have been initialized
age = age + 7;
         ^
1 error</pre>
	<p class="imp">practice006/Test.java 에서 해당 프렉티스 진행한다.
		해당파일은 일부러 오류가 생성되기에 이를 참고하라.</p>
	<h1>Instance Variables</h1>
	<ul>
		<li>Instance variables are declared in a class, but
			outside a method, constructor or any block.</li>
		<li>When a space is allocated for an object in the
			heap, a slot for each instance variable value is created.
		</li>
		<li>Instance variables are created when an object is
			created with the use of the keyword 'new' and destroyed
			when the object is destroyed.</li>
		<li>Instance variables hold values that must be
			referenced by more than one method, constructor or block,
			or essential parts of an object's state that must be
			present throughout the class.</li>
		<li>Instance variables can be declared in class level
			before or after use.</li>
		<li>Access modifiers can be given for instance
			variables.</li>
		<li>The instance variables are visible for all
			methods, constructors and block in the class. Normally,
			it is recommended to make these variables private (access
			level). However, visibility for subclasses can be given
			for these variables with the use of access modifiers.</li>
		<li>Instance variables have default values. For
			numbers, the default value is 0, for Booleans it is
			false, and for object references it is null. Values can
			be assigned during the declaration or within the
			constructor.</li>
		<li>Instance variables can be accessed directly by
			calling the variable name inside the class. However,
			within static methods (when instance variables are given
			accessibility), they should be called using the fully
			qualified name. ObjectReference.VariableName.</li>
	</ul>
	<pre class="code">
import java.io.*;
public class Employee {

   // this instance variable is visible for any child class.
   <span class="code">public String name;</span>

   // salary  variable is visible in Employee class only.
   <span class="code">private double salary;</span>

   // The name variable is assigned in the constructor.
   public Employee (String empName) {
      <span class="code">name</span> = empName;
   }

   // The salary variable is assigned a value.
   public void setSalary(double empSal) {
      <span class="code">salary</span> = empSal;
   }

   // This method prints the employee details.
   public void printEmp() {
      System.out.println("name  : " + name );
      System.out.println("salary :" + salary);
   }

   public static void main(String args[]) {
      Employee empOne = new Employee("Ransika");
      empOne.setSalary(1000);
      empOne.printEmp();
   }
}</pre>
	<p class="imp">studyjava/pratice007/Emp.java 에서 해당 프렉티스
		진행한다.</p>
	<h2>Output</h2>
	<pre class="code">
name  : Ransika
salary :1000.0</pre>

	<h1>Class/Static Variables</h1>
	<ul>
		<li>Class variables also known as static variables
			are declared with the static keyword in a class, but
			outside a method, constructor or a block.</li>
		<li>There would only be one copy of each class
			variable per class, regardless of how many objects are
			created from it.</li>
		<li>Static variables are rarely used other than being
			declared as constants. Constants are variables that are
			declared as public/private, final, and static. Constant
			variables never change from their initial value.</li>
		<li>Static variables are stored in the static memory.
			It is rare to use static variables other than declared
			final and used as either public or private constants.</li>
		<li>Static variables are created when the program
			starts and destroyed when the program stops.</li>
		<li>Visibility is similar to instance variables.
			However, most static variables are declared public since
			they must be available for users of the class.</li>
		<li>Default values are same as instance variables.
			For numbers, the default value is 0; for Booleans, it is
			false; and for object references, it is null. Values can
			be assigned during the declaration or within the
			constructor. Additionally, values can be assigned in
			special static initializer blocks.</li>
		<li>Static variables can be accessed by calling with
			the class name ClassName.VariableName.</li>
		<li>When declaring class variables as public static
			final, then variable names (constants) are all in upper
			case. If the static variables are not public and final,
			the naming syntax is the same as instance and local
			variables.
	</ul>
	<h2>Example</h2>
	<pre class="code">
import java.io.*;
public class Employee {

   // salary  variable is a private static variable
   <span class="code">private static double salary;</span>

   // DEPARTMENT is a constant
   <span class="code">public static final String DEPARTMENT</span> = "Development ";

   public static void main(String args[]) {
      salary = 1000;
      System.out.println(DEPARTMENT + "average salary:" + salary);
   }
}</pre>
	<p class="imp">Note − If the variables are accessed
		from an outside class, the constant should be accessed as
		Employee.DEPARTMENT</p>
	<p>이 변수 타입은 객체를 선언하지 않고도 맘껏 이용할 수 있는 것이라고 볼 수 있다. 즉,
		Instance Variables은 객체를 선언하고 객체가 소멸되면 못쓰게 되지만, 이 static
		variable은 프로그램 기준으로 프로그램이 시작하면 생성되고, 끝나면 소멸된다.</p>
	<h1>What is Next?</h1>
	<p>You already have used access modifiers (public &amp;
		private) in this chapter. The next chapter will explain
		Access Modifiers and Non-Access Modifiers in detail.</p>


	<h1 class="subject">Java - Modifier Types</h1>
	<p>Modifiers are keywords that you add to those
		definitions to change their meanings. Java language has a
		wide variety of modifiers, including the following −</p>
	<ul>
		<li><a href="#java_access_modifiers">Java Access
				Modifiers</a></li>
		<li><a href="#non_access_modifiers">Non Access
				Modifiers</a></li>
	</ul>
	<p>To use a modifier, you include its keyword in the
		definition of a class, method, or variable. The modifier
		precedes the rest of the statement, as in the following
		example.</p>
	<h2>Example</h2>
	<pre class="code">
public class className {
   // ...
}

private boolean myFlag;
static final double weeks = 9.5;
protected static final int BOXWIDTH = 42;

public static void main(String[] arguments) {
   // body of method
}</pre>
	<h1>Access Control Modifiers</h1>
	<p>Java provides a number of access modifiers to set
		access levels for classes, variables, methods and
		constructors. The four access levels are −</p>
	<ul>
		<li>Visible to the package, the default. No modifiers
			are needed.</li>
		<li>Visible to the class only (private).</li>
		<li>Visible to the world (public).</li>
		<li>Visible to the package and all subclasses
			(protected).</li>
	</ul>
	<h1>Non-Access Modifiers</h1>
	<p>Java provides a number of non-access modifiers to
		achieve many other functionality.</p>
	<ul>
		<li>The static modifier for creating class methods
			and variables.</li>
		<li>The final modifier for finalizing the
			implementations of classes, methods, and variables.</li>
		<li>The abstract modifier for creating abstract
			classes and methods.</li>
		<li>The synchronized and volatile modifiers, which
			are used for threads.</li>
	</ul>
	<h1>What is Next?</h1>
	<p>In the next section, we will be discussing about
		Basic Operators used in Java Language. The chapter will
		give you an overview of how these operators can be used
		during application development.</p>

	<span id="java_access_modifiers"></span>
	<h1 class="subject sub">-Java - Access Modifiers</h1>
	<p>Java provides a number of access modifiers to set
		access levels for classes, variables, methods, and
		constructors. The four access levels are −</p>
	<ul>
		<li>Visible to the package, the default. No modifiers
			are needed.</li>
		<li>Visible to the class only (private).</li>
		<li>Visible to the world (public).</li>
		<li>Visible to the package and all subclasses
			(protected).</li>
	</ul>
	<h1>Default Access Modifier - No Keyword</h1>
	<p>
		Default access modifier means we do not explicitly declare
		an access modifier for a class, field, method, etc. <br>
		<br> A variable or method declared without any access
		control modifier is available to any other class in the
		same package. The fields in an interface are implicitly
		public static final and the methods in an interface are by
		default public.
	</p>
	<h2>Example</h2>
	<p>Variables and methods can be declared without any
		modifiers, as in the following examples −</p>
	<pre class="code">
String version = "1.5.1";

boolean processOrder() {
   return true;
}</pre>
	<h1>Private Access Modifier - Private</h1>
	<p>
		Methods, variables, and constructors that are declared
		private can only be accessed within the declared class
		itself. <br> <br> Private access modifier is the
		most restrictive access level. Class and interfaces cannot
		be private. <br> <br> Variables that are
		declared private can be accessed outside the class, if
		public getter methods are present in the class. <br>
		<br> Using the private modifier is the main way that
		an object encapsulates itself and hides data from the
		outside world.
	</p>
	<h2>Example</h2>
	<p>The following class uses private access control −</p>
	<pre class="code">
public class Logger {
   private String format;

   public String getFormat() {
      return this.format;
   }

   public void setFormat(String format) {
      this.format = format;
   }
}</pre>
	<p>
		Here, the <span class="code">format</span> variable of the
		Logger class is private, so there's no way for other
		classes to retrieve or set its value directly. <br> <br>
		So, to make this variable available to the outside world,
		we defined two public methods: <span class="code">getFormat()</span>,
		which returns the value of format, and <span class="code">setFormat(String)</span>,
		which sets its value.
	</p>
	<h1>Public Access Modifier - Public</h1>
	<p>
		A class, method, constructor, interface, etc. declared
		public can be accessed from any other class. Therefore,
		fields, methods, blocks declared inside a public class can
		be accessed from any class belonging to the Java Universe.
		<br> <br> However, if the public class we are
		trying to access is in a different package, then the
		public class still needs to be imported. Because of class
		inheritance, all public methods and variables of a class
		are inherited by its subclasses.
	</p>
	<h2>Example</h2>
	<p>The following function uses public access control −</p>
	<pre class="code">
public static void main(String[] arguments) {
   // ...
}</pre>
	<p class="imp">The main() method of an application has
		to be public. Otherwise, it could not be called by a Java
		interpreter (such as java) to run the class.</p>
	<h1>Protected Access Modifier - Protected</h1>
	<p>
		Variables, methods, and constructors, which are declared
		protected in a superclass can be accessed only by the
		subclasses in other package or any class within the
		package of the protected members' class. <br> <br>
		The protected access modifier cannot be applied to class
		and interfaces. Methods, fields can be declared protected,
		however methods and fields in a interface cannot be
		declared protected. <br> <br> Protected access
		gives the subclass a chance to use the helper method or
		variable, while preventing a nonrelated class from trying
		to use it.
	</p>
	<h2>Example</h2>
	<p>
		The following parent class uses protected access control,
		to allow its child class override <span class="code">openSpeaker()</span>
		method −
	</p>
	<pre class="code">
class AudioPlayer {
   protected boolean openSpeaker(Speaker sp) {
      // implementation details
   }
}

class StreamingAudioPlayer {
   boolean openSpeaker(Speaker sp) {
      // implementation details
   }
}</pre>
	<p>
		Here, if we define openSpeaker() method as private, then
		it would not be accessible from any other class other than
		<span class="code">AudioPlayer</span>. If we define it as
		public, then it would become accessible to all the outside
		world. But our intention is to expose this method to its
		subclass only, that’s why we have used protected modifier.
	</p>
	<h1>Access Control and Inheritance</h1>
	<p>The following rules for inherited methods are
		enforced −</p>
	<ul>
		<li>Methods declared public in a superclass also must
			be public in all subclasses.</li>
		<li>Methods declared protected in a superclass must
			either be protected or public in subclasses; they cannot
			be private.</li>
		<li>Methods declared private are not inherited at
			all, so there is no rule for them.</li>
	</ul>
	<span id="non_access_modifiers"></span>
	<h1 class="subject sub">-Java - Non Access Modifiers</h1>
	<p>Java provides a number of non-access modifiers to
		achieve many other functionalities.</p>
	<ul>
		<li>The static modifier for creating class methods
			and variables.</li>
		<li>The final modifier for finalizing the
			implementations of classes, methods, and variables.</li>
		<li>The abstract modifier for creating abstract
			classes and methods.</li>
		<li>The synchronized and volatile modifiers, which
			are used for threads.</li>
	</ul>
	<h1>The Static Modifier</h1>
	<h2>Static Variables</h2>
	<p>
		The static keyword is used to create variables that will
		exist independently of any instances created for the
		class. Only one copy of the static variable exists
		regardless of the number of instances of the class. <br>
		<br> Static variables are also known as class
		variables. Local variables cannot be declared static.
	</p>
	<h2>Static Methods</h2>
	<p>
		The static keyword is used to create methods that will
		exist independently of any instances created for the
		class. <br> <br> Static methods do not use any
		instance variables of any object of the class they are
		defined in. Static methods take all the data from
		parameters and compute something from those parameters,
		with no reference to variables. <br> <br> Class
		variables and methods can be accessed using the class name
		followed by a dot and the name of the variable or method.
	</p>
	<h2>Example</h2>
	<p>The static modifier is used to create class methods
		and variables, as in the following example −</p>

	<pre class="code">
public class InstanceCounter {

   private static int numInstances = 0;

   protected static int getCount() {
      return numInstances;
   }

   private static void addInstance() {
      numInstances++;
   }

   InstanceCounter() {
      InstanceCounter.addInstance();
   }

   public static void main(String[] arguments) {
      System.out.println("Starting with " + InstanceCounter.getCount() + " instances");

      for (int i = 0; i &lt; 500; ++i) {
         new InstanceCounter();
      }
      System.out.println("Created " + InstanceCounter.getCount() + " instances");
   }
}
</pre>
	<p class="imp">/studyjava/src/practice009/InstanceCounter.java
		에서 해당 프렉티스를 진행한다.</p>
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class="code">
Started with 0 instances
Created 500 instances</pre>

	<h1>The Final Modifier</h1>
	<h2>Final Variables</h2>
	<p>
		A final variable can be explicitly initialized only once.
		A reference variable declared final can never be
		reassigned to refer to an different object. <br> <br>
		However, the data within the object can be changed. So,
		the state of the object can be changed but not the
		reference. <br> <br> With variables, the final
		modifier often is used with static to make the constant a
		class variable.
	</p>
	<h2>Example</h2>
	<pre class="code">
public class Test {
   final int value = 10;

   // The following are examples of declaring constants:
   public static final int BOXWIDTH = 6;
   static final String TITLE = "Manager";

   public void changeValue() {
      value = 12;   // will give an error
   }
}</pre>
	<p class="imp">/studyjava/src/practice010/Test.java 에서
		해당 예제 실행한다.</p>
	<h2>Final Methods</h2>
	<p>
		A final method cannot be overridden by any subclasses. As
		mentioned previously, the final modifier prevents a method
		from being modified in a subclass. <br> <br> The
		main intention of making a method final would be that the
		content of the method should not be changed by any
		outsider.
	</p>
	<h2>Example</h2>
	<p>You declare methods using the final modifier in the
		class declaration, as in the following example −</p>
	<pre class="code">
public class Test {
   public final void changeName() {
      // body of method
   }
}</pre>
	<h2>Final Classes</h2>
	<p>The main purpose of using a class being declared as
		final is to prevent the class from being subclassed. If a
		class is marked as final then no class can inherit any
		feature from the final class.</p>
	<h2>Example</h2>
	<pre class="code">
public final class Test {
   // body of class
}</pre>
	<h1>The abstract Modifier</h1>
	<h2>Abstract Class</h2>
	<p>
		An abstract class can never be instantiated. If a class is
		declared as abstract then the sole purpose is for the
		class to be extended. <br> <br> <span
			class="bookmark">A class cannot be both abstract
			and final</span> (since a final class cannot be extended). If a
		class contains abstract methods then the class should be
		declared abstract. Otherwise, a compile error will be
		thrown. <br> <br> An abstract class may contain
		both abstract methods as well normal methods.
	</p>
	<h2>Example</h2>
	<pre class="code">
abstract class Caravan {
   private double price;
   private String model;
   private String year;
   public abstract void goFast();   // an abstract method
   public abstract void changeColor();
}</pre>
	<h2>Abstract Methods</h2>
	<p>
		An abstract method is a method declared without any
		implementation. The methods body (implementation) is
		provided by the subclass. Abstract methods can never be
		final or strict. <br> <br> Any class that
		extends an abstract class must implement all the abstract
		methods of the super class, unless the subclass is also an
		abstract class. <br> <br> If a class contains
		one or more abstract methods, then the class must be
		declared abstract. An abstract class does not need to
		contain abstract methods. <br> <br> The abstract
		method ends with a semicolon. Example: public abstract
		sample();
	</p>
	<h2>Example</h2>
	<pre class="code">
public abstract class SuperClass {
   abstract void m();   // abstract method
}

class SubClass extends SuperClass {
   // implements the abstract method
   void m() {
      .........
   }
}</pre>
	<h2>The Synchronized Modifier</h2>
	<p>The synchronized keyword used to indicate that a
		method can be accessed by only one thread at a time. The
		synchronized modifier can be applied with any of the four
		access level modifiers.</p>
	<h2>Example</h2>
	<pre class="code">
public synchronized void showDetails() {
   .......
}</pre>
	<h2>The Transient Modifier</h2>
	<p>
		An instance variable is marked transient to indicate the
		JVM to skip the particular variable when serializing the
		object containing it. <br> <br> This modifier is
		included in the statement that creates the variable,
		preceding the class or data type of the variable.
	</p>
	<h2>Example</h2>
	<pre class="code">
public transient int limit = 55;   // will not persist
public int b;   // will persist</pre>
	<h2>The Volatile Modifier</h2>
	<p>
		The volatile modifier is used to let the JVM know that a
		thread accessing the variable must always merge its own
		private copy of the variable with the master copy in the
		memory. <br> <br> Accessing a volatile variable
		synchronizes all the cached copied of the variables in the
		main memory. Volatile can only be applied to instance
		variables, which are of type object or private. A volatile
		object reference can be null.
	</p>
	<h2>Exmaple</h2>
	<pre class="code">
public class MyRunnable implements Runnable {
   private volatile boolean active;

   public void run() {
      active = true;
      while (active) {   // line 1
         // some code here
      }
   }

   public void stop() {
      active = false;   // line 2
   }
}</pre>

	<p>Usually, run() is called in one thread (the one you
		start using the Runnable), and stop() is called from
		another thread. If in line 1, the cached value of active
		is used, the loop may not stop when you set active to
		false in line 2. That's when you want to use volatile.</p>




	<h1 class="subject">Java - Basic Operators</h1>
	<p>Java provides a rich set of operators to manipulate
		variables. We can divide all the Java operators into the
		following groups −</p>
	<ul>
		<li>Arithmetic Operators</li>
		<li>Relational Operators</li>
		<li>Bitwise Operators</li>
		<li>Logical Operators</li>
		<li>Assignment Operators</li>
		<li>Misc Operators</li>
	</ul>
	<h1>The Arithmetic Operators</h1>
	<p>
		Arithmetic operators are used in mathematical expressions
		in the same way that they are used in algebra. The
		following table lists the arithmetic operators −<br>
		<br>Assume integer variable A holds 10 and variable B
		holds 20, then −
	</p>

	<p>The following program is a simple example which
		demonstrates the arithmetic operators. Copy and paste the
		following Java program in Test.java file, and compile and
		run this program −</p>
	<h2>Example</h2>
	<pre class='code'>
public class Test {

   public static void main(String args[]) {
      int a = 10;
      int b = 20;
      int c = 25;
      int d = 25;

      System.out.println("a + b = " + (a + b) );
      System.out.println("a - b = " + (a - b) );
      System.out.println("a * b = " + (a * b) );
      System.out.println("b / a = " + (b / a) );
      System.out.println("b % a = " + (b % a) );
      System.out.println("c % a = " + (c % a) );
      System.out.println("a++   = " +  (a++) );
      System.out.println("a--   = " +  (a--) );

      // Check the difference in d++ and ++d
      System.out.println("d++   = " +  (d++) );
      System.out.println("++d   = " +  (++d) );
   }
}</pre>
	<p class="imp">practice10에서 테스트 진행한다.</p>
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class="code">
a + b = 30
a - b = -10
a * b = 200
b / a = 2
b % a = 0
c % a = 5
a++   = 10
a--   = 11
d++   = 25
++d   = 27</pre>
	<table>
		<tbody>
			<tr>
				<th>Operator</th>
				<th>Description</th>
				<th>Example</th>
			</tr>
			<tr>
				<td
					style="width: 30%; text-align: center; vertical-align: middle">+
					(Addition)</td>
				<td style="width: 40%;">Adds values on either side
					of the operator.</td>
				<td style="text-align: center; vertical-align: middle">A
					+ B will give 30</td>
			</tr>
			<tr>
				<td style="text-align: center; vertical-align: middle">-
					(Subtraction)</td>
				<td>Subtracts right-hand operand from left-hand
					operand.</td>
				<td style="text-align: center; vertical-align: middle">A
					- B will give -10</td>
			</tr>
			<tr>
				<td style="text-align: center; vertical-align: middle">*
					(Multiplication)</td>
				<td>Multiplies values on either side of the
					operator.</td>
				<td style="text-align: center; vertical-align: middle">A
					* B will give 200</td>
			</tr>
			<tr>
				<td style="text-align: center; vertical-align: middle">/
					(Division)</td>
				<td>Divides left-hand operand by right-hand
					operand.</td>
				<td style="text-align: center; vertical-align: middle">B
					/ A will give 2</td>
			</tr>
			<tr>
				<td style="text-align: center; vertical-align: middle">%
					(Modulus)</td>
				<td>Divides left-hand operand by right-hand operand
					and returns remainder.</td>
				<td style="text-align: center; vertical-align: middle">B
					% A will give 0</td>
			</tr>
			<tr>
				<td style="text-align: center; vertical-align: middle">++
					(Increment)</td>
				<td>Increases the value of operand by 1.</td>
				<td style="text-align: center; vertical-align: middle">B++
					gives 21</td>
			</tr>
			<tr>
				<td style="text-align: center; vertical-align: middle">--
					(Decrement)</td>
				<td>Decreases the value of operand by 1.</td>
				<td style="text-align: center; vertical-align: middle">B--
					gives 19</td>
			</tr>
		</tbody>
	</table>
	<h1>The Relational Operators</h1>
	<p>
		There are following relational operators supported by Java
		language. <br> <br> Assume variable A holds 10
		and variable B holds 20, then −<br> <br>The
		following program is a simple example that demonstrates
		the relational operators. Copy and paste the following
		Java program in Test.java file and compile and run this
		program.
	</p>
	<pre class="code">
public class Test {

   public static void main(String args[]) {
      int a = 10;
      int b = 20;

      System.out.println("a == b = " + (a == b) );
      System.out.println("a != b = " + (a != b) );
      System.out.println("a > b = " + (a > b) );
      System.out.println("a &lt; b = " + (a &lt; b) );
      System.out.println("b >= a = " + (b >= a) );
      System.out.println("b &lt;= a = " + (b &lt;= a) );
   }
}</pre>
	<p class="imp">practice010/Test2.java 에서 해당 프렉티스 실행한다.</p>
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class="code">
a == b = false
a != b = true
a > b = false
a &lt; b = true
b >= a = true
b &lt;= a = false</pre>

	<table>
		<tbody>
			<tr>
				<th>Operator</th>
				<th>Description</th>
				<th>Example</th>
			</tr>
			<tr>
				<td style="text-align: center; vertical-align: middle">==
					(equal to)</td>
				<td>Checks if the values of two operands are equal
					or not, if yes then condition becomes true.</td>
				<td style="text-align: center; vertical-align: middle">(A
					== B) is not true.</td>
			</tr>
			<tr>
				<td style="text-align: center; vertical-align: middle">!=
					(not equal to)</td>
				<td>Checks if the values of two operands are equal
					or not, if values are not equal then condition becomes
					true.</td>
				<td style="text-align: center; vertical-align: middle">(A
					!= B) is true.</td>
			</tr>
			<tr>
				<td style="text-align: center; vertical-align: middle">&gt;
					(greater than)</td>
				<td>Checks if the value of left operand is greater
					than the value of right operand, if yes then condition
					becomes true.</td>
				<td style="text-align: center; vertical-align: middle">(A
					&gt; B) is not true.</td>
			</tr>
			<tr>
				<td style="text-align: center; vertical-align: middle">&lt;
					(less than)</td>
				<td>Checks if the value of left operand is less
					than the value of right operand, if yes then condition
					becomes true.</td>
				<td style="text-align: center; vertical-align: middle">(A
					&lt; B) is true.</td>
			</tr>
			<tr>
				<td style="text-align: center; vertical-align: middle">&gt;=
					(greater than or equal to)</td>
				<td>Checks if the value of left operand is greater
					than or equal to the value of right operand, if yes
					then condition becomes true.</td>
				<td style="text-align: center; vertical-align: middle">(A
					&gt;= B) is not true.</td>
			</tr>
			<tr>
				<td style="text-align: center; vertical-align: middle">&lt;=
					(less than or equal to)</td>
				<td>Checks if the value of left operand is less
					than or equal to the value of right operand, if yes
					then condition becomes true.</td>
				<td style="text-align: center; vertical-align: middle">(A
					&lt;= B) is true.</td>
			</tr>
		</tbody>
	</table>

	<h1>The Bitwise Operators</h1>
	<p>
		Java defines several bitwise operators, which can be
		applied to the integer types, long, int, short, char, and
		byte. <br> <br> Bitwise operator works on bits
		and performs bit-by-bit operation. Assume if a = 60 and b
		= 13; now in binary format they will be as follows −
	</p>
	<pre class="code">
a = 0011 1100

b = 0000 1101

-----------------

a&amp;b = 0000 1100

a|b = 0011 1101

a^b = 0011 0001

~a  = 1100 0011</pre>
	<p>
		The following table lists the bitwise operators − <br>
		<br> Assume integer variable A holds 60 and variable
		B holds 13 then −
	</p>
	<p>The following program is a simple example that
		demonstrates the bitwise operators. Copy and paste the
		following Java program in Test.java file and compile and
		run this program −</p>
	<pre class="code">
public class Test {

   public static void main(String args[]) {
      int a = 60;	/* 60 = 0011 1100 */
      int b = 13;	/* 13 = 0000 1101 */
      int c = 0;

      c = a &amp; b;        /* 12 = 0000 1100 */
      System.out.println("a &amp; b = " + c );

      c = a | b;        /* 61 = 0011 1101 */
      System.out.println("a | b = " + c );

      c = a ^ b;        /* 49 = 0011 0001 */
      System.out.println("a ^ b = " + c );

      c = ~a;           /*-61 = 1100 0011 */
      System.out.println("~a = " + c );

      c = a &lt;&lt; 2;       /* 240 = 1111 0000 */
      System.out.println("a &lt;&lt; 2 = " + c );

      c = a &gt;&gt; 2;       /* 15 = 1111 */
      System.out.println("a &gt;&gt; 2  = " + c );

      c = a &gt;&gt;&gt; 2;      /* 15 = 0000 1111 */
      System.out.println("a &gt;&gt;&gt; 2 = " + c );
   }
}</pre>
	<p class="imp">pratice10/Test3에서 진행한다.</p>
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class="code">
a &amp; b = 12
a | b = 61
a ^ b = 49
~a = -61
a &lt;&lt; 2 = 240
a >> 2  = 15
a >>> 2 = 15</pre>
	<table>
		<tbody>
			<tr>
				<th>Operator</th>
				<th>Description</th>
				<th>Example</th>
			</tr>
			<tr>
				<td
					style="width: 25%; text-align: center; vertical-align: middle">&amp;
					(bitwise and)</td>
				<td style="width: 45%; vertical-align: middle">Binary
					AND Operator copies a bit to the result if it exists in
					both operands.</td>
				<td
					style="width: 35%; text-align: center; vertical-align: middle">(A
					&amp; B) will give 12 which is 0000 1100</td>
			</tr>
			<tr>
				<td style="text-align: center; vertical-align: middle">|
					(bitwise or)</td>
				<td style="vertical-align: middle;">Binary OR
					Operator copies a bit if it exists in either operand.</td>
				<td style="text-align: center; vertical-align: middle">(A
					| B) will give 61 which is 0011 1101</td>
			</tr>
			<tr>
				<td style="text-align: center; vertical-align: middle">^
					(bitwise XOR)</td>
				<td style="vertical-align: middle;">Binary XOR
					Operator copies the bit if it is set in one operand but
					not both.</td>
				<td style="text-align: center; vertical-align: middle">(A
					^ B) will give 49 which is 0011 0001</td>
			</tr>
			<tr>
				<td style="text-align: center; vertical-align: middle">~
					(bitwise compliment)</td>
				<td style="vertical-align: middle;">Binary Ones
					Complement Operator is unary and has the effect of
					'flipping' bits.</td>
				<td style="text-align: center; vertical-align: middle">(~A
					) will give -61 which is 1100 0011 in 2's complement
					form due to a signed binary number.</td>
			</tr>
			<tr>
				<td style="text-align: center; vertical-align: middle">&lt;&lt;
					(left shift)</td>
				<td style="vertical-align: middle;">Binary Left
					Shift Operator. The left operands value is moved left
					by the number of bits specified by the right operand.</td>
				<td style="text-align: center; vertical-align: middle">A
					&lt;&lt; 2 will give 240 which is 1111 0000</td>
			</tr>
			<tr>
				<td style="text-align: center; vertical-align: middle">&gt;&gt;
					(right shift)</td>
				<td>Binary Right Shift Operator. The left operands
					value is moved right by the number of bits specified by
					the right operand.</td>
				<td style="text-align: center; vertical-align: middle">A
					&gt;&gt; 2 will give 15 which is 1111</td>
			</tr>
			<tr>
				<td style="text-align: center; vertical-align: middle">&gt;&gt;&gt;
					(zero fill right shift)</td>
				<td>Shift right zero fill operator. The left
					operands value is moved right by the number of bits
					specified by the right operand and shifted values are
					filled up with zeros.</td>
				<td style="text-align: center; vertical-align: middle">A
					&gt;&gt;&gt;2 will give 15 which is 0000 1111</td>
			</tr>
		</tbody>
	</table>
	<h1>The Logical Operators</h1>
	<p>
		The following table lists the logical operators − <br>
		<br> Assume Boolean variables A holds true and
		variable B holds false, then −
	</p>
	<p>The following simple example program demonstrates
		the logical operators. Copy and paste the following Java
		program in Test.java file and compile and run this program
		−</p>
	<h2>Example</h2>
	<pre class="code">
public class Test {

   public static void main(String args[]) {
      boolean a = true;
      boolean b = false;

      System.out.println("a &amp;&amp; b = " + (a&amp;&amp;b));
      System.out.println("a || b = " + (a||b) );
      System.out.println("!(a &amp;&amp; b) = " + !(a &amp;&amp; b));
   }
}</pre>
	<p class="imp">practice10/Test4 에서 해당 프렉티스 진행한다.</p>
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class="code">
a &amp;&amp; b = false
a || b = true
!(a &amp;&amp; b) = true</pre>
	<table>
		<tbody>
			<tr>
				<th style="text-align: center; width: 23%;">Operator</th>
				<th style="text-align: center;">Description</th>
				<th style="text-align: center; width: 24%">Example</th>
			</tr>
			<tr>
				<td style="text-align: center; vertical-align: middle">&amp;&amp;
					(logical and)</td>
				<td>Called Logical AND operator. If both the
					operands are non-zero, then the condition becomes true.</td>
				<td style="text-align: center; vertical-align: middle">(A
					&amp;&amp; B) is false</td>
			</tr>
			<tr>
				<td style="text-align: center; vertical-align: middle">||
					(logical or)</td>
				<td>Called Logical OR Operator. If any of the two
					operands are non-zero, then the condition becomes true.</td>
				<td style="text-align: center; vertical-align: middle">(A
					|| B) is true</td>
			</tr>
			<tr>
				<td style="text-align: center; vertical-align: middle">!
					(logical not)</td>
				<td>Called Logical NOT Operator. Use to reverses
					the logical state of its operand. If a condition is
					true then Logical NOT operator will make false.</td>
				<td style="text-align: center; vertical-align: middle">!(A
					&amp;&amp; B) is true</td>
			</tr>
		</tbody>
	</table>


	<h1>The Assignment Operators</h1>
	<p>Following are the assignment operators supported by
		Java language −</p>
	<p>The following program is a simple example that
		demonstrates the assignment operators. Copy and paste the
		following Java program in Test.java file. Compile and run
		this program −</p>
	<h2>Example</h2>
	<pre class="code">
public class Test {

   public static void main(String args[]) {
      int a = 10;
      int b = 20;
      int c = 0;

      c = a + b;
      System.out.println("c = a + b = " + c );

      c += a ;
      System.out.println("c += a  = " + c );

      c -= a ;
      System.out.println("c -= a = " + c );

      c *= a ;
      System.out.println("c *= a = " + c );

      a = 10;
      c = 15;
      c /= a ;
      System.out.println("c /= a = " + c );

      a = 10;
      c = 15;
      c %= a ;
      System.out.println("c %= a  = " + c );

      c &lt;&lt;= 2 ;
      System.out.println("c &lt;&lt;= 2 = " + c );

      c >>= 2 ;
      System.out.println("c >>= 2 = " + c );

      c >>= 2 ;
      System.out.println("c >>= 2 = " + c );

      c &amp;= a ;
      System.out.println("c &amp;= a  = " + c );

      c ^= a ;
      System.out.println("c ^= a   = " + c );

      c |= a ;
      System.out.println("c |= a   = " + c );
   }
}</pre>
	<p class="imp">practice010/Test5에서 해당 프렉티스 진행한다.</p>
	<p>This will produce the following result −</p>

	<h2>Output</h2>
	<pre class="code">
c = a + b = 30
c += a  = 40
c -= a = 30
c *= a = 300
c /= a = 1
c %= a  = 5
c &lt;&lt;= 2 = 20
c >>= 2 = 5
c >>= 2 = 1
c &amp;= a  = 0
c ^= a   = 10
c |= a   = 10</pre>
	<table>
		<tbody>
			<tr>
				<th style="text-align: center;">Operator</th>
				<th style="text-align: center; width: 50%">Description</th>
				<th style="text-align: center;">Example</th>
			</tr>
			<tr>
				<td style="text-align: center; vertical-align: middle">=</td>
				<td>Simple assignment operator. Assigns values from
					right side operands to left side operand.</td>
				<td style="text-align: center; vertical-align: middle">C
					= A + B will assign value of A + B into C</td>
			</tr>
			<tr>
				<td style="text-align: center; vertical-align: middle">+=</td>
				<td>Add AND assignment operator. It adds right
					operand to the left operand and assign the result to
					left operand.</td>
				<td style="text-align: center; vertical-align: middle">C
					+= A is equivalent to C = C + A</td>
			</tr>
			<tr>
				<td style="text-align: center; vertical-align: middle">-=</td>
				<td>Subtract AND assignment operator. It subtracts
					right operand from the left operand and assign the
					result to left operand.</td>
				<td style="text-align: center; vertical-align: middle">C
					-= A is equivalent to C = C – A</td>
			</tr>
			<tr>
				<td style="text-align: center; vertical-align: middle">*=</td>
				<td>Multiply AND assignment operator. It multiplies
					right operand with the left operand and assign the
					result to left operand.</td>
				<td style="text-align: center; vertical-align: middle">C
					*= A is equivalent to C = C * A</td>
			</tr>
			<tr>
				<td class="ts">/=</td>
				<td>Divide AND assignment operator. It divides left
					operand with the right operand and assign the result to
					left operand.</td>
				<td style="text-align: center; vertical-align: middle">C
					/= A is equivalent to C = C / A</td>
			</tr>
			<tr>
				<td style="text-align: center; vertical-align: middle">%=</td>
				<td>Modulus AND assignment operator. It takes
					modulus using two operands and assign the result to
					left operand.</td>
				<td style="text-align: center; vertical-align: middle">C
					%= A is equivalent to C = C % A</td>
			</tr>
			<tr>
				<td style="text-align: center; vertical-align: middle">&lt;&lt;=</td>
				<td style="vertical-align: middle;">Left shift AND
					assignment operator.</td>
				<td style="text-align: center; vertical-align: middle">C
					&lt;&lt;= 2 is same as C = C &lt;&lt; 2</td>
			</tr>
			<tr>
				<td style="text-align: center; vertical-align: middle">&gt;&gt;=</td>
				<td style="vertical-align: middle;">Right shift AND
					assignment operator.</td>
				<td style="text-align: center; vertical-align: middle">C
					&gt;&gt;= 2 is same as C = C &gt;&gt; 2</td>
			</tr>
			<tr>
				<td style="text-align: center; vertical-align: middle">&amp;=</td>
				<td style="vertical-align: middle;">Bitwise AND
					assignment operator.</td>
				<td style="text-align: center; vertical-align: middle">C
					&amp;= 2 is same as C = C &amp; 2</td>
			</tr>
			<tr>
				<td style="text-align: center; vertical-align: middle">^=</td>
				<td>bitwise exclusive OR and assignment operator.</td>
				<td style="text-align: center; vertical-align: middle">C
					^= 2 is same as C = C ^ 2</td>
			</tr>
			<tr>
				<td style="text-align: center; vertical-align: middle">|=</td>
				<td>bitwise inclusive OR and assignment operator.</td>
				<td style="text-align: center; vertical-align: middle">C
					|= 2 is same as C = C | 2</td>
			</tr>
		</tbody>
	</table>
	<h1>Miscellaneous Operators</h1>
	<p>There are few other operators supported by Java
		Language.</p>

	<h2>Conditional Operator ( ? : )</h2>
	<p>Conditional operator is also known as the ternary
		operator. This operator consists of three operands and is
		used to evaluate Boolean expressions. The goal of the
		operator is to decide, which value should be assigned to
		the variable. The operator is written as −</p>
	<pre class="code">
variable x = (expression) ? value if true : value if false</pre>
	<p>Following is an example −</p>
	<pre class="code">
public class Test {

   public static void main(String args[]) {
      int a, b;
      a = 10;
      b = (a == 1) ? 20: 30;
      System.out.println( "Value of b is : " +  b );

      b = (a == 10) ? 20: 30;
      System.out.println( "Value of b is : " + b );
   }
}</pre>
	<p class="imp">practice010/Test6.java 에서 해당 프렉티스 진행한다.</p>

	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class="code">
Value of b is : 30
Value of b is : 20</pre>
	<h2>instanceof Operator</h2>
	<p>This operator is used only for object reference
		variables. The operator checks whether the object is of a
		particular type (class type or interface type). instanceof
		operator is written as −</p>
	<pre class="code">
( Object reference variable ) instanceof  (class/interface type)</pre>
	<p>If the object referred by the variable on the left
		side of the operator passes the IS-A check for the
		class/interface type on the right side, then the result
		will be true. Following is an example −</p>
	<h2>Example</h2>
	<pre class="code">
public class Test {

   public static void main(String args[]) {

      String name = "James";

      // following will return true since name is type of String
      boolean result = name instanceof String;
      System.out.println( result );
   }
}</pre>
	<p class="imp">pratice010/Test7.java 에서 해당 프렉티스 진행한다.</p>
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class="code">
true</pre>
	<p>This operator will still return true, if the object
		being compared is the assignment compatible with the type
		on the right. Following is one more example −</p>
	<h2>Example</h2>
	<pre class="code">
class Vehicle {}

public class Car extends Vehicle {

   public static void main(String args[]) {

      Vehicle a = new Car();
      boolean result =  a instanceof Car;
      System.out.println( result );
   }
}</pre>
	<p class="imp">practice011/Car.java에서 해당 프렉티스 진행한다.</p>
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class="code">
true</pre>
	<h1>Precedence of Java Operators</h1>
	<p>
		Operator precedence determines the grouping of terms in an
		expression. This affects how an expression is evaluated.
		Certain operators have higher precedence than others; for
		example, the multiplication operator has higher precedence
		than the addition operator − <br> <br> For
		example, x = 7 + 3 * 2; here x is assigned 13, not 20
		because operator * has higher precedence than +, so it
		first gets multiplied with 3 * 2 and then adds into 7. <br>
		<br> Here, operators with the highest precedence
		appear at the top of the table, those with the lowest
		appear at the bottom. Within an expression, higher
		precedence operators will be evaluated first.
	</p>
	<table>
		<tbody>
			<tr>
				<th style="text-align: center; width: 20%;">Category</th>
				<th style="text-align: center;">Operator</th>
				<th style="text-align: center; width: 20%;">Associativity</th>
			</tr>
			<tr>
				<td>Postfix</td>
				<td>&gt;() [] . (dot operator)</td>
				<td>Left toright</td>
			</tr>
			<tr>
				<td>Unary</td>
				<td>&gt;++ - - ! ~</td>
				<td>Right to left</td>
			</tr>
			<tr>
				<td>Multiplicative</td>
				<td>&gt;* /</td>
				<td>Left to right</td>
			</tr>
			<tr>
				<td>Additive</td>
				<td>&gt;+ -</td>
				<td>Left to right</td>
			</tr>
			<tr>
				<td>Shift</td>
				<td>&gt;&gt;&gt; &gt;&gt;&gt; &lt;&lt;</td>
				<td>Left to right</td>
			</tr>
			<tr>
				<td>Relational</td>
				<td>&gt;&gt; &gt;= &lt; &lt;=</td>
				<td>Left to right</td>
			</tr>
			<tr>
				<td>Equality</td>
				<td>&gt;== !=</td>
				<td>Left to right</td>
			</tr>
			<tr>
				<td>Bitwise AND</td>
				<td>&gt;&amp;</td>
				<td>Left to right</td>
			</tr>
			<tr>
				<td>Bitwise XOR</td>
				<td>&gt;^</td>
				<td>Left to right</td>
			</tr>
			<tr>
				<td>Bitwise OR</td>
				<td>&gt;|</td>
				<td>Left to right</td>
			</tr>
			<tr>
				<td>Logical AND</td>
				<td>&gt;&amp;&amp;</td>
				<td>Left to right</td>
			</tr>
			<tr>
				<td>Logical OR</td>
				<td>&gt;||</td>
				<td>Left to right</td>
			</tr>
			<tr>
				<td>Conditional</td>
				<td>?:</td>
				<td>Right to left</td>
			</tr>
			<tr>
				<td>Assignment</td>
				<td>&gt;= += -= *= /= %= &gt;&gt;= &lt;&lt;= &amp;=
					^= |=</td>
				<td>Right to left</td>
			</tr>
		</tbody>
	</table>
	<h1>What is Next?</h1>
	<p>The next chapter will explain about loop control in
		Java programming. The chapter will describe various types
		of loops and how these loops can be used in Java program
		development and for what purposes they are being used.</p>
	<h1 class="subject">Java - Loop Control</h1>
	<p>
		There may be a situation when you need to execute a block
		of code several number of times. In general, statements
		are executed sequentially: The first statement in a
		function is executed first, followed by the second, and so
		on. <br> <br> Programming languages provide
		various control structures that allow for more complicated
		execution paths. <br> <br> A loop statement
		allows us to execute a statement or group of statements
		multiple times and following is the general form of a loop
		statement in most of the programming languages −
	</p>
	<img class="img" alt="Loop"
		src="/Java/img/loop_architecture.jpg">
	<p>Java programming language provides the following
		types of loop to handle looping requirements. Click the
		following links to check their detail.</p>
	<table>
		<tbody>
			<tr>
				<th>Sr.No.</th>
				<th style="text-align: center;">Loop &amp;
					Description</th>
			</tr>
			<tr>
				<td>1</td>
				<td><a href="#while_loop">while loop</a>
					<p>Repeats a statement or group of statements while
						a given condition is true. It tests the condition
						before executing the loop body.</p></td>
			</tr>
			<tr>
				<td>2</td>
				<td><a href="#for_loop">for loop</a>
					<p>Execute a sequence of statements multiple times
						and abbreviates the code that manages the loop
						variable.</p></td>
			</tr>
			<tr>
				<td>3</td>
				<td><a href="#do...while_loop">do...while loop</a>
					<p>Like a while statement, except that it tests the
						condition at the end of the loop body.</p></td>
			</tr>
		</tbody>
	</table>
	<h1>Loop Control Statements</h1>
	<p>
		Loop control statements change execution from its normal
		sequence. When execution leaves a scope, all automatic
		objects that were created in that scope are destroyed. <br>
		<br> Java supports the following control statements.
		Click the following links to check their detail.
	</p>
	<table>
		<tbody>
			<tr>
				<th>Sr.No.</th>
				<th style="text-align: center;">Control Statement
					&amp; Description</th>
			</tr>
			<tr>
				<td>1</td>
				<td><a href="#break_statement">break statement</a>
					<p>
						Terminates the <b>loop</b> or <b>switch</b> statement
						and transfers execution to the statement immediately
						following the loop or switch.
					</p></td>
			</tr>
			<tr>
				<td>2</td>
				<td><a href="#continue_statement">continue
						statement</a>
					<p>Causes the loop to skip the remainder of its
						body and immediately retest its condition prior to
						reiterating.</p></td>
			</tr>
		</tbody>
	</table>
	<h1 class="bookmark">Enhanced for loop in Java</h1>

	<p>As of Java 5, the enhanced for loop was introduced.
		This is mainly used to traverse collection of elements
		including arrays.</p>
	<h2>Syntax</h2>
	<p>Following is the syntax of enhanced for loop −</p>
	<pre class="code">
for(declaration : expression) {
   // Statements
}</pre>
	<ul>
		<li>Declaration − The newly declared block variable,
			is of a type compatible with the elements of the array
			you are accessing. The variable will be available within
			the for block and its value would be the same as the
			current array element.</li>
		<li>Expression − This evaluates to the array you need
			to loop through. The expression can be an array variable
			or method call that returns an array.</li>
	</ul>
	<h2>Example</h2>
	<pre class="code">
public class Test {

   public static void main(String args[]) {
      int [] numbers = {10, 20, 30, 40, 50};

      for(int x : numbers ) {
         System.out.print( x );
         System.out.print(",");
      }
      System.out.print("\n");
      String [] names = {"James", "Larry", "Tom", "Lacy"};

      for( String name : names ) {
         System.out.print( name );
         System.out.print(",");
      }
   }
}</pre>

	<p class="imp">practice012/Test1.java 에서 해당 프렉티스 진행한다.</p>
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class="code">
10, 20, 30, 40, 50,
James, Larry, Tom, Lacy,</pre>
	<h1>What is Next?</h1>
	<p>In the following chapter, we will be learning about
		decision making statements in Java programming.</p>
	<span id="while_loop"></span>
	<h1 class="subject sub">-while Loop in java</h1>
	<p>A while loop statement in Java programming language
		repeatedly executes a target statement as long as a given
		condition is true.</p>
	<h2>Syntax</h2>
	<p>The syntax of a while loop is −</p>
	<pre class="code">
while(Boolean_expression) {
   // Statements
}</pre>
	<p>
		Here, statement(s) may be a single statement or a block of
		statements. The condition may be any expression, and true
		is any non zero value. <br> <br> When executing,
		if the boolean_expression result is true, then the actions
		inside the loop will be executed. This will continue as
		long as the expression result is true. <br> <br>
		When the condition becomes false, program control passes
		to the line immediately following the loop.
	</p>
	<h1>Flow Diagram</h1>
	<img class="img" alt="" src="/java/img/java_while_loop.png">
	<p>Here, key point of the while loop is that the loop
		might not ever run. When the expression is tested and the
		result is false, the loop body will be skipped and the
		first statement after the while loop will be executed.</p>
	<pre class="code">
public class Test {

   public static void main(String args[]) {
      int x = 10;

      while( x &lt; 20 ) {
         System.out.print("value of x : " + x );
         x++;
         System.out.print("\n");
      }
   }
}</pre>
	<p class="imp">practice012/Test2.java 에서 해당 프렉티스 진행한다.</p>
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class="code">
value of x : 10
value of x : 11
value of x : 12
value of x : 13
value of x : 14
value of x : 15
value of x : 16
value of x : 17
value of x : 18
value of x : 19</pre>
	<span id="for_loop"></span>
	<h1 class="subject sub">-for loop in java</h1>
	<p>
		A for loop is a repetition control structure that allows
		you to efficiently write a loop that needs to be executed
		a specific number of times. <br> <br> A for loop
		is useful when you know how many times a task is to be
		repeated.
	</p>
	<h2>Syntax</h2>
	<p>The syntax of a for loop is −</p>
	<pre class="code">
for(initialization; Boolean_expression; update) {
   // Statements
}</pre>
	<p>Here is the flow of control in a for loop −</p>
	<ul>
		<li>The initialization step is executed first, and
			only once. This step allows you to declare and initialize
			any loop control variables and this step ends with a semi
			colon (;).</li>
		<li>Next, the Boolean expression is evaluated. If it
			is true, the body of the loop is executed. If it is
			false, the body of the loop will not be executed and
			control jumps to the next statement past the for loop.</li>
		<li>After the body of the for loop gets executed, the
			control jumps back up to the update statement. This
			statement allows you to update any loop control
			variables. This statement can be left blank with a
			semicolon at the end.</li>
		<li>The Boolean expression is now evaluated again. If
			it is true, the loop executes and the process repeats
			(body of loop, then update step, then Boolean
			expression). After the Boolean expression is false, the
			for loop terminates.</li>
	</ul>
	<h1>Flow Diagram</h1>
	<img class="img" src="java/img/java_for_loop.png">
	<h2>Example</h2>
	<p>Following is an example code of the for loop in
		Java.</p>
	<pre class="code">
public class Test {

   public static void main(String args[]) {

      for(int x = 10; x &lt; 20; x = x + 1) {
         System.out.print("value of x : " + x );
         System.out.print("\n");
      }
   }
}</pre>
	<p class="imp">practice012/Test3.java 에서 해당 프렉티스 실행</p>
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class="code">
value of x : 10
value of x : 11
value of x : 12
value of x : 13
value of x : 14
value of x : 15
value of x : 16
value of x : 17
value of x : 18
value of x : 19</pre>
	<span id="do...while_loop"></span>
	<h1 class="subject sub">-do while loop in java</h1>
	<p>A do...while loop is similar to a while loop, except
		that a do...while loop is guaranteed to execute at least
		one time.</p>
	<h2>Syntax</h2>
	<p>Following is the syntax of a do...while loop −</p>
	<pre class="code">
do {
   // Statements
}while(Boolean_expression);</pre>
	<p>
		Notice that the Boolean expression appears at the end of
		the loop, so the statements in the loop execute once
		before the Boolean is tested. <br> <br> If the
		Boolean expression is true, the control jumps back up to
		do statement, and the statements in the loop execute
		again. This process repeats until the Boolean expression
		is false.
	</p>
	<h1>Flow Diagram</h1>
	<img class="img" alt="do while loop"
		src="/java/img/java_do_while_loop.jpg">
	<h2>Example</h2>
	<pre class="code">
public class Test {

   public static void main(String args[]) {
      int x = 10;

      do {
         System.out.print("value of x : " + x );
         x++;
         System.out.print("\n");
      }while( x &lt; 20 );
   }
}</pre>
	<p class="imp">/practice012/Test4.java 에서 해당 프렉티스 진행한다.</p>
	<p>This will produce the following result −</p>

	<h2>Output</h2>
	<pre class="code">
value of x : 10
value of x : 11
value of x : 12
value of x : 13
value of x : 14
value of x : 15
value of x : 16
value of x : 17
value of x : 18
value of x : 19</pre>
	<span id="break_statement"></span>
	<h1 class="subject sub">-Break statement in java</h1>
	<p>The break statement in Java programming language has
		the following two usages −</p>
	<ul>
		<li>When the break statement is encountered inside a
			loop, the loop is immediately terminated and the program
			control resumes at the next statement following the loop.
		</li>
		<li>It can be used to terminate a case in the switch
			statement (covered in the next chapter).</li>
	</ul>
	<h2>Syntax</h2>
	<p>The syntax of a break is a single statement inside
		any loop −</p>

	<pre class="code">
break;
</pre>
	<h1>Flow Diagram</h1>
	<img class="img" alt="java_break"
		src="/java/img/java_break_statement.jpg">
	<h2>Example</h2>
	<pre class="code">
public class Test {

   public static void main(String args[]) {
      int [] numbers = {10, 20, 30, 40, 50};

      for(int x : numbers ) {
         if( x == 30 ) {
            break;
         }
         System.out.print( x );
         System.out.print("\n");
      }
   }
}</pre>
	<p class="imp">practice012/Test5.java 에서 해당 프렉티스 진행한다.</p>
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class="code">
10
20</pre>
	<span id="continue_statement"></span>
	<h1 class="subject sub">-Continue statement in java</h1>
	<p>The continue keyword can be used in any of the loop
		control structures. It causes the loop to immediately jump
		to the next iteration of the loop.</p>
	<ul>
		<li>In a for loop, the continue keyword causes
			control to immediately jump to the update statement.</li>
		<li>In a while loop or do/while loop, control
			immediately jumps to the Boolean expression.</li>
	</ul>
	<h2>Syntax</h2>
	<p>The syntax of a continue is a single statement
		inside any loop −</p>
	<pre class="code">
continue;</pre>
	<h1>Flow Diagram</h1>
	<img alt="continue" class="img"
		src="/java/img/java_continue_statement.jpg">
	<h2>Example</h2>
	<pre class="code">
public class Test {

   public static void main(String args[]) {
      int [] numbers = {10, 20, 30, 40, 50};

      for(int x : numbers ) {
         if( x == 30 ) {
            continue;
         }
         System.out.print( x );
         System.out.print("\n");
      }
   }
}</pre>
	<p class="imp">practice012/Test6.java 에서 해당 프렉티스 진행한다.</p>
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class="code">
10
20
40
50</pre>


	<h1 class="subject">Java - Decision Making</h1>
	<p>
		Decision making structures have one or more conditions to
		be evaluated or tested by the program, along with a
		statement or statements that are to be executed if the
		condition is determined to be true, and optionally, other
		statements to be executed if the condition is determined
		to be false. <br> <br> Following is the general
		form of a typical decision making structure found in most
		of the programming languages −
	</p>
	<img class="img" src="/java/img/java_decision_making.jpg">

	<p>Java programming language provides following types
		of decision making statements. Click the following links
		to check their detail.</p>
	<table>
		<tbody>
			<tr>
				<th>Sr.No.</th>
				<th style="text-align: center;">Statement &amp;
					Description</th>
			</tr>
			<tr>
				<td class="ts">1</td>
				<td><a href="#if_statement">if statement</a>
					<p>
						An <b>if statement</b> consists of a boolean
						expression followed by one or more statements.
					</p></td>
			</tr>
			<tr>
				<td class="ts">2</td>
				<td><a href="#if_else_statement">if...else
						statement</a>
					<p>
						An <b>if statement</b> can be followed by an optional
						<b>else statement</b>, which executes when the boolean
						expression is false.
					</p></td>
			</tr>
			<tr>
				<td class="ts">3</td>
				<td><a href="#nested_if_statements">nested if
						statement</a>
					<p>
						You can use one <b>if</b> or <b>else if</b> statement
						inside another <b>if</b> or <b>else if</b>
						statement(s).
					</p></td>
			</tr>
			<tr>
				<td class="ts">4</td>
				<td><a href="#switch_statement">switch
						statement</a>
					<p>
						A <b>switch</b> statement allows a variable to be
						tested for equality against a list of values.
					</p></td>
			</tr>
		</tbody>
	</table>
	<h1>The ? : Operator</h1>
	<p>
		We have covered <span class="code">conditional
			operator ? :</span> in the previous chapter which can be used to
		replace <span class="code">if...else</span> statements. It
		has the following general form −
	</p>
	<pre class="code">
Exp1 ? Exp2 : Exp3;</pre>
	<p>
		Where Exp1, Exp2, and Exp3 are expressions. Notice the use
		and placement of the colon. <br> <br> To
		determine the value of the whole expression, initially
		exp1 is evaluated.
	</p>
	<ul>

		<li>If the value of exp1 is true, then the value of
			Exp2 will be the value of the whole expression.</li>
		<li>If the value of exp1 is false, then Exp3 is
			evaluated and its value becomes the value of the entire
			expression.</li>
	</ul>
	<h1>What is Next?</h1>
	<p>
		In the next chapter, we will discuss about Number class
		(in the java.lang package) and its subclasses in Java
		Language. <br> <br> We will be looking into some
		of the situations where you will use instantiations of
		these classes rather than the primitive data types, as
		well as classes such as formatting, mathematical functions
		that you need to know about when working with Numbers.
	</p>

	<span id="if_statement"></span>
	<h1 class="subject sub">-if statement in java</h1>
	<p>An if statement consists of a Boolean expression
		followed by one or more statements.</p>
	<h2>Syntax</h2>
	<p>Following is the syntax of an if statement −</p>
	<pre class="code">
if(Boolean_expression) {
   // Statements will execute if the Boolean expression is true
}</pre>
	<p>If the Boolean expression evaluates to true then the
		block of code inside the if statement will be executed. If
		not, the first set of code after the end of the if
		statement (after the closing curly brace) will be
		executed.</p>
	<h1>Flow Diagram</h1>
	<img class="img" src="/java/img/java_if_statement.jpg">
	<h2>Example</h2>
	<pre class="code">
public class Test {

   public static void main(String args[]) {
      int x = 10;

      if( x &lt; 20 ) {
         System.out.print("This is if statement");
      }
   }
}</pre>
	<p class="imp">practice013/Test1.java 에서 해당 프렉티스 진행한다.</p>
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class="code">
This is if statement.</pre>
	<span id="if_else_statement"></span>
	<h1 class="subject sub">-if-else statement in java</h1>
	<p>
		An <span class="code">if</span> statement can be followed
		by an optional <span class="code">else</span> statement,
		which executes when the Boolean expression is false.
	</p>
	<h2>Syntax</h2>
	<p>Following is the syntax of an if...else statement −</p>
	<pre class="code">
if(Boolean_expression) {
   // Executes when the Boolean expression is true
}else {
   // Executes when the Boolean expression is false
}</pre>
	<p>If the boolean expression evaluates to true, then
		the if block of code will be executed, otherwise else
		block of code will be executed.</p>
	<h1>Flow Diagram</h1>
	<img alt="if_else" class="img"
		src="/java/img/java_if_else_statement.jpg">
	<h2>Example</h2>
	<pre class="code">
public class Test {

   public static void main(String args[]) {
      int x = 30;

      if( x &lt; 20 ) {
         System.out.print("This is if statement");
      }else {
         System.out.print("This is else statement");
      }
   }
}</pre>
	<p class="imp">practice013/Test2.java 에서 해당 프렉티스 진행한다.</p>
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class="code">
This is else statement</pre>
	<h1>The if...else if...else Statement</h1>
	<p>
		An if statement can be followed by an optional else
		if...else statement, which is very useful to test various
		conditions using single if...else if statement. <br>
		<br> When using if, else if, else statements there
		are a few points to keep in mind.
	</p>
	<ul>
		<li>An if can have zero or one else's and it must
			come after any else if's.</li>
		<li>An if can have zero to many else if's and they
			must come before the else.</li>
		<li>Once an else if succeeds, none of the remaining
			else if's or else's will be tested.</li>
	</ul>
	<h2>Syntax</h2>
	<p>Following is the syntax of an if...else statement −</p>
	<pre class="code">
if(Boolean_expression 1) {
   // Executes when the Boolean expression 1 is true
}else if(Boolean_expression 2) {
   // Executes when the Boolean expression 2 is true
}else if(Boolean_expression 3) {
   // Executes when the Boolean expression 3 is true
}else {
   // Executes when the none of the above condition is true.
}</pre>
	<h2>Example</h2>
	<pre class="code">
public class Test {

   public static void main(String args[]) {
      int x = 30;

      if( x == 10 ) {
         System.out.print("Value of X is 10");
      }else if( x == 20 ) {
         System.out.print("Value of X is 20");
      }else if( x == 30 ) {
         System.out.print("Value of X is 30");
      }else {
         System.out.print("This is else statement");
      }
   }
}</pre>
	<p class="imp">/practice013/Test3.java 에서 해당 프렉티스 진행한다.</p>
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class='code'>
Value of X is 30</pre>
	<span id="nested_if_statements"></span>
	<h1 class="subject sub">-nested if statement in java</h1>
	<p>It is always legal to nest if-else statements which
		means you can use one if or else if statement inside
		another if or else if statement.</p>
	<h2>Syntax</h2>
	<p>The syntax for a nested if...else is as follows −</p>
	<pre class="code">
if(Boolean_expression 1) {
   // Executes when the Boolean expression 1 is true
   if(Boolean_expression 2) {
      // Executes when the Boolean expression 2 is true
   }
}</pre>
	<p>
		You can nest <span class="code">else if...else</span> in
		the similar way as we have nested if statement.
	</p>
	<h2>Example</h2>
	<pre class='code'>
public class Test {

   public static void main(String args[]) {
      int x = 30;
      int y = 10;

      if( x == 30 ) {
         if( y == 10 ) {
            System.out.print("X = 30 and Y = 10");
         }
      }
   }
}</pre>
	<p class="imp">/practice013/Test4.java 에서 해당 프렉티스 진행한다.</p>
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class="code">
X = 30 and Y = 10</pre>

	<span id="switch_statement"></span>
	<h1 class="subject sub">-switch statement in java</h1>
	<p>A switch statement allows a variable to be tested
		for equality against a list of values. Each value is
		called a case, and the variable being switched on is
		checked for each case.</p>
	<h1>Syntax</h1>
	<p>The syntax of enhanced for loop is −</p>
	<pre class="code">
switch(expression) {
   case value :
      // Statements
      break; // optional
   
   case value :
      // Statements
      break; // optional
   
   // You can have any number of case statements.
   default : // Optional
      // Statements
}</pre>
	<p>The following rules apply to a switch statement −</p>
	<ul>
		<li>The variable used in a switch statement can only
			be integers, convertable integers (byte, short, char),
			strings and enums.</li>
		<li>You can have any number of case statements within
			a switch. Each case is followed by the value to be
			compared to and a colon.</li>
		<li>The value for a case must be the same data type
			as the variable in the switch and it must be a constant
			or a literal.</li>
		<li>When the variable being switched on is equal to a
			case, the statements following that case will execute
			until a break statement is reached.</li>
		<li>When a break statement is reached, the switch
			terminates, and the flow of control jumps to the next
			line following the switch statement.</li>
		<li>Not every case needs to contain a break. If no
			break appears, the flow of control will fall through to
			subsequent cases until a break is reached.</li>
		<li>A switch statement can have an optional default
			case, which must appear at the end of the switch. The
			default case can be used for performing a task when none
			of the cases is true. No break is needed in the default
			case.</li>
	</ul>
	<h1>Flow Diagram</h1>
	<img class="img" src="/java/img/java_switch_statement.jpg">
	<h2>Example</h2>
	<pre class="code">
public class Test {

   public static void main(String args[]) {
      // char grade = args[0].charAt(0);
      char grade = 'C';

      switch(grade) {
         case 'A' :
            System.out.println("Excellent!"); 
            break;
         case 'B' :
         case 'C' :
            System.out.println("Well done");
            break;
         case 'D' :
            System.out.println("You passed");
         case 'F' :
            System.out.println("Better try again");
            break;
         default :
            System.out.println("Invalid grade");
      }
      System.out.println("Your grade is " + grade);
   }
}</pre>
	<p class="imp">/pratice013/Test5.java 에서 해당 프렉티스 진행한다.</p>
	<p>Compile and run the above program using various
		command line arguments. This will produce the following
		result −</p>
	<h2>Output</h2>
	<pre class="code">
Well done
Your grade is C</pre>













	<h1 class="subject">Java - Numbers Class</h1>
	<p>Normally, when we work with Numbers, we use
		primitive data types such as byte, int, long, double, etc.</p>
	<h2>Example</h2>
	<p>
		However, in development, we come across situations where
		we need to use objects instead of <span class="code">primitive
			data types</span>. In order to achieve this, Java provides <span
			class="imp">wrapper classes.</span> <br> <br>All
		the wrapper classes (Integer, Long, Byte, Double, Float,
		Short) are subclasses of the abstract class Number.
	</p>
	<img class="img" src="/java/img/java_number_classes.jpg">
	<p>
		The object of the wrapper class contains or wraps its
		respective primitive data type. Converting primitive data
		types into object is called <span class="imp">boxing</span>,
		and this is taken care by the compiler. Therefore, while
		using a wrapper class you just need to pass the value of
		the primitive data type to the constructor of the Wrapper
		class. <br> <br> And the Wrapper object will be
		converted back to a primitive data type, and this process
		is called unboxing. The <span class="imp">Number</span>
		class is part of the java.lang package. <br> <br>
		Following is an example of boxing and unboxing −
	</p>
	<h2>Example</h2>
	<pre class="code">
public class Test {

   public static void main(String args[]) {
      Integer x = 5; // boxes int to an Integer object
      x =  x + 10;   // unboxes the Integer to a int
      System.out.println(x); 
   }
}</pre>
	<p class="imp">/practice014/Test1.java 에서 해당 프렉티스 진행한다.</p>
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class='code'>
15</pre>
	<p>When x is assigned an integer value, the compiler
		boxes the integer because x is integer object. Later, x is
		unboxed so that they can be added as an integer.</p>
	<h2>Number Methods</h2>
	<p>Following is the list of the instance methods that
		all the subclasses of the Number class implements −</p>
	<table>
		<tbody>
			<tr>
				<th>Sr.No.</th>
				<th>Method &amp; Description</th>
			</tr>
			<tr>
				<td class="ts">1</td>
				<td><a href="#number_1">xxxValue()</a>
					<p>
						Converts the value of <i>this</i> Number object to the
						xxx data type and returns it.
					</p></td>
			</tr>
			<tr>
				<td class="ts">2</td>
				<td><a href="#number_2">compareTo()</a>
					<p>
						Compares <i>this</i> Number object to the argument.
					</p></td>
			</tr>
			<tr>
				<td class="ts">3</td>
				<td><a href="#number_3">equals()</a>
					<p>
						Determines whether <i>this</i> number object is equal
						to the argument.
					</p></td>
			</tr>
			<tr>
				<td class="ts">4</td>
				<td><a href="#number_4">valueOf()</a>
					<p>Returns an Integer object holding the value of
						the specified primitive.</p></td>
			</tr>
			<tr>
				<td class="ts">5</td>
				<td><a href="#number_5">toString()</a>
					<p>Returns a String object representing the value
						of a specified int or Integer.</p></td>
			</tr>
			<tr>
				<td class="ts">6</td>
				<td><a href="#number_6">parseInt()</a>
					<p>This method is used to get the primitive data
						type of a certain String.</p></td>
			</tr>
			<tr>
				<td class="ts">7</td>
				<td><a href="#number_7">abs()</a>
					<p>Returns the absolute value of the argument.</p></td>
			</tr>
			<tr>
				<td class="ts">8</td>
				<td><a href="#number_8">ceil()</a>
					<p>Returns the smallest integer that is greater
						than or equal to the argument. Returned as a double.</p></td>
			</tr>
			<tr>
				<td class="ts">9</td>
				<td><a href="#number_9">floor()</a>
					<p>Returns the largest integer that is less than or
						equal to the argument. Returned as a double.</p></td>
			</tr>
			<tr>
				<td class="ts">10</td>
				<td><a href="#number_10">rint()</a>
					<p>Returns the integer that is closest in value to
						the argument. Returned as a double.</p></td>
			</tr>
			<tr>
				<td class="ts">11</td>
				<td><a href="#number_11">round()</a>
					<p>Returns the closest long or int, as indicated by
						the method's return type to the argument.</p></td>
			</tr>
			<tr>
				<td class="ts">12</td>
				<td><a href="#number_12">min()</a>
					<p>Returns the smaller of the two arguments.</p></td>
			</tr>
			<tr>
				<td class="ts">13</td>
				<td><a href="#number_13">max()</a>
					<p>Returns the larger of the two arguments.</p></td>
			</tr>
			<tr>
				<td class="ts">14</td>
				<td><a href="#number_14">exp()</a>
					<p>Returns the base of the natural logarithms, e,
						to the power of the argument.</p></td>
			</tr>
			<tr>
				<td class="ts">15</td>
				<td><a href="#number_15">log()</a>
					<p>Returns the natural logarithm of the argument.</p></td>
			</tr>
			<tr>
				<td class="ts">16</td>
				<td><a href="#number_16">pow()</a>
					<p>Returns the value of the first argument raised
						to the power of the second argument.</p></td>
			</tr>
			<tr>
				<td class="ts">17</td>
				<td><a href="#number_17">sqrt()</a>
					<p>Returns the square root of the argument.</p></td>
			</tr>
			<tr>
				<td class="ts">18</td>
				<td><a href="#number_18">sin()</a>
					<p>Returns the sine of the specified double value.</p>
				</td>
			</tr>
			<tr>
				<td class="ts">19</td>
				<td><a href="#number_19">cos()</a>
					<p>Returns the cosine of the specified double
						value.</p></td>
			</tr>
			<tr>
				<td class="ts">20</td>
				<td><a href="#number_20">tan()</a>
					<p>Returns the tangent of the specified double
						value.</p></td>
			</tr>
			<tr>
				<td class="ts">21</td>
				<td><a href="#number_21">asin()</a>
					<p>Returns the arcsine of the specified double
						value.</p></td>
			</tr>
			<tr>
				<td class="ts">22</td>
				<td><a href="#number_22">acos()</a>
					<p>Returns the arccosine of the specified double
						value.</p></td>
			</tr>
			<tr>
				<td class="ts">23</td>
				<td><a href="#number_23">atan()</a>
					<p>Returns the arctangent of the specified double
						value.</p></td>
			</tr>
			<tr>
				<td class="ts">24</td>
				<td><a href="#number_24">atan2()</a>
					<p>Converts rectangular coordinates (x, y) to polar
						coordinate (r, theta) and returns theta.</p></td>
			</tr>
			<tr>
				<td class="ts">25</td>
				<td><a href="#number_25">toDegrees()</a>
					<p>Converts the argument to degrees.</p></td>
			</tr>
			<tr>
				<td class="ts">26</td>
				<td><a href="#number_26">toRadians()</a>
					<p>Converts the argument to radians.</p></td>
			</tr>
			<tr>
				<td class="ts">27</td>
				<td><a href="#number_27">random()</a>
					<p>Returns a random number.</p></td>
			</tr>
		</tbody>
	</table>
	<h1>What is Next?</h1>
	<p>In the next section, we will be going through the
		Character class in Java. You will be learning how to use
		object Characters and primitive data type char in Java.</p>

	<span id="number_1"></span>
	<h1 class="subject sub">-Java - xxxValue() Method</h1>
	<h1>Description</h1>
	<p>The method converts the value of the Number Object
		that invokes the method to the primitive data type that is
		returned from the method.</p>
	<h1>Syntax</h1>
	<p>Here is a separate method for each primitive data
		type −</p>
	<pre class="code">
byte byteValue()
short shortValue()
int intValue()
long longValue()
float floatValue()
double doubleValue()</pre>
	<h1>Parameters</h1>
	<p>Here is the detail of parameters −</p>
	<ul>
		<li>All these are default methods and accepts no
			parameter.</li>
	</ul>
	<h1>Return Value</h1>
	<ul>
		<li>This method returns the primitive data type that
			is given in the signature.</li>
	</ul>
	<h2>Example</h2>
	<pre class="code">
public class Test { 

   public static void main(String args[]) {
      Integer x = 5;
      
      // Returns byte primitive data type
      System.out.println( x.byteValue() );

      // Returns double primitive data type
      System.out.println(x.doubleValue());

      // Returns long primitive data type
      System.out.println( x.longValue() );      
   }
}</pre>
	<p class="imp">/practice014/Test2.java 에서 해당 프렉티스 진행한다.</p>
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class="code">
5
5.0
5</pre>




	<span id="number_2"></span>
	<h1 class="subject sub">Java - compareTo() Method</h1>
	<h1>Description</h1>
	<p>
		The method compares the Number object that invoked the
		method to the argument. It is possible to compare Byte,
		Long, Integer, etc. <br> <br> However, two
		different types cannot be compared, both the argument and
		the Number object invoking the method should be of the
		same type.
	</p>
	<h1>Syntax</h1>
	<pre class='code'>
public int compareTo( NumberSubClass referenceName )</pre>
	<h1>Parameters</h1>
	<p>Here is the detail of parameters −</p>
	<ul>
		<li>referenceName − This could be a Byte, Double,
			Integer, Float, Long, or Short.</li>
	</ul>
	<h1>Return Value</h1>
	<ul>
		<li>If the Integer is equal to the argument then 0 is
			returned.</li>
		<li>If the Integer is less than the argument then -1
			is returned.</li>
		<li>If the Integer is greater than the argument then
			1 is returned.</li>
	</ul>
	<h2>Example</h2>
	<pre class='code'>
public class Test { 

   public static void main(String args[]) {
      Integer x = 5;
      
      System.out.println(x.compareTo(3));
      System.out.println(x.compareTo(5));
      System.out.println(x.compareTo(8));            
   }
}</pre>
	<p class="imp">/practice014/Test3.java 에서 해당 프렉티스 진행한다.</p>
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class="code">
1
0
-1</pre>




	<span id="number_3"></span>
	<h1 class="subject sub">-Java - equals() Method</h1>
	<h1>Description</h1>
	<p>The method determines whether the Number object that
		invokes the method is equal to the object that is passed
		as an argument.</p>
	<h1>Syntax</h1>
	<pre class="code">
public boolean equals(Object o)</pre>
	<h1>Parameters</h1>
	<p>Here is the detail of parameters −</p>
	<ul>
		<li>Any object.</li>
	</ul>
	<h1>Return Value</h1>
	<ul>
		<li>The method returns True if the argument is not
			null and is an object of the same type and with the same
			numeric value. There are some extra requirements for
			Double and Float objects that are described in the Java
			API documentation.</li>
	</ul>
	<h2>Example</h2>
	<pre class="code">
public class Test { 

   public static void main(String args[]) {
      Integer x = 5;
      Integer y = 10;
      Integer z =5;
      Short a = 5;

      System.out.println(x.equals(y));  
      System.out.println(x.equals(z)); 
      System.out.println(x.equals(a));
   }
}</pre>
	<p class='imp'>/practice014/Test4.java 에서 해당 프렉티스 진행한다.</p>
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class='code'>
false
true
false</pre>

	<span id="number_4"></span>
	<h1 class="subject sub">-Java - valueOf() Method</h1>
	<h1>Description</h1>
	<p>
		The valueOf method returns the relevant Number Object
		holding the value of the argument passed. The argument can
		be a primitive data type, String, etc. <br> <br>
		This method is a static method. The method can take two
		arguments, where one is a String and the other is a radix.
	</p>
	<h1>Syntax</h1>
	<p>Following are all the variants of this method −</p>
	<pre class="code">
static Integer valueOf(int i)
static Integer valueOf(String s)
static Integer valueOf(String s, int radix)</pre>
	<h1>Parameters</h1>
	<p>Here is the detail of parameters −</p>
	<ul>
		<li>i − An int for which Integer representation would
			be returned.</li>
		<li>s − A String for which Integer representation
			would be returned.</li>
		<li>radix − This would be used to decide the value of
			returned Integer based on the passed String.</li>
	</ul>
	<h1>Return Value</h1>
	<ul>
		<li>valueOf(int i) − This returns an Integer object
			holding the value of the specified primitive.</li>
		<li>valueOf(String s) − This returns an Integer
			object holding the value of the specified string
			representation.</li>
		<li>valueOf(String s, int radix) − This returns an
			Integer object holding the integer value of the specified
			string representation, parsed with the value of radix. <span
			class="code">raidx</span>는 즉 진수를 의미한다. 16은 16진수이다. 즉, <span
			class="code">Integer.valueof("444",16)</span> 이면 <span
			class="code">(444)_16</span> 이라는 뜻이다.
		</li>
	</ul>
	<h2>Example</h2>
	<pre class="code">
public class Test { 

   public static void main(String args[]) {
      Integer x =Integer.valueOf(9);
      Double c = Double.valueOf(5);
      Float a = Float.valueOf("80");               
      Integer b = Integer.valueOf("444",16);

      System.out.println(x); 
      System.out.println(c);
      System.out.println(a);
      System.out.println(b);
   }
}</pre>
	<p class="imp">/pratice014/Test5.java 에서 해당 프렉티스 진행한다.</p>
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class="code">
9
5.0
80.0
1092</pre>

	<span id="number_5"></span>
	<h1 class="subject sub">-Java - toString() Method</h1>
	<h1>Description</h1>
	<p>
		The method is used to get a String object representing the
		value of the Number Object. <br> <br> If the
		method takes a primitive data type as an argument, then
		the String object representing the primitive data type
		value is returned. <br> <br> If the method takes
		two arguments, then a String representation of the first
		argument in the radix specified by the second argument
		will be returned.
	</p>
	<h1>Syntax</h1>
	<p>Following are all the variants of this method −</p>
	<pre class="code">
String toString()
static String toString(int i)</pre>
	<h1>Parameters</h1>
	<p>Here is the detail of parameters −</p>
	<ul>
		<li>i − An int for which string representation would
			be returned.</li>
	</ul>
	<h1>Return Value</h1>
	<ul>
		<li>toString() − This returns a String object
			representing the value of this Integer.</li>
		<li>toString(int i) − This returns a String object
			representing the specified integer.</li>
	</ul>
	<h2>Example</h2>
	<pre class="code">
public class Test { 

   public static void main(String args[]) {
      Integer x = 5;

      System.out.println(x.toString());  
      System.out.println(Integer.toString(12)); 
   }
}</pre>
	<p class="imp">/pratice014/Test6.java 에서 해당 프렉티스 진행한다.</p>
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class='code'>
5
12</pre>


	<span id="number_6"></span>
	<h1 class="subject sub">Java - parseInt() Method</h1>
	<h1>Description</h1>
	<p>This method is used to get the primitive data type
		of a certain String. parseXxx() is a static method and can
		have one argument or two.</p>
	<h1>Syntax</h1>
	<p>Following are all the variants of this method −</p>
	<pre class="code">
static int parseInt(String s)
static int parseInt(String s, int radix)</pre>
	<h1>Parameters</h1>
	<p>Here is the detail of parameters −</p>
	<ul>
		<li>s − This is a string representation of decimal.</li>
		<li>radix − This would be used to convert String s
			into integer.</li>
	</ul>
	<h1>Return Value</h1>
	<ul>
		<li>parseInt(String s) − This returns an integer
			(decimal only).</li>
		<li>parseInt(int i) − This returns an integer, given
			a string representation of decimal, binary, octal, or
			hexadecimal (radix equals 10, 2, 8, or 16 respectively)
			numbers as input.</li>
	</ul>
	<h2>Example</h2>
	<pre class='code'>
public class Test { 

   public static void main(String args[]) {
      int x =Integer.parseInt("9");
      double c = Double.parseDouble("5");
      int b = Integer.parseInt("444",16);

      System.out.println(x);
      System.out.println(c);
      System.out.println(b);
   }
}</pre>
	<p class="imp">/practice014/Test7.java에서 해당 프렉티스 진행한다.</p>
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class="code">
9
5.0
1092</pre>


	<span id="number_7"></span>
	<h1 class="subject sub">Java - abs() Method</h1>
	<h1>Description</h1>
	<p>The method gives the absolute value of the argument.
		The argument can be int, float, long, double, short, byte.</p>
	<h1>Syntax</h1>
	<p>Following are all the variants of this method −</p>
	<pre class="code">
double abs(double d)
float abs(float f)
int abs(int i)
long abs(long lng)</pre>
	<h1>Parameters</h1>
	<p>Here is the detail of parameters −</p>
	<ul>
		<li>Any primitive data type.</li>
	</ul>
	<h1>Return Value</h1>
	<ul>
		<li>This method Returns the absolute value of the
			argument.</li>
	</ul>
	<h2>Example</h2>
	<pre class="code">
public class Test { 

   public static void main(String args[]) {
      Integer a = -8;
      double d = -100;
      float f = -90;

      System.out.println(Math.abs(a));
      System.out.println(Math.abs(d));     
      System.out.println(Math.abs(f));    
   }
}</pre>
	<p class="imp">/pratice014/Test8.java에서 해당 프렉티스 진행한다.</p>
	<p>This will produce the following result −</p>
	<h1>Output</h1>
	<pre class="code">
8
100.0
90.0</pre>

	<span id="number_8"></span>
	<h1 class="subject sub">Java - ceil() Method</h1>
	<h1>Description</h1>
	<p>The method ceil gives the smallest integer that is
		greater than or equal to the argument.</p>
	<h1>Syntax</h1>
	<p>This method has the following variants −</p>
	<pre class='code'>
double ceil(double d)
double ceil(float f)</pre>
	<h1>Parameters</h1>
	<p>Here is the detail of parameters −</p>
	<ul>
		<li>A double or float primitive data type.</li>
	</ul>
	<h1>Return Value</h1>
	<ul>
		<li>This method returns the smallest integer that is
			greater than or equal to the argument. Returned as a
			double.</li>
	</ul>
	<h2>Example</h2>
	<pre class="code">
public class Test { 

   public static void main(String args[]) {
      double d = -100.675;
      float f = -90;    

      System.out.println(Math.ceil(d));
      System.out.println(Math.ceil(f)); 

      System.out.println(Math.floor(d));
      System.out.println(Math.floor(f)); 
   }
}</pre>
	<p class="imp">/pratice014/Test9.java 에서 해당 프렉티스 진행한다.</p>
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class="code">
-100.0
-90.0
-101.0
-90.0</pre>
	<span id="number_9"></span>
	<h1 class="subject sub">Java - floor() Method</h1>
	<h1>Description</h1>
	<p>The method floor gives the largest integer that is
		less than or equal to the argument.</p>
	<h1>Syntax</h1>
	<p>This method has the following variants −</p>
	<pre class="code">
double floor(double d)
double floor(float f)</pre>
	<h1>Parameters</h1>
	<p>Here is the detail of parameters −</p>
	<ul>
		<li>A double or float primitive data type.</li>
	</ul>
	<h1>Return Value</h1>
	<ul>
		<li>This method returns the largest integer that is
			less than or equal to the argument. Returned as a double.</li>
	</ul>
	<h2>Example</h2>
	<pre class="code">
public class Test { 

   public static void main(String args[]) {
      double d = -100.675;
      float f = -90;

      System.out.println(Math.floor(d));
      System.out.println(Math.floor(f)); 

      System.out.println(Math.ceil(d));
      System.out.println(Math.ceil(f));
   }
}</pre>
	<p class="imp">practice014/Test10.java에서 해당 프렉티스 진행한다.</p>
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class="code">
-101.0
-90.0
-100.0
-90.0</pre>
	<span id="number_10"></span>
	<h1 class="subject sub">Java - rint() Method</h1>
	<h1>Description</h1>
	<p>The method rint returns the integer that is closest
		in value to the argument.</p>
	<h1>Syntax</h1>
	<pre class="code">
double rint(double d)</pre>
	<h1>Parameters</h1>
	<p>Here is the detail of parameters −</p>
	<ul>
		<li>d − it accepts a double value as parameter.</li>
	</ul>
	<h1>Return Value</h1>
	<ul>
		<li>This method returns the integer that is closest
			in value to the argument. Returned as a double.</li>
	</ul>
	<h2>Example</h2>
	<pre class="code">
public class Test {

   public static void main(String args[]) {
      double d = 100.675;
      double e = 100.500;
      double f = 100.200;

      System.out.println(Math.rint(d));
      System.out.println(Math.rint(e)); 
      System.out.println(Math.rint(f)); 
   }
}</pre>
	<p class="imp">/pratice014/Test11.java에서 해당 프렉티스 진행한다.</p>
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class="code">
101.0
100.0
100.0</pre>
	<span id="number_11"></span>
	<h1 class="subject sub">Java - round() Method</h1>
	<h1>Description</h1>
	<p>The method round returns the closest long or int, as
		given by the methods return type.</p>
	<h1>Syntax</h1>
	<p>This method has the following variants −</p>
	<pre class="code">
long round(double d)
int round(float f)</pre>
	<h1>Parameters</h1>
	<p>Here is the detail of parameters −</p>
	<ul>
		<li>d − A double or float primitive data type.</li>
		<li>f − A float primitive data type.</li>
	</ul>
	<h1>Return Value</h1>
	<ul>
		<li>This method returns the closest long or int, as
			indicated by the method's return type, to the argument.</li>
	</ul>
	<h2>Example</h2>
	<pre class='code'>
public class Test { 

   public static void main(String args[]) {
      double d = 100.675;
      double e = 100.500;
      float f = 100;
      float g = 90f;

      System.out.println(Math.round(d));
      System.out.println(Math.round(e)); 
      System.out.println(Math.round(f)); 
      System.out.println(Math.round(g)); 
   }
}</pre>
	<p class="imp">/practice014/Test12.java에서 해당 프렉티스 진행한다.</p>
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class="code">
101
101
100
90</pre>
	<span id="number_12"></span>

	<h1 class="subject sub">Java - min() Method</h1>
	<h1>Description</h1>
	<p>The method gives the smaller of the two arguments.
		The argument can be int, float, long, double.</p>
	<h1>Syntax</h1>
	<p>This method has the following variants −</p>
	<pre class="code">
double min(double arg1, double arg2)
float min(float arg1, float arg2)
int min(int arg1, int arg2)
long min(long arg1, long arg2)</pre>
	<h1>Parameters</h1>
	<p>Here is the detail of parameters −</p>
	<ul>
		<li>This method accepts any primitive data type as a
			parameter.</li>
	</ul>
	<h1>Return Value</h1>
	<ul>
		<li>This method returns the smaller of the two
			arguments.</li>
	</ul>
	<h1>Example</h1>
	<pre class="code">
public class Test {

   public static void main(String args[]) {
      System.out.println(Math.min(12.123, 12.456));      
      System.out.println(Math.min(23.12, 23.0));  
   }
}</pre>
	<p class="imp">/practice014/Test13.java 에서 해당 프렉티스
		진행한다.</p>
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class="code">
12.123
23.0</pre>
	<span id="number_13"></span>
	<h1 class="subject sub">Java - max() Method</h1>
	<h1>Description</h1>
	<p>This method gives the maximum of the two arguments.
		The argument can be int, float, long, double.</p>
	<h1>Syntax</h1>
	<p>This method has the following variants −</p>
	<pre class="code">
double max(double arg1, double arg2)
float max(float arg1, float arg2)
int max(int arg1, int arg2)
long max(long arg1, long arg2)</pre>
	<h1>Parameters</h1>
	<p>Here is the detail of parameters −</p>
	<ul>
		<li>This method accepts any primitive data type as a
			parameter.</li>
	</ul>
	<h1>Return Value</h1>
	<ul>
		<li>This method returns the maximum of the two
			arguments.</li>
	</ul>
	<h2>Example</h2>
	<pre class="code">
public class Test { 

   public static void main(String args[]) {
      System.out.println(Math.max(12.123, 12.456));      
      System.out.println(Math.max(23.12, 23.0));  
   }
}</pre>
	<p class="imp">/practice014/Test14.java 에서 해당 프렉티스
		진행한다.</p>
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class="code">
12.456
23.12</pre>
	<span id="number_14"></span>
	<h1 class="subject sub">Java - exp() Method</h1>
	<h1>Description</h1>
	<p>The method returns the base of the natural
		logarithms, e, to the power of the argument.</p>
	<h1>Syntax</h1>
	<pre class="code">
double exp(double d)</pre>
	<h1>Parameters</h1>
	<p>Here is the detail of parameters −</p>
	<ul>
		<li>d − Any primitive data type.</li>
	</ul>
	<h1>Return Value</h1>
	<ul>
		<li>This method returns the base of the natural
			logarithms, e, to the power of the argument.</li>
	</ul>
	<h2>Example</h2>
	<pre class="code">
public class Test { 

   public static void main(String args[]) {
      double x = 11.635;
      double y = 2.76;

      System.out.printf("The value of e is %.4f%n", Math.E);
      System.out.printf("exp(%.3f) is %.3f%n", x, Math.exp(x));  
   }
}</pre>
	<p class="imp">/practice014/Test15.java에서 해당 프렉티스 진행한다.</p>
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class="code">
The value of e is 2.7183
exp(11.635) is 112983.831</pre>

	<span id="number_15"></span>
	<h1 class="subject sub">Java - log() Method</h1>

	<h1>Description</h1>
	<p>The method returns the natural logarithm of the
		argument.</p>
	<h1>Syntax</h1>
	<pre class="code">
double log(double d)</pre>
	<h1>Parameters</h1>
	<p>Here is the detail of parameters −</p>
	<ul>
		<li>d − Any primitive data type.</li>
	</ul>
	<h1>Return Value</h1>
	<ul>
		<li>This method returns the natural logarithm of the
			argument.</li>
	</ul>
	<h2>Example</h2>
	<pre class="code">
public class Test { 

   public static void main(String args[]) {
      double x = 11.635;
      double y = 2.76;

      System.out.printf("The value of e is %.4f%n", Math.E);
      System.out.printf("log(%.3f) is %.3f%n", x, Math.log(x));
   }
}</pre>
	<p class="imp">pratice014/Test16.java 에서 해당 프렉티스 진행한다.</p>
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class="code">
The value of e is 2.7183
log(11.635) is 2.454</pre>
	<span id="number_16"></span>
	<h1 class="subject sub">Java - pow() Method</h1>
	<h1>Description</h1>
	<p>The method returns the value of the first argument
		raised to the power of the second argument.</p>
	<h1>Syntax</h1>
	<pre class="code">
double pow(double base, double exponent)</pre>
	<h1>Parameters</h1>
	<p>Here is the detail of parameters −</p>
	<ul>
		<li>base − Any primitive data type.</li>
		<li>exponenet − Any primitive data type.</li>
	</ul>
	<h1>Return Value</h1>
	<ul>
		<li>This method returns the value of the first
			argument raised to the power of the second argument.</li>
	</ul>
	<h2>Example</h2>
	<pre class="code">
public class Test { 

   public static void main(String args[]) {
      double x = 11.635;
      double y = 2.76;

      System.out.printf("The value of e is %.4f%n", Math.E);
      System.out.printf("pow(%.3f, %.3f) is %.3f%n", x, y, Math.pow(x, y));
   }
}</pre>
	<p class="imp">/practice014/Test17.java 에서 해당 프렉티스
		진행한다.</p>
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class="code">
The value of e is 2.7183
pow(11.635, 2.760) is 874.008</pre>
	<span id="number_17"></span>
	<h1 class="subject sub">Java - sqrt() Method</h1>
	<h1>Description</h1>
	<p>The method returns the square root of the argument.</p>
	<h1>Syntax</h1>
	<pre class="code">
double sqrt(double d)</pre>
	<h1>Parameters</h1>
	<p>Here is the detail of parameters −</p>
	<ul>
		<li>d − Any primitive data type.</li>
	</ul>
	<h1>Return Value</h1>
	<ul>
		<li>This method returns the square root of the
			argument.</li>
	</ul>
	<h2>Example</h2>
	<pre class="code">
public class Test { 

   public static void main(String args[]) {
      double x = 11.635;
      double y = 2.76;

      System.out.printf("The value of e is %.4f%n", Math.E);
      System.out.printf("sqrt(%.3f) is %.3f%n", x, Math.sqrt(x));
   }
}</pre>
	<p class="imp">/practice014/Test18.java 에서 해당 프렉티스
		진행한다.</p>
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class="code">
The value of e is 2.7183
sqrt(11.635) is 3.411</pre>
	<span id="number_18"></span>
	<h1 class="subject sub">Java - sin() Method</h1>
	<h1>Description</h1>
	<p>The method returns the sine of the specified double
		value.</p>
	<h1>Syntax</h1>
	<pre class="code">
double sin(double d)</pre>
	<h1>Parameters</h1>
	<p>Here is the detail of parameters −</p>
	<ul>
		<li>d − A double data type.</li>
	</ul>
	<h1>Return Value</h1>
	<ul>
		<li>This method returns the sine of the specified
			double value.</li>
	</ul>
	<h2>Example</h2>
	<pre class="code">
public class Test {

   public static void main(String args[]) {
      double degrees = 45.0;
      double radians = Math.toRadians(degrees);

      System.out.format("The value of pi is %.4f%n", Math.PI);
      System.out.format("The sine of %.1f degrees is %.4f%n", degrees, Math.sin(radians));
   }
}</pre>
	<p class="imp">/practice014/Test9.java 에서 해당 프렉티스 진행한다.</p>
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class="code">
The value of pi is 3.1416
The sine of 45.0 degrees is 0.7071</pre>
	<span id="number_19"></span>
	<h1 class="subject sub">Java - cos() Method</h1>
	<h1>Description</h1>
	<p>The method returns the cosine of the specified
		double value.</p>
	<h1>Syntax</h1>
	<pre class="code">
double cos(double d)</pre>
	<h1>Parameters</h1>
	<p>Here is the detail of parameters −</p>
	<ul>
		<li>d − This method accepts a value of double data
			type.</li>
	</ul>
	<h1>Return Value</h1>
	<ul>
		<li>This method returns the cosine of the specified
			double value.</li>
	</ul>
	<h2>Example</h2>
	<pre class="code">
public class Test { 

   public static void main(String args[]) {
      double degrees = 45.0;
      double radians = Math.toRadians(degrees);

      System.out.format("The value of pi is %.4f%n", Math.PI);
      System.out.format("The cosine of %.1f degrees is %.4f%n", degrees, Math.cos(radians));
   }
}</pre>
	<p class="imp">/practice014/Test20.java 에서 해당 프렉티스
		진행한다.</p>
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class="code">
The value of pi is 3.1416
The cosine of 45.0 degrees is 0.7071</pre>
	<span id="number_20"></span>
	<h1 class="subject sub">Java - tan() Method</h1>
	<h1>Description</h1>
	<p>The method returns the tangent of the specified
		double value.</p>
	<h1>Syntax</h1>
	<pre class="code">
double tan(double d)</pre>
	<h1>Parameters</h1>
	<p>Here is the detail of parameters −</p>
	<ul>
		<li>d − A double data type.</li>
	</ul>
	<h1>Return Value</h1>
	<ul>
		<li>This method returns the tangent of the specified
			double value.</li>
	</ul>
	<h2>Example</h2>
	<pre class="code">
public class Test { 

   public static void main(String args[]) {
      double degrees = 45.0;
      double radians = Math.toRadians(degrees);

      System.out.format("The value of pi is %.4f%n", Math.PI);
      System.out.format("The tangent of %.1f degrees is %.4f%n", degrees, Math.tan(radians));
   }
}</pre>
	<p class="imp">/practice014/Test21.java 에서 해당 프렉티스
		진행한다.</p>
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class="code">
The value of pi is 3.1416
The tangent of 45.0 degrees is 1.0000</pre>
	<span id="number_21"></span>
	<h1 class="subject sub">Java - asin() Method</h1>
	<h1>Description</h1>
	<p>The method returns the arcsine of the specified
		double value.</p>
	<h1>Syntax</h1>
	<pre class="code">
double asin(double d)</pre>
	<h1>Parameters</h1>
	<p>Here is the detail of parameters −</p>
	<ul>
		<li>d − A double data types.</li>
	</ul>
	<h1>Return Value</h1>
	<ul>
		<li>This method returns the arcsine of the specified
			double value.</li>
	</ul>
	<h2>Example</h2>
	<pre class="code">
public class Test { 

   public static void main(String args[]) {   
      double degrees = 45.0;
      double radians = Math.toRadians(degrees);

      System.out.format("The value of pi is %.4f%n", Math.PI);
      System.out.format("The arcsine of %.4f is %.4f degrees %n", Math.sin(radians),
         Math.toDegrees(Math.asin(Math.sin(radians))));
   }
}</pre>
	<p class="imp">/practice014/Test22.java 에서 해당 프렉티스
		진행한다.</p>
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class="code">
The value of pi is 3.1416
The arcsine of 0.7071 is 45.0000 degrees
</pre>
	<span id="number_22"></span>
	<h1 class="subject sub">Java - acos() Method</h1>
	<h1>Description</h1>
	<p>The method returns the arccosine of the specified
		double value.</p>
	<h1>Syntax</h1>
	<pre class="code">
double acos(double d)</pre>
	<h1>Parameters</h1>
	<p>Here is the detail of parameters −</p>
	<ul>
		<li>d − A double data type.</li>
	</ul>
	<h1>Return Value</h1>
	<ul>
		<li>This method returns the arccosine of the
			specified double value.</li>
	</ul>
	<h2>Example</h2>
	<pre class="code">
public class Test { 

   public static void main(String args[]) {
      double degrees = 45.0;
      double radians = Math.toRadians(degrees);

      System.out.format("The value of pi is %.4f%n", Math.PI);
      System.out.format("The arccosine of %.4f is %.4f degrees %n", Math.cos(radians),
         Math.toDegrees(Math.acos(Math.cos(radians))));
   }
}</pre>
	<p class="imp">/practice014/Test23.java 에서 해당 프렉티스
		진행한다.</p>
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class="code">
The value of pi is 3.1416
The arccosine of 0.7071 is 45.0000 degrees</pre>
	<span id="number_23"></span>
	<h1 class="subject sub">Java - atan() Method</h1>
	<h1>Description</h1>
	<p>The method returns the arctangent of the specified
		double value.</p>
	<h1>Syntax</h1>
	<pre class="code">
double atan(double d)</pre>
	<h1>Parameters</h1>
	<p>Here is the detail of parameters −</p>
	<ul>
		<li>d − A double data type.</li>
	</ul>
	<h1>Return Value</h1>
	<ul>
		<li>This method returns the arctangent of the
			specified double value.</li>
	</ul>
	<h2>Example</h2>
	<pre class="code">
public class Test { 

   public static void main(String args[]) {
      double degrees = 45.0;
      double radians = Math.toRadians(degrees);

      System.out.format("The value of pi is very very very approximately %.4f%n", Math.PI);
      System.out.format("The arctangent of %.4f is %.4f degrees %n", Math.cos(radians), 
         Math.toDegrees(Math.atan(Math.sin(radians))));
   }
}</pre>
	<p class="imp">/practice014/Test24.java에서 해당 프렉티스 진행한다.</p>
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class="code">
The value of pi is very very very approximately 3.1416
The arctangent of 0.7071 is 35.2644 degrees </pre>



	<span id="number_24"></span>
	<h1 class="subject sub">Java - atan2() Method</h1>
	<h1>Description</h1>
	<p>The method converts rectangular coordinates (x, y)
		to polar coordinate (r, theta) and returns theta.</p>
	<h1>Syntax</h1>
	<pre class="code">
double atan2(double y, double x)</pre>
	<h1>Parameters</h1>
	<p>Here is the detail of parameters −</p>
	<ul>
		<li>X − X co-ordinate in double data type.</li>
		<li>Y − Y co-ordinate in double data type.</li>
	</ul>
	<h1>Return Value</h1>
	<ul>
		<li>This method returns theta from polar coordinate
			(r, theta).</li>
	</ul>
	<h2>Example</h2>
	<pre class="code">
public class Test { 

   public static void main(String args[]) {
      double x = 45.0;
      double y = 30.0;

      System.out.println( Math.atan2(x, y) );
   }
}</pre>
	<p class="imp">/pratice014/Test25.java 에서 해당 프렉티스 진행한다.</p>
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class="code">
0.982793723247329</pre>
	<span id="number_25"></span>
	<h1 class="subject sub">Java - toDegrees() Method</h1>
	<h1>Description</h1>
	<p>The method converts the argument value to degrees.</p>
	<h1>Syntax</h1>
	<pre class='code'>
double toDegrees(double d)</pre>
	<h1>Parameters</h1>
	<p>Here is the detail of parameters −</p>
	<ul>
		<li>d − A double data type.</li>
	</ul>
	<h1>Return Value</h1>
	<ul>
		<li>This method returns a double value.</li>
	</ul>
	<h2>Example</h2>
	<pre class="code">
public class Test { 

   public static void main(String args[]) {
      double x = 45.0;
      double y = 30.0;

      System.out.println( Math.toDegrees(x) );
      System.out.println( Math.toDegrees(y) );
   }
}</pre>
	<p class="imp">/practice014/Test26.java에서 해당 프렉티스 진행한다.</p>
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class="code">
2578.3100780887044
1718.8733853924698</pre>
	<span id="number_26"></span>
	<h1 class="subject sub">Java - toRadians() Method</h1>
	<h1>Description</h1>
	<p>The method converts the argument value to radians.</p>
	<h1>Syntax</h1>
	<pre class="code">
double toRadians(double d)</pre>
	<h1>Parameters</h1>
	<p>Here is the detail of parameters −</p>
	<ul>
		<li>d − A double data type.</li>
	</ul>
	<h1>Return Value</h1>
	<ul>
		<li>This method returns a double value.</li>
	</ul>
	<h2>Example</h2>
	<pre class="code">
public class Test { 

   public static void main(String args[]) {
      double x = 45.0;
      double y = 30.0;

      System.out.println( Math.toRadians(x) );
      System.out.println( Math.toRadians(y) );
   }
}</pre>
	<p class="imp">/practice014/Test27.java에서 해당 프렉티스 진행한다.</p>
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class="code">
0.7853981633974483
0.5235987755982988</pre>
	<span id="number_27"></span>
	<h1 class="subject sub">Java - random() Method</h1>
	<h1>Description</h1>
	<p>The method is used to generate a random number
		between 0.0 and 1.0. The range is: 0.0 =&lt; Math.random
		&lt; 1.0. Different ranges can be achieved by using
		arithmetic operations.</p>
	<h1>Syntax</h1>
	<pre class="code">
static double random()</pre>
	<h1>Parameters</h1>
	<p>Here is the detail of parameters −</p>
	<ul>
		<li>This is a default method and accepts no
			parameter.</li>
	</ul>
	<h1>Return Value</h1>
	<ul>
		<li>This method returns a double.</li>
	</ul>
	<h2>Example</h2>
	<pre class="code">
public class Test { 

   public static void main(String args[]) {
      System.out.println( Math.random() );
      System.out.println( Math.random() );
   }
}</pre>
	<p class="imp">/pratice014/Test28.java 에서 해당 프렉티스 진행한다.</p>
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class="code">
0.16763945061451657
0.400551253762343</pre>
	<p>Note − The above result will vary every time you
		call random() method.</p>
	<h1 class="subject">Java - Character Class</h1>
	<p>Normally, when we work with characters, we use
		primitive data types char.</p>
	<h2>Example</h2>
	<pre class="code">
char ch = 'a';

// Unicode for uppercase Greek omega character
char uniChar = '\u039A'; 

// an array of chars
char[] charArray ={ 'a', 'b', 'c', 'd', 'e' }; </pre>
	<p>
		However in development, we come across situations where we
		need to use objects instead of primitive data types. In
		order to achieve this, Java provides wrapper class
		Character for primitive data type char. <br> <br>
		The Character class offers a number of useful class (i.e.,
		static) methods for manipulating characters. You can
		create a Character object with the Character constructor −
	</p>
	<pre class="code">
Character ch = new Character('a');</pre>
	<p>The Java compiler will also create a Character
		object for you under some circumstances. For example, if
		you pass a primitive char into a method that expects an
		object, the compiler automatically converts the char to a
		Character for you. This feature is called autoboxing or
		unboxing, if the conversion goes the other way.</p>
	<h2>Example</h2>
	<pre class="code">
// Here following primitive char 'a'
// is boxed into the Character object ch
Character ch = 'a';

// Here primitive 'x' is boxed for method test,
// return is unboxed to char 'c'
char c = test('x');</pre>
	<h1>Escape Sequences</h1>
	<p>
		A character preceded by a backslash (\) is an escape
		sequence and has a special meaning to the compiler. <br>
		<br> The newline character (\n) has been used
		frequently in this tutorial in System.out.println()
		statements to advance to the next line after the string is
		printed. <br> <br> Following table shows the
		Java escape sequences −
	</p>
	<table>
		<tbody>
			<tr>
				<th>Escape Sequence</th>
				<th style="text-align: center;">Description</th>
			</tr>
			<tr>
				<td style="text-align: center;">\t</td>
				<td>Inserts a tab in the text at this point.</td>
			</tr>
			<tr>
				<td style="text-align: center;">\b</td>
				<td>Inserts a backspace in the text at this point.</td>
			</tr>
			<tr>
				<td style="text-align: center;">\n</td>
				<td>Inserts a newline in the text at this point.</td>
			</tr>
			<tr>
				<td style="text-align: center;">\r</td>
				<td>Inserts a carriage return in the text at this
					point.</td>
			</tr>
			<tr>
				<td style="text-align: center;">\f</td>
				<td>Inserts a form feed in the text at this point.</td>
			</tr>
			<tr>
				<td style="text-align: center;">\'</td>
				<td>Inserts a single quote character in the text at
					this point.</td>
			</tr>
			<tr>
				<td style="text-align: center;">\"</td>
				<td>Inserts a double quote character in the text at
					this point.</td>
			</tr>
			<tr>
				<td style="text-align: center;">\\</td>
				<td>Inserts a backslash character in the text at
					this point.</td>
			</tr>
		</tbody>
	</table>
	<p>When an escape sequence is encountered in a print
		statement, the compiler interprets it accordingly.</p>
	<h2>Example</h2>
	<p>If you want to put quotes within quotes, you must
		use the escape sequence, \", on the interior quotes −</p>
	<pre class="code">
public class Test {

   public static void main(String args[]) {
      System.out.println("She said \"Hello!\" to me.");
   }
}</pre>
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class="code">
She said "Hello!" to me.</pre>
	<h1>Character Methods</h1>
	<p>Following is the list of the important instance
		methods that all the subclasses of the Character class
		implement −</p>
	<table class="table table-bordered">
		<tbody>
			<tr>
				<th>Sr.No.</th>
				<th style="text-align: center;">Method &amp;
					Description</th>
			</tr>
			<tr>
				<td style="text-align: center;">1</td>
				<td><a href="/java/character_isletter.htm">isLetter()</a>
					<p>Determines whether the specified char value is a
						letter.</p></td>
			</tr>
			<tr>
				<td style="text-align: center;">2</td>
				<td><a href="/java/character_isdigit.htm">isDigit()</a>
					<p>Determines whether the specified char value is a
						digit.</p></td>
			</tr>
			<tr>
				<td style="text-align: center;">3</td>
				<td><a href="/java/character_iswhitespace.htm">isWhitespace()</a>
					<p>Determines whether the specified char value is
						white space.</p></td>
			</tr>
			<tr>
				<td style="text-align: center;">4</td>
				<td><a href="/java/character_isuppercase.htm">isUpperCase()</a>
					<p>Determines whether the specified char value is
						uppercase.</p></td>
			</tr>
			<tr>
				<td style="text-align: center;">5</td>
				<td><a href="/java/character_islowercase.htm">isLowerCase()</a>
					<p>Determines whether the specified char value is
						lowercase.</p></td>
			</tr>
			<tr>
				<td style="text-align: center;">6</td>
				<td><a href="/java/character_touppercase.htm">toUpperCase()</a>
					<p>Returns the uppercase form of the specified char
						value.</p></td>
			</tr>
			<tr>
				<td style="text-align: center;">7</td>
				<td><a href="/java/character_tolowercase.htm">toLowerCase()</a>
					<p>Returns the lowercase form of the specified char
						value.</p></td>
			</tr>
			<tr>
				<td style="text-align: center;">8</td>
				<td><a href="/java/character_tostring.htm">toString()</a>
					<p>Returns a String object representing the
						specified character value that is, a one-character
						string.</p></td>
			</tr>
		</tbody>
	</table>
	<p>For a complete list of methods, please refer to the
		java.lang.Character API specification.</p>
	<h1>What is Next?</h1>
	<p>In the next section, we will be going through the
		String class in Java. You will be learning how to declare
		and use Strings efficiently as well as some of the
		important methods in the String class.</p>
	<span id="ch_1"></span>
	<h1 class="subject sub">Java - isLetter() Method</h1>
	<h1>Description</h1>
	<p>The method determines whether the specified char
		value is a letter.</p>
	<h1>Syntax</h1>
	<pre class="code">
boolean isLetter(char ch)</pre>
	<h1>Parameters</h1>
	<p>Here is the detail of parameters −</p>
	<ul>
		<li>ch − Primitive character type.</li>
	</ul>
	<h1>Return Value</h1>
	<ul>
		<li>This method returns true if the passed character
			is really a character.</li>
	</ul>
	<h2>Example</h2>
	<pre class="code">
public class Test {

   public static void main(String args[]) {
      System.out.println(Character.isLetter('c'));
      System.out.println(Character.isLetter('5'));
   }
}</pre>
	<p class="imp">/practice015/Test1.java에서 해당 프렉티스 진행한다.</p>
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class="code">
true
false</pre>

	<span id="ch_2"></span>
	<h1 class="subject sub">Java - isDigit() Method</h1>
	<h1>Description</h1>
	<p>The method determines whether the specified char
		value is a digit.</p>
	<h1>Syntax</h1>
	<pre class="code">
boolean isDigit(char ch)</pre>
	<h1>Parameters</h1>
	<p>Here is the detail of parameters −</p>
	<ul>
		<li>ch − Primitive character type.</li>
	</ul>
	<h1>Return Value</h1>
	<ul>
		<li>This method returns true, if the passed character
			is really a digit.</li>
	</ul>
	<h2>Example</h2>
	<pre class="code">
public class Test {

   public static void main(String args[]) {
      System.out.println(Character.isDigit('c'));
      System.out.println(Character.isDigit('5'));
   }
}</pre>
	<p class="imp">/practice015/Test2.java 에서 해당 프렉티스 진행한다.</p>
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class="code">
false
true</pre>
	<span id="ch_3"></span>
	<h1 class="subject sub">Java - isWhitespace() Method</h1>
	<h1>Description</h1>
	<p>The method determines whether the specified char
		value is a white space, which includes space, tab, or new
		line.</p>

	<h1>Syntax</h1>
	<pre class='code'>
boolean isWhitespace(char ch)</pre>
	<h1>Parameters</h1>
	<p>Here is the detail of parameters −</p>
	<ul>
		<li>ch − Primitive character type.</li>
	</ul>
	<h1>Return Value</h1>
	<ul>
		<li>This method returns true, if the passed character
			is really a white space.</li>
	</ul>
	<h2>Example</h2>
	<pre class="code">
public class Test {

   public static void main(String args[]) {
      System.out.println(Character.isWhitespace('c'));
      System.out.println(Character.isWhitespace(' '));
      System.out.println(Character.isWhitespace('\n'));
      System.out.println(Character.isWhitespace('\t'));
   }
}
</pre>
	<p class="imp">/practice015/Test3.java 에서 해당 프렉티스 진행한다.</p>
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class="code">
false
true
true
true</pre>





	<span id="ch_4"></span>
	<h1 class="subject sub">Java - isUpperCase() Method</h1>
	<h1>Description</h1>
	<p>This method determines whether the specified char
		value is uppercase.</p>
	<h1>Syntax</h1>
	<pre class="code">
boolean isUpperCase(char ch)</pre>
	<h1>Parameters</h1>
	<p>Here is the detail of parameters −</p>
	<ul>
		<li>ch − Primitive character type.</li>
	</ul>
	<h1>Return Value</h1>
	<ul>
		<li>This method returns true, if the passed character
			is really an uppercase.</li>
	</ul>
	<h2>Example</h2>
	<pre class="code">
public class Test {

   public static void main(String args[]) {
      System.out.println(Character.isUpperCase('c'));
      System.out.println(Character.isUpperCase('C'));
      System.out.println(Character.isUpperCase('\n'));
      System.out.println(Character.isUpperCase('\t'));
   }
}</pre>
	<p class="imp">/practice015/Test4.java에서 해당 프렉티스 진행한다.</p>
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class="code">
false
true
false
false</pre>
	<span id="ch_5"></span>
	<h1 class="subject sub">Java - isLowerCase() Method</h1>
	<h1>Description</h1>
	<p>The method determines whether the specified char
		value is lowercase.</p>
	<h1>Syntax</h1>
	<pre class="code">
boolean isLowerCase(char ch)</pre>
	<h1>Parameters</h1>
	<p>Here is the detail of parameters −</p>
	<ul>
		<li>ch − Primitive character type.</li>
	</ul>
	<h1>Return Value</h1>
	<ul>
		<li>This method returns true, if the passed character
			is really in lowercase.</li>
	</ul>
	<h2>Example</h2>
	<pre class="code">
public class Test {

   public static void main(String args[]) {
      System.out.println(Character.isLowerCase('c'));
      System.out.println(Character.isLowerCase('C'));
      System.out.println(Character.isLowerCase('\n'));
      System.out.println(Character.isLowerCase('\t'));
   }
}</pre>
	<p class="imp">/practice015/Test5.java 에서 해당 프렉티스 진행한다.</p>
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class="code">
true
false
false
false</pre>


	<span id="ch_6"></span>
	<h1 class="subject sub">Java - toUpperCase() Method</h1>
	<h1>Description</h1>
	<p>The method returns the uppercase form of the
		specified char value.</p>
	<h1>Syntax</h1>
	<pre class="code">
char toUpperCase(char ch)</pre>
	<h1>Parameters</h1>
	<p>Here is the detail of parameters −</p>
	<ul>
		<li>ch − Primitive character type.</li>
	</ul>
	<h1>Return Value</h1>
	<ul>
		<li>This method returns the uppercase form of the
			specified char value.</li>
	</ul>
	<h2>Example</h2>
	<pre class="code">
public class Test {

   public static void main(String args[]) {
      System.out.println(Character.toUpperCase('c'));
      System.out.println(Character.toUpperCase('C'));
   }
}</pre>
	<p class="imp">
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class='code'>
C
C</pre>
	<span id="ch_7"></span>
	<h1 class="subject sub">Java - toLowerCase() Method</h1>
	<h1>Description</h1>
	<p>The method returns the lowercase form of the
		specified char value.</p>
	<h1>Syntax</h1>
	<pre class="code">
char toLowerCase(char ch)</pre>
	<h1>Parameters</h1>
	<p>Here is the detail of parameters −</p>
	<ul>
		<li>ch − Primitive character type.</li>
	</ul>
	<h1>Return Value</h1>
	<ul>
		<li>This method returns the lowercase form of the
			specified char value.</li>
	</ul>
	<h2>Example</h2>
	<pre class="code">
public class Test {

   public static void main(String args[]) {
      System.out.println(Character.toLowerCase('c'));
      System.out.println(Character.toLowerCase('C'));
   }
}</pre>
	<p class="imp">/practice015/Test7.java 에서 해당 프렉티스 진행한다.</p>
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class="code">
c
c</pre>
	<span id="ch_8"></span>
	<h1 class="subject sub">Java - toString() Method</h1>
	<h1>Description</h1>
	<p>This method returns a String object representing the
		specified character value, that is, a one-character
		string.</p>
	<h1>Syntax</h1>
	<pre class="code">
String toString(char ch)</pre>
	<h1>Parameters</h1>
	<p>Here is the detail of parameters −</p>
	<ul>
		<li>ch − Primitive character type.</li>
	</ul>
	<h1>Return Value</h1>
	<ul>
		<li>This method returns String object.</li>
	</ul>
	<h2>Example</h2>
	<pre class="code">
public class Test {

   public static void main(String args[]) {
      System.out.println(Character.toString('c'));
      System.out.println(Character.toString('C'));
   }
}</pre>
	<p class="imp">/pratice015/Test8.java에서 해당 프렉티스 진행한다.</p>
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class="code">
c
C</pre>

	<h1 class="subject">Java - Strings Class</h1>
	<p>
		Strings, which are widely used in Java programming, are a
		sequence of characters. In Java programming language,
		strings are treated as objects. <br> <br> The
		Java platform provides the String class to create and
		manipulate strings.
	</p>
	<h1>Creating Strings</h1>
	<p>The most direct way to create a string is to write −</p>
	<pre class="code">
String greeting = "Hello world!";</pre>
	<p>
		Whenever it encounters a string literal in your code, the
		compiler creates a String object with its value in this
		case, "Hello world!'. <br> <br> As with any
		other object, you can create String objects by using the
		new keyword and a constructor. The String class has 11
		constructors that allow you to provide the initial value
		of the string using different sources, such as an array of
		characters.
	</p>
	<h2>Example</h2>
	<pre class='code'>
public class StringDemo {

   public static void main(String args[]) {
      char[] helloArray = { 'h', 'e', 'l', 'l', 'o', '.' };
      String helloString = new String(helloArray);  
      System.out.println( helloString );
   }
}</pre>
	<p class="imp">/practice016/Test.java 에서 해당 프렉티스 진행한다.</p>
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class="code">
hello.</pre>
	<p>Note − The String class is immutable, so that once
		it is created a String object cannot be changed. If there
		is a necessity to make a lot of modifications to Strings
		of characters, then you should use String Buffer &amp;
		String Builder Classes.</p>
	<h1>String Length</h1>

	<p>
		Methods used to obtain information about an object are
		known as accessor methods. One accessor method that you
		can use with strings is the length() method, which returns
		the number of characters contained in the string object. <br>
		<br> The following program is an example of <span
			class="code">length()</span>, method String class.
	</p>
	<h2>Example</h2>
	<pre class="code">
public class StringDemo {

   public static void main(String args[]) {
      String palindrome = "Dot saw I was Tod";
      int len = palindrome.length();
      System.out.println( "String Length is : " + len );
   }
}</pre>
	<p class="imp">/practice016/Test2.java 에서 해당 프렉티스 진행한다.</p>
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class="code">
String Length is : 17</pre>

	<h1>Concatenating Strings</h1>
	<p>The String class includes a method for concatenating
		two strings −</p>
	<pre class="code">
string1.concat(string2);</pre>
	<p>This returns a new string that is string1 with
		string2 added to it at the end. You can also use the
		concat() method with string literals, as in −</p>
	<pre class="code">
"My name is ".concat("Zara");</pre>
	<p>Strings are more commonly concatenated with the +
		operator, as in −</p>
	<pre class="code">
"Hello," + " world" + "!"</pre>
	<p>which results in −</p>
	<pre class="code">
"Hello, world!"</pre>
	<p>Let us look at the following example −</p>

	<h2>Example</h2>
	<pre class="code">
public class StringDemo {

   public static void main(String args[]) {
      String string1 = "saw I was ";
      System.out.println("Dot " + string1 + "Tod");
   }
}</pre>
	<p class="imp">/practice016/Test3_StringDemo.java 에서 해당
		프렉티스 진행한다.</p>
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class="code">
Dot saw I was Tod</pre>




	<h1>Creating Format Strings</h1>
	<p>
		You have printf() and format() methods to print output
		with formatted numbers. The String class has an equivalent
		class method, format(), that returns a String object
		rather than a PrintStream object. <br> <br>
		Using String's static format() method allows you to create
		a formatted string that you can reuse, as opposed to a
		one-time print statement. For example, instead of −
	</p>
	<h2>Example</h2>
	<pre class="code">
System.out.printf("The value of the float variable is " +
                  "%f, while the value of the integer " +
                  "variable is %d, and the string " +
                  "is %s", floatVar, intVar, stringVar);</pre>
	<p>You can write −</p>

	<pre class="code">
String fs;
fs = String.format("The value of the float variable is " +
                   "%f, while the value of the integer " +
                   "variable is %d, and the string " +
                   "is %s", floatVar, intVar, stringVar);
System.out.println(fs);</pre>
	<p class="imp">/practice016/Test4.java 에서 해당프렉티스 진행한다.</p>
	<h1>String Methods</h1>

	<p>Here is the list of methods supported by String
		class −</p>

	<table>
		<tbody>
			<tr>
				<th>Sr.No.</th>
				<th style="text-align: center;">Method &amp;
					Description</th>
			</tr>
			<tr>
				<td>1</td>
				<td><a href="/java/java_string_charat.htm">char
						charAt(int index)</a>
					<p>Returns the character at the specified index.</p></td>
			</tr>
			<tr>
				<td>2</td>
				<td><a href="/java/java_string_compareto.htm">int
						compareTo(Object o)</a>
					<p>Compares this String to another Object.</p></td>
			</tr>
			<tr>
				<td>3</td>
				<td><a
					href="/java/java_string_compareto_anotherstring.htm">int
						compareTo(String anotherString)</a>
					<p>Compares two strings lexicographically.</p></td>
			</tr>
			<tr>
				<td>4</td>
				<td><a
					href="/java/java_string_comparetoignorecase.htm">int
						compareToIgnoreCase(String str)</a>
					<p>Compares two strings lexicographically, ignoring
						case differences.</p></td>
			</tr>
			<tr>
				<td>5</td>
				<td><a href="/java/java_string_concat.htm">String
						concat(String str)</a>
					<p>Concatenates the specified string to the end of
						this string.</p></td>
			</tr>
			<tr>
				<td>6</td>
				<td><a href="/java/java_string_contentequals.htm">boolean
						contentEquals(StringBuffer sb)</a>
					<p>Returns true if and only if this String
						represents the same sequence of characters as the
						specified StringBuffer.</p></td>
			</tr>
			<tr>
				<td>7</td>
				<td><a href="/java/java_string_copyvalueof.htm">static
						String copyValueOf(char[] data)</a>
					<p>Returns a String that represents the character
						sequence in the array specified.</p></td>
			</tr>
			<tr>
				<td>8</td>
				<td><a
					href="/java/java_string_copyvalueof_dataoffsetcount.htm">static
						String copyValueOf(char[] data, int offset, int count)</a>
					<p>Returns a String that represents the character
						sequence in the array specified.</p></td>
			</tr>
			<tr>
				<td>9</td>
				<td><a href="/java/java_string_endswith.htm">boolean
						endsWith(String suffix)</a>
					<p>Tests if this string ends with the specified
						suffix.</p></td>
			</tr>
			<tr>
				<td>10</td>
				<td><a href="/java/java_string_equals.htm">boolean
						equals(Object anObject)</a>
					<p>Compares this string to the specified object.</p></td>
			</tr>
			<tr>
				<td>11</td>
				<td><a
					href="/java/java_string_equalsignorecase.htm">boolean
						equalsIgnoreCase(String anotherString)</a>
					<p>Compares this String to another String, ignoring
						case considerations.</p></td>
			</tr>
			<tr>
				<td>12</td>
				<td><a href="/java/java_string_getbytes.htm">byte
						getBytes()</a>
					<p>Encodes this String into a sequence of bytes
						using the platform's default charset, storing the
						result into a new byte array.</p></td>
			</tr>
			<tr>
				<td>13</td>
				<td><a
					href="/java/java_string_getbytes_charsetname.htm">byte[]
						getBytes(String charsetName)</a>
					<p>Encodes this String into a sequence of bytes
						using the named charset, storing the result into a new
						byte array.</p></td>
			</tr>
			<tr>
				<td>14</td>
				<td><a href="/java/java_string_getchars.htm">void
						getChars(int srcBegin, int srcEnd, char[] dst, int
						dstBegin)</a>
					<p>Copies characters from this string into the
						destination character array.</p></td>
			</tr>
			<tr>
				<td>15</td>
				<td><a href="/java/java_string_hashcode.htm">int
						hashCode()</a>
					<p>Returns a hash code for this string.</p></td>
			</tr>
			<tr>
				<td>16</td>
				<td><a href="/java/java_string_indexof.htm">int
						indexOf(int ch)</a>
					<p>Returns the index within this string of the
						first occurrence of the specified character.</p></td>
			</tr>
			<tr>
				<td>17</td>
				<td><a
					href="/java/java_string_indexof_fromindex.htm">int
						indexOf(int ch, int fromIndex)</a>
					<p>Returns the index within this string of the
						first occurrence of the specified character, starting
						the search at the specified index.</p></td>
			</tr>
			<tr>
				<td>18</td>
				<td><a href="/java/java_string_indexof_str.htm">int
						indexOf(String str)</a>
					<p>Returns the index within this string of the
						first occurrence of the specified substring.</p></td>
			</tr>
			<tr>
				<td>19</td>
				<td><a
					href="/java/java_string_indexof_strfromindex.htm">int
						indexOf(String str, int fromIndex)</a>
					<p>Returns the index within this string of the
						first occurrence of the specified substring, starting
						at the specified index.</p></td>
			</tr>
			<tr>
				<td>20</td>
				<td><a href="/java/java_string_intern.htm">String
						intern()</a>
					<p>Returns a canonical representation for the
						string object.</p></td>
			</tr>
			<tr>
				<td>21</td>
				<td><a href="/java/java_string_lastindexof.htm">int
						lastIndexOf(int ch)</a>
					<p>Returns the index within this string of the last
						occurrence of the specified character.</p></td>
			</tr>
			<tr>
				<td>22</td>
				<td><a
					href="/java/java_string_lastindexof_chfromindex.htm">int
						lastIndexOf(int ch, int fromIndex)</a>
					<p>Returns the index within this string of the last
						occurrence of the specified character, searching
						backward starting at the specified index.</p></td>
			</tr>
			<tr>
				<td>23</td>
				<td><a href="/java/java_string_lastindexof_str.htm">int
						lastIndexOf(String str)</a>
					<p>Returns the index within this string of the
						rightmost occurrence of the specified substring.</p></td>
			</tr>
			<tr>
				<td>24</td>
				<td><a
					href="/java/java_string_lastindexof_fromindex.htm">int
						lastIndexOf(String str, int fromIndex)</a>
					<p>Returns the index within this string of the last
						occurrence of the specified substring, searching
						backward starting at the specified index.</p></td>
			</tr>
			<tr>
				<td>25</td>
				<td><a href="/java/java_string_length.htm">int
						length()</a>
					<p>Returns the length of this string.</p></td>
			</tr>
			<tr>
				<td>26</td>
				<td><a href="/java/java_string_matches.htm">boolean
						matches(String regex)</a>
					<p>Tells whether or not this string matches the
						given regular expression.</p></td>
			</tr>
			<tr>
				<td>27</td>
				<td><a
					href="/java/java_string_regionmatches_ignorecase.htm">boolean
						regionMatches(boolean ignoreCase, int toffset, String
						other, int ooffset, int len) </a>
					<p>Tests if two string regions are equal.</p></td>
			</tr>
			<tr>
				<td>28</td>
				<td><a href="/java/java_string_regionmatches.htm">boolean
						regionMatches(int toffset, String other, int ooffset,
						int len)</a>
					<p>Tests if two string regions are equal.</p></td>
			</tr>
			<tr>
				<td>29</td>
				<td><a href="/java/java_string_replace.htm">String
						replace(char oldChar, char newChar)</a>
					<p>Returns a new string resulting from replacing
						all occurrences of oldChar in this string with
						newChar.</p></td>
			</tr>
			<tr>
				<td>30</td>
				<td><a href="/java/java_string_replaceall.htm">String
						replaceAll(String regex, String replacement</a>
					<p>Replaces each substring of this string that
						matches the given regular expression with the given
						replacement.</p></td>
			</tr>
			<tr>
				<td>31</td>
				<td><a href="/java/java_string_replacefirst.htm">String
						replaceFirst(String regex, String replacement)</a>
					<p>Replaces the first substring of this string that
						matches the given regular expression with the given
						replacement.</p></td>
			</tr>
			<tr>
				<td>32</td>
				<td><a href="/java/java_string_split.htm">String[]
						split(String regex)</a>
					<p>Splits this string around matches of the given
						regular expression.</p></td>
			</tr>
			<tr>
				<td>33</td>
				<td><a
					href="/java/java_string_split_regexlimit.htm">String[]
						split(String regex, int limit)</a>
					<p>Splits this string around matches of the given
						regular expression.</p></td>
			</tr>
			<tr>
				<td>34</td>
				<td><a href="/java/java_string_startswith.htm">boolean
						startsWith(String prefix)</a>
					<p>Tests if this string starts with the specified
						prefix.</p></td>
			</tr>
			<tr>
				<td>35</td>
				<td><a
					href="/java/java_string_startswith_prefixtoffset.htm">boolean
						startsWith(String prefix, int toffset)</a>
					<p>Tests if this string starts with the specified
						prefix beginning a specified index.</p></td>
			</tr>
			<tr>
				<td>36</td>
				<td><a href="/java/java_string_subsequence.htm">CharSequence
						subSequence(int beginIndex, int endIndex)</a>
					<p>Returns a new character sequence that is a
						subsequence of this sequence.</p></td>
			</tr>
			<tr>
				<td>37</td>
				<td><a href="/java/java_string_substring.htm">String
						substring(int beginIndex)</a>
					<p>Returns a new string that is a substring of this
						string.</p></td>
			</tr>
			<tr>
				<td>38</td>
				<td><a
					href="/java/java_string_substring_beginendindex.htm">String
						substring(int beginIndex, int endIndex)</a>
					<p>Returns a new string that is a substring of this
						string.</p></td>
			</tr>
			<tr>
				<td>39</td>
				<td><a href="/java/java_string_tochararray.htm">char[]
						toCharArray()</a>
					<p>Converts this string to a new character array.</p></td>
			</tr>
			<tr>
				<td>40</td>
				<td><a href="/java/java_string_tolowercase.htm">String
						toLowerCase()</a>
					<p>Converts all of the characters in this String to
						lower case using the rules of the default locale.</p></td>
			</tr>
			<tr>
				<td>41</td>
				<td><a
					href="/java/java_string_tolowercase_locale.htm">String
						toLowerCase(Locale locale)</a>
					<p>Converts all of the characters in this String to
						lower case using the rules of the given Locale.</p></td>
			</tr>
			<tr>
				<td>42</td>
				<td><a href="/java/java_string_tostring.htm">String
						toString()</a>
					<p>This object (which is already a string!) is
						itself returned.</p></td>
			</tr>
			<tr>
				<td>43</td>
				<td><a href="/java/java_string_touppercase.htm">String
						toUpperCase()</a>
					<p>Converts all of the characters in this String to
						upper case using the rules of the default locale.</p></td>
			</tr>
			<tr>
				<td>44</td>
				<td><a
					href="/java/java_string_touppercase_locale.htm">String
						toUpperCase(Locale locale)</a>
					<p>Converts all of the characters in this String to
						upper case using the rules of the given Locale.</p></td>
			</tr>
			<tr>
				<td>45</td>
				<td><a href="/java/java_string_trim.htm">String
						trim()</a>
					<p>Returns a copy of the string, with leading and
						trailing whitespace omitted.</p></td>
			</tr>
			<tr>
				<td>46</td>
				<td><a href="/java/java_string_valueof.htm">static
						String valueOf(primitive data type x)</a>
					<p>Returns the string representation of the passed
						data type argument.</p></td>
			</tr>
		</tbody>
	</table>
	<span id="str_1"></span>
	<h1 class="subject sub">Java - String charAt() Method</h1>
	<h1>Description</h1>
	<p>This method returns the character located at the
		String's specified index. The string indexes start from
		zero.</p>
	<h1>Syntax</h1>
	<p>Here is the syntax of this method −</p>
	<pre class="code">
public char charAt(int index)</pre>
	<h1>Parameters</h1>
	<p>Here is the detail of parameters −</p>
	<ul>
		<li>index − Index of the character to be returned.</li>
	</ul>
	<h1>Return Value</h1>
	<ul>
		<li>This method returns a char at the specified
			index.</li>
	</ul>
	<h2>Example</h2>
	<pre class="code">
public class Test {

   public static void main(String args[]) {
      String s = "Strings are immutable";
      char result = s.charAt(8);
      System.out.println(result);
   }
}</pre>
	<p class="imp">프렉티스016_ex/Test1.java 에서 해당 프렉티스 진행한다.</p>
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class="code">
a</pre>
	<span id="str_2"></span>
	<h1 class="subject sub">Java - String compareTo()
		Method</h1>
	<h1>Description</h1>
	<p>This method compares this String to another Object.</p>
	<h1>Syntax</h1>
	<p>Here is the syntax of this method −</p>
	<pre class="code">
int compareTo(Object o)</pre>
	<h1>Parameters</h1>
	<p>Here is the detail of parameters −</p>
	<ul>
		<li>O − the Object to be compared.</li>
	</ul>
	<h1>Return Value</h1>
	<ul>
		<li>The value 0 if the argument is a string
			lexicographically equal to this string; a value less than
			0 if the argument is a string lexicographically greater
			than this string; and a value greater than 0 if the
			argument is a string lexicographically less than this
			string.</li>
	</ul>
	<h2>Example</h2>
	<pre class="code">
public class Test {

   public static void main(String args[]) {
      String str1 = "Strings are immutable";
      String str2 = new String("Strings are immutable");
      String str3 = new String("Integers are not immutable");
      
      int result = str1.compareTo( str2 );
      System.out.println(result);
      
      result = str2.compareTo( str3 );
      System.out.println(result);
   }
}</pre>

	<p class="imp">프렉티스016_2/Test2.java 에서 해당 프렉티스 진행한다.</p>
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class="code">
0
10</pre>
	<span id="str_3"></span>
	<h1 class="subject sub">String compareTo(String
		anotherString)</h1>
	<h1>Description</h1>
	<p>This method compares two strings lexicographically.</p>
	<h1>Syntax</h1>
	<p>Here is the syntax of this method −</p>
	<pre class="code">
int compareTo(String anotherString)</pre>
	<h1>Parameters</h1>
	<p>Here is the detail of parameters −</p>
	<ul>
		<li>anotherString − the String to be compared.</li>
	</ul>
	<h1>Return Value</h1>
	<ul>
		<li>The value 0 if the argument is a string
			lexicographically equal to this string; a value less than
			0 if the argument is a string lexicographically greater
			than this string; and a value greater than 0 if the
			argument is a string lexicographically less than this
			string.</li>
	</ul>
	<h2>Example</h2>
	<pre class="code">
public class Test {

   public static void main(String args[]) {
      String str1 = "Strings are immutable";
      String str2 = "Strings are immutable";
      String str3 = "Integers are not immutable";
      
      int result = str1.compareTo( str2 );
      System.out.println(result);
      
      result = str2.compareTo( str3 );
      System.out.println(result);
      
      result = str3.compareTo( str1 );
      System.out.println(result);
   }
}</pre>
	<p class="imp">프렉티스016_ex/Test3.java 에서 해당 프렉티스 진행한다.</p>
	<p>This will produce the following result −</p>

	<h2>Output</h2>
	<pre class="code">
0
10
-10</pre>
	<span id="str_4"></span>
	<h1 class="subject sub">String compareToIgnoreCase()
		Method</h1>
	<span class='code'>Case 란 lowerCase UpperCase 할 때
		case이다. 그걸 여기서는 무시하겠다. 즉, 대문자 소문자 비교 하는걸 없애겠다 라는 얘기임.</span>
	<h1>Description</h1>
	<p>This method compares two strings lexicographically,
		ignoring case differences.</p>
	<h1>Syntax</h1>
	<p>Here is the syntax of this method −</p>
	<pre class="code">
int compareToIgnoreCase(String str)</pre>
	<h1>Parameters</h1>
	<p>Here is the detail of parameters −</p>
	<ul>
		<li>str − the String to be compared.</li>
	</ul>
	<h1>Return Value</h1>
	<ul>
		<li>This method returns a negative integer, zero, or
			a positive integer as the specified String is greater
			than, equal to, or less than this String, ignoring case
			considerations.</li>
	</ul>
	<h2>Example</h2>
	<pre class="code">
public class Test {

   public static void main(String args[]) {
      String str1 = "Strings are immutable";
      String str2 = "Strings are immutable";
      String str3 = "Integers are not immutable";

      int result = str1.compareToIgnoreCase( str2 );
      System.out.println(result);

      result = str2.compareToIgnoreCase( str3 );
      System.out.println(result);

      result = str3.compareToIgnoreCase( str1 );
      System.out.println(result);
   }
}</pre>
	<p class="imp">프렉티스016_ex/Text4.java 에서 해당 프렉티스 진행하자.</p>
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class="code">
0
10
-10</pre>
	<span id="str_5"></span>
	<h1 class="subject sub">Java - String concat() Method</h1>
	<h1>Description</h1>
	<p>This method appends one String to the end of
		another. The method returns a String with the value of the
		String passed into the method, appended to the end of the
		String, used to invoke this method.</p>
	<h1>Syntax</h1>
	<p>Here is the syntax of this method −</p>
	<pre class="code">
public String concat(String s)</pre>
	<h1>Parameters</h1>
	<p>Here is the detail of parameters −</p>
	<ul>
		<li>s − the String that is concatenated to the end of
			this String.</li>
	</ul>
	<h1>Return Value</h1>
	<ul>
		<li>This methods returns a string that represents the
			concatenation of this object's characters followed by the
			string argument's characters.</li>
	</ul>
	<h2>Example</h2>
	<pre class="code">
public class Test {

   public static void main(String args[]) {
      String s = "Strings are immutable";
      s = s.concat(" all the time");
      System.out.println(s);
   }
}</pre>
	<p class="imp">프렉티스016_ex/Test5.java 에서 해당 프렉티스 진행한다.</p>
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class="code">
Strings are immutable all the time</pre>

	<span id="str_6"></span>
	<h1 class="subject sub">Java - String contentEquals()
		Method</h1>
	<h1>Description</h1>
	<p>This method returns true if and only if this String
		represents the same sequence of characters as specified in
		StringBuffer.</p>
	<h1>Syntax</h1>
	<p>Here is the syntax of this method −</p>
	<pre class="code">
public boolean contentEquals(StringBuffer sb)</pre>
	<h1>Parameters</h1>
	<p>Here is the detail of parameters −</p>
	<ul>
		<li>sb − the StringBuffer to compare.</li>
	</ul>
	<h1>Return Value</h1>
	<ul>
		<li>This method returns true if and only if this
			String represents the same sequence of characters as the
			specified in StringBuffer, otherwise false.</li>
	</ul>
	<pre class="code">
public class Test {

   public static void main(String args[]) {
      String str1 = "Not immutable";
      String str2 = "Strings are immutable";
      StringBuffer str3 = new StringBuffer( "Not immutable");

      boolean  result = str1.contentEquals( str3 );
      System.out.println(result);
	  
      result = str2.contentEquals( str3 );
      System.out.println(result);
   }
}</pre>
	<p class="imp">프렉티스16_ex/Text6.java 에서 해당 프렉티스 진행한다.</p>
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class="code">
true
false</pre>
	<span id="str_7"></span>
	<h1 class="subject sub">Java - String copyValueOf()
		Method</h1>
	<h1>Description</h1>
	<p>This method returns a String that represents the
		character sequence in the array specified.</p>
	<h1>Syntax</h1>
	<p>Here is the syntax of this method −</p>
	<pre class="code">
public static String copyValueOf(char[] data)</pre>
	<h1>Parameters</h1>
	<p>Here is the detail of parameters −</p>
	<ul>
		<li>data − the character array.</li>
	</ul>
	<h1>Return Value</h1>
	<ul>
		<li>This method returns a String that contains the
			characters of the character array.</li>
	</ul>
	<h2>Example</h2>
	<pre class="code">
public class Test {

   public static void main(String args[]) {
      char[] Str1 = {'h', 'e', 'l', 'l', 'o', ' ', 'w', 'o', 'r', 'l', 'd'};
      String Str2 = "";
      Str2 = Str2.copyValueOf( Str1 );
      System.out.println("Returned String: " + Str2);
   }
}</pre>
	<p class="imp">프렉티스016_ex/Test7.java 에서 해당 프렉티스 진행한다.</p>
	<p>This will produce the following result −</p>

	<h2>Output</h2>
	<pre class="code">
Returned String: hello world</pre>
	<span id="str_8"></span>
	<h1 class="subject sub">String copyValueOf(data,
		offset, count)</h1>
	<h1>Description</h1>
	<p>This returns a String that represents the character
		sequence in the array specified.</p>
	<h1>Syntax</h1>
	<p>Here is the syntax of this method −</p>
	<pre class="code">
public static String copyValueOf(char[] data, int offset, int count)</pre>
	<h1>Parameters</h1>
	<p>Here is the detail of parameters −</p>
	<ul>
		<li>data − the character array.</li>
		<li>offset − initial offset of the subarray.</li>
		<li>count − length of the subarray.</li>
	</ul>
	<h1>Return Value</h1>
	<ul>
		<li>This method returns a String that contains the
			characters of the character array.</li>
	</ul>
	<h2>Example</h2>
	<pre class="code">
public class Test {

   public static void main(String args[]) {
      char[] Str1 = {'h', 'e', 'l', 'l', 'o', ' ', 'w', 'o', 'r', 'l', 'd'};
      String Str2 = "";
      Str2 = Str2.copyValueOf( Str1, 2, 6 );
      System.out.println("Returned String: " + Str2);
   }
}</pre>
	<p>This will produce the following result −</p>

	<h2>Output</h2>
	<pre class="code">
Returned String: llo wo</pre>
	<span id="str_9"></span>
	<h1 class="subject sub">Java - String endsWith()
		Method</h1>
	<h1>Description</h1>
	<p>This method tests if this string ends with the
		specified suffix.</p>
	<h1>Syntax</h1>
	<p>Here is the syntax of this method −</p>
	<pre class="code">
public boolean endsWith(String suffix)</pre>
	<h1>Parameters</h1>
	<p>Here is the detail of parameters −</p>
	<ul>
		<li>suffix − the suffix.</li>
	</ul>
	<h1>Return Value</h1>
	<ul>
		<li>This method returns true if the character
			sequence represented by the argument is a suffix of the
			character sequence represented by this object; false
			otherwise. Note that the result will be true if the
			argument is the empty string or is equal to this String
			object as determined by the equals(Object) method.</li>
	</ul>
	<h2>Example</h2>
	<pre class="code">
public class Test {

   public static void main(String args[]) {
      String Str = new String("This is really not immutable!!");
      boolean retVal;

      retVal = Str.endsWith( "immutable!!" );
      System.out.println("Returned Value = " + retVal );

      retVal = Str.endsWith( "immu" );
      System.out.println("Returned Value = " + retVal );
   }
}</pre>
	<p class="imp">프렉티스16_ex/Test9.java</p>
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class="code">
Returned Value = true
Returned Value = false</pre>

	<span id="str_10"></span>
	<h1 class="subject sub">Java - String equals() Method</h1>
	<h1>Description</h1>
	<p>This method compares this string to the specified
		object. The result is true if and only if the argument is
		not null and is a String object that represents the same
		sequence of characters as this object.</p>
	<h1>Syntax</h1>
	<p>Here is the syntax of this method −</p>
	<pre class="code">public boolean equals(Object anObject)</pre>
	<h1>Parameters</h1>
	<p>Here is the detail of parameters −</p>
	<ul>
		<li>anObject − the object to compare this String
			against.</li>
	</ul>
	<h1>Return Value</h1>
	<ul>
		<li>This method returns true if the String are equal;
			false otherwise.</li>
	</ul>
	<h2>Example</h2>
	<pre class="code">
public class Test {

   public static void main(String args[]) {
      String Str1 = new String("This is really not immutable!!");
      String Str2 = Str1;
      String Str3 = new String("This is really not immutable!!");
      boolean retVal;

      retVal = Str1.equals( Str2 );
      System.out.println("Returned Value = " + retVal );

      retVal = Str1.equals( Str3 );
      System.out.println("Returned Value = " + retVal );
   }
}</pre>
	<p class="imp">프렉티스_016/Test10.java 에서 해당 프렉티스 진행한다.</p>
	<p>This will produce the following result −</p>

	<h2>Output</h2>
	<pre class="code">
Returned Value = true
Returned Value = true</pre>
	<span id="str_11"></span>
	<h1 class="subject sub">Java - String
		equalsIgnoreCase() Method</h1>
	<h1>Description</h1>
	<p>This method compares this String to another String,
		ignoring case considerations. Two strings are considered
		equal ignoring case, if they are of the same length, and
		corresponding characters in the two strings are equal
		ignoring case.</p>
	<h1>Syntax</h1>
	<p>Here is the syntax of this method −</p>
	<pre class='code'>
public boolean equalsIgnoreCase(String anotherString)</pre>
	<h1>Parameters</h1>
	<p>Here is the detail of parameters −</p>
	<ul>
		<li>anotherString − the String to compare this String
			against.</li>
	</ul>
	<h1>Return Value</h1>
	<ul>
		<li>This method returns true if the argument is not
			null and the Strings are equal, ignoring case; false
			otherwise.</li>
	</ul>
	<h2>Example</h2>
	<pre class="code">
public class Test {

   public static void main(String args[]) {
      String Str1 = new String("This is really not immutable!!");
      String Str2 = Str1;
      String Str3 = new String("This is really not immutable!!");
      String Str4 = new String("This IS REALLY NOT IMMUTABLE!!");
      boolean retVal;

      retVal = Str1.equals( Str2 );
      System.out.println("Returned Value = " + retVal );

      retVal = Str1.equals( Str3 );
      System.out.println("Returned Value = " + retVal );

      retVal = Str1.equalsIgnoreCase( Str4 );
      System.out.println("Returned Value = " + retVal );
   }
}</pre>
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class="code">
Returned Value = true
Returned Value = true
Returned Value = true</pre>
	<span id="12"></span>
	<h1 class="subject sub">Java – String getBytes()
		Method</h1>
	<h1>Description</h1>
	<p>This method encodes this String into a sequence of
		bytes using the platform's default charset, storing the
		result into a new byte array.</p>
	<h1>Syntax</h1>
	<p>Here is the syntax of this method −</p>
	<pre class="code">
public byte[] getBytes()</pre>
	<h1>Return Value</h1>
	<ul>
		<li>This method returns the resultant byte array.</li>
	</ul>
	<h2>Example</h2>
	<pre class="code">
import java.io.*;
public class Test12 {
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		String str1 = new String("Welcome to Tutorialspoint.com");
			String str2 = new String(str1.getBytes());
			System.out.println("Returned Value " + str2);
			str2 = new String(str1.getBytes());
			System.out.println("Returned Value " + str2);
	}
}
</pre>
	<p class="imp">/프렉티스_16_ex/Text12.java 에서 해당 프렉티스 진행한다.</p>
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class="code">
Returned Value Welcome to Tutorialspoint.com
Returned Value Welcome to Tutorialspoint.com</pre>
	<span id="str_13"></span>
	<h1 class="subject sub">String getBytes(String
		charsetName)</h1>
	<h1>Description</h1>
	<p>This method encodes this String into a sequence of
		bytes using the named charset, storing the result into a
		new byte array.</p>
	<h1>Syntax</h1>
	<p>Here is the syntax of this method −</p>
	<pre class="code">
public byte[] getBytes(String charsetName) throws UnsupportedEncodingException</pre>
	<h1>Parameters</h1>
	<p>Here is the detail of parameters −</p>
	<ul>
		<li>charsetName − the name of a supported charset.</li>
	</ul>
	<h1>Return Value</h1>
	<ul>
		<li>This method returns the resultant byte array.</li>
	</ul>
	<h2>Example</h2>
	<pre class="code">
import java.io.*;
public class Test {

   public static void main(String args[]) {
      String Str1 = new String("Welcome to Tutorialspoint.com");
      try {
         String Str2 = new String(Str1.getBytes( "UTF-8" ));
         System.out.println("Returned Value " + Str2 );
         Str2 = new String (Str1.getBytes( "ISO-8859-1" ));
         System.out.println("Returned Value " + Str2 );
      } catch ( UnsupportedEncodingException e) {
         System.out.println("Unsupported character set");
      }
   }
}</pre>
	<p class="imp">프렉티스016_ex/Test13.java에서 해당 프렉티스 진행한다.</p>
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class="code">
Returned Value Welcome to Tutorialspoint.com
Returned Value Welcome to Tutorialspoint.com</pre>
	<span id="str_14"></span>
	<h1 class="subject sub">Java - String getChars()
		Method</h1>
	<h1>Description</h1>
	<p>This method copies characters from this string into
		the destination character array.</p>
	<h1>Syntax</h1>
	<p>Here is the syntax of this method −</p>
	<pre class="code">
public void getChars(int srcBegin, int srcEnd, char[] dst,  int dstBegin)</pre>
	<h1>Parameters</h1>
	<p>Here is the detail of parameters −</p>
	<ul>
		<li>srcBegin − index of the first character in the
			string to copy.</li>
		<li>srcEnd − index after the last character in the
			string to copy.</li>
		<li>dst − the destination array.</li>
		<li>dstBegin − the start offset in the destination
			array.</li>
	</ul>
	<h1>Return Value</h1>
	<ul>
		<li>It does not return any value but throws
			IndexOutOfBoundsException.</li>
	</ul>
	<h2>Example</h2>
	<pre class="code">
import java.io.*;
public class Test {

   public static void main(String args[]) {
      String Str1 = new String("Welcome to Tutorialspoint.com");
      char[] Str2 = new char[7];
      try {
         Str1.getChars(2, 9, Str2, 0);
         System.out.print("Copied Value = " );
         System.out.println(Str2 );
      } catch ( Exception ex) {
         System.out.println("Raised exception...");
      }
   }
}</pre>
	<p class="imp">프렉티스016_ex/Test14.java 에서 해당 프렉티스 진행한다.</p>
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class="code">
Copied Value = lcome t</pre>
	<span id="str_15"></span>
	<h1 class="subject sub">Java - String hashCode()
		Method</h1>
	<h1>Description</h1>
	<p>This method returns a hash code for this string. The
		hash code for a String object is computed as −</p>
	<pre class="code">
s[0]*31^(n - 1) + s[1]*31^(n - 2) + ... + s[n - 1]</pre>
	<p>Using int arithmetic, where s[i] is the ith
		character of the string, n is the length of the string,
		and ^ indicates exponentiation. (The hash value of the
		empty string is zero.)</p>
	<h1>Syntax</h1>
	<p>Here is the syntax of this method −</p>
	<pre class="code">
public int hashCode()</pre>
	<h1>Parameters</h1>
	<p>Here is the detail of parameters −</p>
	<ul>
		<li>This is a default method and this will not accept
			any parameters.</li>
	</ul>
	<h1>Return Value</h1>
	<ul>
		<li>This method returns a hash code value for this
			object.</li>
	</ul>
	<h2>Example</h2>
	<pre class="code">
import java.io.*;
public class Test {

   public static void main(String args[]) {
      String Str = new String("Welcome to Tutorialspoint.com");
      System.out.println("Hashcode for Str :" + Str.hashCode() );
   }
}</pre>
	<p class="imp">프렉티스016_ex/Text15.java에서 해당 프렉티스 진행하자.</p>
	<h2>Output</h2>
	<pre class="code">
Hashcode for Str :1186874997</pre>
	<span id="str_16"></span>
	<h1 class="subject sub">Java – String indexOf() Method</h1>
	<h1>Description</h1>
	<p>This method returns the index within this string of
		the first occurrence of the specified character or -1, if
		the character does not occur.</p>
	<h1>Syntax</h1>
	<p>Here is the syntax of this method −</p>
	<pre class="code">
public int indexOf(char ch)</pre>
	<h1>Parameters</h1>
	<p>Here is the detail of parameters −</p>
	<ul>
		<li>ch − a character.</li>
	</ul>
	<h1>Return Value</h1>
	<ul>
		<li>See the description.</li>
	</ul>
	<h2>Example</h2>
	<pre class="code">
import java.io.*;
public class Test {

   public static void main(String args[]) {
      String Str = new String("Welcome to Tutorialspoint.com");
      System.out.print("Found Index :" );
      System.out.println(Str.indexOf( 'o' ));
   }
}</pre>
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class="code">
Found Index :4</pre>
	<span id="str_17"></span>
	<h1 class="subject sub">String indexOf(int ch, int
		fromIndex)</h1>
	<h1>Description</h1>
	<p>This method returns the index within this string of
		the first occurrence of the specified character, starting
		the search at the specified index or -1, if the character
		does not occur.</p>
	<h1>Syntax</h1>
	<p>Here is the syntax of this method −</p>
	<pre class="code">
public int indexOf(int ch, int fromIndex)</pre>
	<h1>Parameters</h1>
	<p>Here is the detail of parameters −</p>

	<ul>
		<li>ch − a character.</li>
		<li>fromIndex − the index to start the search from.</li>
	</ul>
	<h1>Return Value</h1>
	<ul>
		<li>See the description.</li>
	</ul>
	<h2>Example</h2>
	<pre class="code">
import java.io.*;
public class Test {

   public static void main(String args[]) {
      String Str = new String("Welcome to Tutorialspoint.com");
      System.out.print("Found Index :" );
      System.out.println(Str.indexOf( 'o', 5 ));
   }
}</pre>
	<p class="imp">프렉티스016_ex/Test17.java에서 해당 프렉티스 진행한다.</p>
	<h2>Output</h2>
	<pre class="code">
Found Index :9</pre>
	<span id="str_18"></span>
	<h1 class="subject sub">Java – String indexOf(String
		str) Method</h1>
	<h1>Description</h1>
	<p>This method returns the index within this string of
		the first occurrence of the specified substring. If it
		does not occur as a substring, -1 is returned.</p>
	<h1>Syntax</h1>
	<p>Here is the syntax of this method −</p>
	<pre class="code">
int indexOf(String str)</pre>
	<h1>Parameters</h1>
	<p>Here is the detail of parameters −</p>
	<h2>Output</h2>
	<pre class="code">
Found Index :11</pre>
	<span id="str_19"></span>
	<h1 class="subject sub">String indexOf(String str, int
		fromIndex)</h1>
	<h1>Description</h1>
	<p>This method returns the index within this string of
		the first occurrence of the specified substring, starting
		at the specified index. If it does not occur, -1 is
		returned.</p>
	<h1>Syntax</h1>
	<p>Here is the syntax of this method −</p>
	<pre class="code">
int indexOf(String str, int fromIndex)</pre>
	<h1>Parameters</h1>
	<p>Here is the detail of parameters −</p>
	<ul>
		<li>fromIndex − the index to start the search from.</li>
		<li>str − a string.</li>
	</ul>
	<h1>Return Value</h1>
	<ul>
		<li>See the description.</li>
	</ul>
	<h2>Example</h2>
	<pre class="code">
import java.io.*;
public class Test {

   public static void main(String args[]) {
      String Str = new String("Welcome to Tutorialspoint.com");
      String SubStr1 = new String("Tutorials" );
      System.out.print("Found Index :" );
      System.out.println( Str.indexOf( SubStr1, 15 ));
   }
}</pre>
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class="code">
Found Index :-1</pre>
	<h1 class="subject sub">Java - String intern() Method</h1>
	<h1>Description</h1>
	<p>This method returns a canonical representation for
		the string object. It follows that for any two strings s
		and t, s.intern() == t.intern() is true if and only if
		s.equals(t) is true.</p>
	<h1>Syntax</h1>
	<p>Here is the syntax of this method −</p>
	<pre class="code">
public String intern()</pre>
	<h1>Parameters</h1>
	<p>Here is the detail of parameters −</p>
	<ul>
		<li>This is a default method and this do not accept
			any parameters.</li>
	</ul>
	<h1>Return Value</h1>
	<ul>
		<li>This method returns a canonical representation
			for the string object.</li>
	</ul>
	<h2>Example</h2>
	<pre class="code">
import java.io.*;
public class Test {

   public static void main(String args[]) {
      String Str1 = new String("Welcome to Tutorialspoint.com");
      String Str2 = new String("WELCOME TO SUTORIALSPOINT.COM");

      System.out.print("Canonical representation:" );
      System.out.println(Str1.intern());

      System.out.print("Canonical representation:" );
      System.out.println(Str2.intern());
   }
}</pre>
	<p class="imp">프렉티스16_ex/Test20.java 에서 해당 프렉티스 진행한다.</p>
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class="code">
Canonical representation: Welcome to Tutorialspoint.com
Canonical representation: WELCOME TO SUTORIALSPOINT.COM</pre>
	<span id="str_21"></span>


	<h1 class="subject sub">Java – String lastIndexOf()
		Method</h1>
	<h1>Description</h1>
	<p>This method returns the index of the last occurrence
		of the character in the character sequence represented by
		this object that is less than or equal to fromIndex, or -1
		if the character does not occur before that point.</p>
	<h1>Syntax</h1>
	<p>Here is the syntax of this method −</p>
	<pre class="code">
int lastIndexOf(int ch)</pre>
	<h1>Parameters</h1>
	<p>Here is the detail of parameters −</p>
	<ul>
		<li>ch − a character.</li>
	</ul>
	<h1>Return Value</h1>
	<ul>
		<li>This method returns the index.</li>
	</ul>
	<h2>Example</h2>
	<pre class="code">
import java.io.*;
public class Test {

   public static void main(String args[]) {
      String Str = new String("Welcome to Tutorialspoint.com");
      System.out.print("Found Last Index :" );
      System.out.println(Str.lastIndexOf( 'o' ));
   }
}</pre>
	<p class="imp">프렉티스016_ex/Test21.java 에서 해당 프렉티스 진행한다.</p>
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class="code">
Found Last Index :27</pre>
	<h1 class="subject sub">String lastIndexOf(int ch, int
		fromIndex)</h1>
	<h1>Description</h1>
	<p>This method returns the index of the last occurrence
		of the character in the character sequence represented by
		this object that is less than or equal to fromIndex, or -1
		if the character does not occur before that point.</p>
	<h1>Syntax</h1>
	<p>Here is the syntax of this method −</p>
	<pre class="code">
public int lastIndexOf(int ch, int fromIndex)</pre>
	<h1>Parameters</h1>
	<p>Here is the detail of parameters −</p>
	<ul>
		<li>ch − a character.</li>
		<li>fromIndex − the index to start the search from.</li>
	</ul>
	<h1>Return Value</h1>
	<ul>
		<li>This method returns the index.</li>
	</ul>
	<h2>Example</h2>
	<pre class="code">
import java.io.*;
public class Test {

   public static void main(String args[]) {
      String Str = new String("Welcome to Tutorialspoint.com");
      System.out.print("Found Last Index :" );
      System.out.println(Str.lastIndexOf( 'o', 5 ));
   }
}</pre>
	<p class="imp">프렉티스016_ex/Test22.java 에서 해당 프렉티스 진행한다.</p>
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class="code">
Found Last Index :4</pre>
	<h1 class="subject sub">String lastIndexOf(String str)
		Method</h1>
	<h1>Description</h1>
	<p>This method accepts a String as an argument, if the
		string argument occurs one or more times as a substring
		within this object, then it returns the index of the first
		character of the last such substring is returned. If it
		does not occur as a substring, -1 is returned.</p>
	<h1>Syntax</h1>
	<p>Here is the syntax of this method −</p>
	<pre class="code">
public int lastIndexOf(String str)</pre>
	<h1>Parameters</h1>
	<p>Here is the detail of parameters −</p>
	<ul>
		<li>str − a string.</li>
	</ul>
	<h1>Return Value</h1>
	<ul>
		<li>This method returns the index.</li>
	</ul>
	<h2>Example</h2>
	<pre class="code">
import java.io.*;
public class Test {

   public static void main(String args[]) {
      String Str = new String("Welcome to Tutorialspoint.com");
      String SubStr1 = new String("Tutorials" );
      System.out.print("Found Last Index :" );
      System.out.println( Str.lastIndexOf( SubStr1 ));
   }
}</pre>
	<p class="imp">프렉티스016_ex/Test23.java 에서 해당 프렉티스 진행한다.</p>

	<pre class="code">
	Found Last Index :11
	</pre>
	<h1 class="subject sub">Java - String lastIndexOf()
		fromIndex</h1>
	<h1>Description</h1>
	<p>This method returns the index within this string of
		the last occurrence of the specified substring, searching
		backward starting at the specified index.</p>
	<h1>Syntax</h1>
	<p>Here is the syntax of this method −</p>
	<pre class="code">
public int lastIndexOf(String str, int fromIndex)</pre>
	<h1>Parameters</h1>
	<p>Here is the detail of parameters −</p>
	<ul>
		<li>fromIndex − the index to start the search from.</li>
		<li>str − a string.</li>
	</ul>
	<h1>Return Value</h1>
	<p>This method returns the index.</p>
	<h2>Example</h2>
	<pre class="code">
import java.io.*;
public class Test {

   public static void main(String args[]) {
      String Str = new String("Welcome to Tutorialspoint.com");
      String SubStr1 = new String("Tutorials" );
      System.out.print("Found Last Index :" );
      System.out.println( Str.lastIndexOf( SubStr1, 15 ));
   }
}</pre>
	<p class="imp">프렉티스016_ex/Test24.java에서 해당 프렉티스 진행한다.</p>
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class="code">
Found Last Index :11</pre>

	<h1 class="subject sub">Java - String length() Method</h1>
	<h1>Description</h1>
	<p>This method returns the length of this string. The
		length is equal to the number of 16-bit Unicode characters
		in the string.</p>
	<h1>Syntax</h1>
	<p>Here is the syntax of this method −</p>
	<pre class="code">
public int length()</pre>
	<h1>Parameters</h1>
	<p>Here is the detail of parameters −</p>
	<ul>
		<li>NA</li>
	</ul>
	<h1>Return Value</h1>
	<ul>
		<li>This method returns the the length of the
			sequence of characters represented by this object.</li>
	</ul>
	<h2>Example</h2>
	<pre class="code">
import java.io.*;
public class Test {

   public static void main(String args[]) {
      String Str1 = new String("Welcome to Tutorialspoint.com");
      String Str2 = new String("Tutorials" );

      System.out.print("String Length :" );
      System.out.println(Str1.length());

      System.out.print("String Length :" );
      System.out.println(Str2.length());
   }
}</pre>

	<p class="imp">프렉티스016_ex/Test25.java 에서 해당 프렉티스 진행한다.</p>
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class="code">
String Length :29
String Length :9</pre>
	<h1 class="subject sub">Java - String matches() Method</h1>
	<h1>Description</h1>
	<p>This method tells whether or not this string matches
		the given regular expression. An invocation of this method
		of the form str.matches(regex) yields exactly the same
		result as the expression Pattern.matches(regex, str).</p>
	<h1>Syntax</h1>
	<p>Here is the syntax of this method −</p>
	<pre class="code">
public boolean matches(String regex)</pre>
	<h1>Parameters</h1>
	<p>Here is the detail of parameters −</p>
	<ul>
		<li>regex − the regular expression to which this
			string is to be matched.</li>
	</ul>
	<h1>Return Value</h1>
	<ul>
		<li>This method returns true if, and only if, this
			string matches the given regular expression.</li>
	</ul>
	<h2>Example</h2>
	<pre class="code">
import java.io.*;
public class Test {

   public static void main(String args[]) {
      String Str = new String("Welcome to Tutorialspoint.com");

      System.out.print("Return Value :" );
      System.out.println(Str.matches("(.*)Tutorials(.*)"));

      System.out.print("Return Value :" );
      System.out.println(Str.matches("Tutorials"));

      System.out.print("Return Value :" );
      System.out.println(Str.matches("Welcome(.*)"));
   }
}</pre>
	<p class="imp">프렉티스016_ex/Test26.java에서 해당 프렉티스 진행한다.</p>
	<h2>Output</h2>
	<pre class="code">
Return Value :true
Return Value :false
Return Value :true</pre>
	<h1 class="subject sub">Java - String regionMatches()
		ignoreCase</h1>
	<h1>Description</h1>
	<p>This method has two variants which can be used to
		test if two string regions are equal.</p>
	<h1>Syntax</h1>
	<p>Here is the syntax of this method −</p>
	<pre class="code">
public boolean regionMatches(boolean ignoreCase,
                             int toffset,
                             String other,
                             int ooffset,
                             int len)</pre>
	<h1>Parameters</h1>
	<p>Here is the detail of parameters −</p>
	<ul>
		<li>toffset − the starting offset of the subregion in
			this string. this.string의 비교 위치</li>
		<li>other − the string argument.</li>
		<li>ooffset − the starting offset of the subregion in
			the string argument. string argument에 대한 start 위치</li>
		<li>len − the number of characters to compare. 해당
			argument string에 대한 길이</li>
		<li>ignoreCase − if true, ignore case when comparing
			characters.</li>
	</ul>
	<h1>Return Value</h1>
	<ul>
		<li>It returns true if the specified subregion of
			this string matches the specified subregion of the string
			argument; false otherwise. Whether the matching is exact
			or case insensitive depends on the ignoreCase argument.</li>
	</ul>
	<h2>Example</h2>
	<pre class="code">
import java.io.*;
public class Test {

   public static void main(String args[]) {
      String Str1 = new String("Welcome to Tutorialspoint.com");
      String Str2 = new String("TUTORIALS");

      System.out.print("Return Value :" );
      System.out.println(Str1.regionMatches(true, 11, Str2, 0, 9));
   }
}</pre>
	<p class="imp">프렉티스016_ex/Test27.java에서 해당 프렉티스 진행한다.</p>

	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class="code">Return Value :true</pre>
	<h1 class="subject sub">Java - String regionMatches()
		Method</h1>
	<h1>Description</h1>
	<p>This method has two variants which can be used to
		test if two string regions are equal.</p>
	<h1>Syntax</h1>
	<p>Here is the syntax of this method −</p>
	<pre class="code">
public boolean regionMatches(int toffset,
                             String other,
                             int ooffset,
                             int len)</pre>
	<h1>Parameters</h1>
	<p>Here is the detail of parameters −</p>
	<ul>
		<li>toffset − the starting offset of the subregion in
			this string.</li>
		<li>other − the string argument.</li>
		<li>ooffset − the starting offset of the subregion in
			the string argument.</li>
		<li>len − the number of characters to compare.</li>
	</ul>
	<h1>Return Value</h1>
	<ul>
		<li>It returns true if the specified subregion of
			this string matches the specified subregion of the string
			argument; false otherwise. Whether the matching is exact
			or case insensitive depends on the ignoreCase argument.</li>
	</ul>
	<h2>Example</h2>
	<pre class="code">
import java.io.*;
public class Test {

   public static void main(String args[]) {
      String Str1 = new String("Welcome to Tutorialspoint.com");
      String Str2 = new String("Tutorials");
      String Str3 = new String("TUTORIALS");

      System.out.print("Return Value :" );
      System.out.println(Str1.regionMatches(11, Str2, 0, 9));

      System.out.print("Return Value :" );
      System.out.println(Str1.regionMatches(11, Str3, 0, 9));
   }
}</pre>
	<p class="imp">프렉티스016/Test28.java에서 해당 프렉티스를 진행한다.</p>
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class="code">
Return Value :true
Return Value :false</pre>
	<h1 class="subject sub">Java - String replace() Method</h1>
	<h1>Description</h1>
	<p>This method returns a new string resulting from
		replacing all occurrences of oldChar in this string with
		newChar.</p>
	<h1>Syntax</h1>
	<p>Here is the syntax of this method −</p>
	<pre class="code">
public String replace(char oldChar, char newChar)</pre>
	<h1>Parameters</h1>
	<p>Here is the detail of parameters −</p>
	<ul>
		<li>oldChar − the old character.</li>
		<li>newChar − the new character.</li>
	</ul>
	<h1>Return Value</h1>
	<ul>
		<li>It returns a string derived from this string by
			replacing every occurrence of oldChar with newChar.</li>
	</ul>
	<h2>Example</h2>
	<pre class="code">
import java.io.*;
public class Test {

   public static void main(String args[]) {
      String Str = new String("Welcome to Tutorialspoint.com");

      System.out.print("Return Value :" );
      System.out.println(Str.replace('o', 'T'));

      System.out.print("Return Value :" );
      System.out.println(Str.replace('l', 'D'));
   }
}</pre>
	<p class="imp">프렉티스016_ex/Test29.java</p>
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class="code">
Return Value :WelcTme tT TutTrialspTint.cTm
Return Value :WeDcome to TutoriaDspoint.com</pre>
	<h1 class="subject sub">Java - String replaceAll()
		Method</h1>
	<h1>Description</h1>
	<p>This method replaces each substring of this string
		that matches the given regular expression with the given
		replacement.</p>
	<h1>Syntax</h1>
	<p>Here is the syntax of this method −</p>
	<pre class="code">
public String replaceAll(String regex, String replacement)</pre>
	<h1>Parameters</h1>
	<p>Here is the detail of parameters −</p>
	<ul>
		<li>regex − the regular expression to which this
			string is to be matched.</li>
		<li>replacement − the string which would replace
			found expression.</li>
	</ul>
	<h1>Return Value</h1>
	<ul>
		<li>This method returns the resulting String.</li>
	</ul>
	<h2>Example</h2>
	<pre class="code">
import java.io.*;
public class Test {

   public static void main(String args[]) {
      String Str = new String("Welcome to Tutorialspoint.com");

      System.out.print("Return Value :" );
      System.out.println(Str.replaceAll("(.*)Tutorials(.*)", "AMROOD"));
   }
}</pre>
	<p class="imp">프렉티스016_ex/Test30.java 에서 해당 프렉티스 진행한다.</p>
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class="code">
Return Value :AMROOD</pre>
	<h1 class="subject sub">Java - String replaceFirst()
		Method</h1>
	<h1>Description</h1>
	<p>This method replaces the first substring of this
		string that matches the given regular expression with the
		given replacement.</p>
	<h1>Syntax</h1>
	<p>Here is the syntax of this method −</p>
	<pre class="code">
public String replaceFirst(String regex, String replacement)</pre>
	<h1>Parameters</h1>
	<p>Here is the detail of parameters −</p>
	<ul>
		<li>regex − the regular expression to which this
			string is to be matched.</li>
		<li>replacement − the string which would replace
			found expression.</li>
	</ul>
	<h1>Return Value</h1>
	<ul>
		<li>This method returns a resulting String.</li>
	</ul>
	<h2>Example</h2>
	<pre class="code">
import java.io.*;
public class Test {

   public static void main(String args[]) {
      String Str = new String("Welcome to Tutorialspoint.com");

      System.out.print("Return Value :" );
      System.out.println(Str.replaceFirst("(.*)Tutorials(.*)", "AMROOD"));

      System.out.print("Return Value :" );
      System.out.println(Str.replaceFirst("Tutorials", "AMROOD"));
   }
}</pre>
	<p class="imp">프렉티스016_ex/Test31.java에서 해당 프렉티스 진행한다.</p>
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class="code">
Return Value :AMROOD
Return Value :Welcome to AMROODpoint.com</pre>
	<h1 class="subject sub">Java - String split() Method</h1>
	<h1>Description</h1>
	<p>This method has two variants and splits this string
		around matches of the given regular expression.</p>
	<h1>Syntax</h1>
	<p>Here is the syntax of this method −</p>
	<pre class="code">
public String[] split(String regex)</pre>
	<h1>Parameters</h1>
	<p>Here is the detail of parameters −</p>
	<ul>
		<li>regex − the delimiting regular expression.</li>
	</ul>
	<h1>Return Value</h1>
	<ul>
		<li>It returns the array of strings computed by
			splitting this string around matches of the given regular
			expression.</li>
	</ul>
	<h2>Example</h2>
	<pre class="code">
import java.io.*;
public class Test {

   public static void main(String args[]) {
      String Str = new String("Welcome-to-Tutorialspoint.com");
      System.out.println("Return Value :" );      
      
      for (String retval: Str.split("-")) {
         System.out.println(retval);
      }
   }
}</pre>
	<p class="imp">프렉티스016_ex/Test32.java에서 해당 프렉티스 진행한다.</p>
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class="code">
Return Value :
Welcome
to
Tutorialspoint.com
</pre>
	<h1 class="subject sub">String split(String regex, int
		limit) Method</h1>
	<h1>Description</h1>
	<p>This method has two variants and splits this string
		around matches of the given regular expression.</p>
	<h1>Syntax</h1>
	<p>Here is the syntax of this method −</p>
	<pre class="code">
public String[] split(String regex, int limit)</pre>
	<h1>Parameters</h1>
	<p>Here is the detail of parameters −</p>
	<ul>
		<li>regex − the delimiting regular expression.</li>
		<li>limit − the result threshold, which means how
			many strings to be returned.</li>
	</ul>
	<h1>Return Value</h1>
	<ul>
		<li>It returns the array of strings computed by
			splitting this string around matches of the given regular
			expression.</li>
	</ul>
	<h2>Example</h2>
	<pre class="code">
import java.io.*;
public class Test {

   public static void main(String args[]) {
      String Str = new String("Welcome-to-Tutorialspoint.com");
      System.out.println("Return Value :" );
      
      for (String retval: Str.split("-", 2)) {
         System.out.println(retval);
      }
      System.out.println("");
      System.out.println("Return Value :" );
      
      for (String retval: Str.split("-", 3)) {
         System.out.println(retval);
      }
      System.out.println("");
      System.out.println("Return Value :" );
      
      for (String retval: Str.split("-", 0)) {
         System.out.println(retval);
      }
      System.out.println("");
   }
}</pre>
	<p class="imp">프렉티스016_ex/Test33.java에서 해당 프렉티스 진행한다.</p>
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class="code">
Return Value :
Welcome
to-Tutorialspoint.com

Return Value :
Welcome
to
Tutorialspoint.com

Return Value:
Welcome
to
Tutorialspoint.com</pre>
	<h1 class="subject sub">Java - String startsWith()
		Method</h1>
	<h1>Description</h1>
	<p>This method has two variants and tests if a string
		starts with the specified prefix beginning a specified
		index or by default at the beginning.</p>
	<h1>Syntax</h1>
	<p>Here is the syntax of this method −</p>
	<pre class="code">public boolean startsWith(String prefix)</pre>
	<h1>Parameters</h1>
	<p>Here is the detail of parameters −</p>
	<ul>
		<li>prefix − the prefix to be matched.</li>
	</ul>
	<h1>Return Value</h1>
	<ul>
		<li>It returns true if the character sequence
			represented by the argument is a prefix of the character
			sequence represented by this string; false otherwise.</li>
	</ul>
	<h2>Example</h2>
	<pre class="code">
import java.io.*;
public class Test {

   public static void main(String args[]) {
      String Str = new String("Welcome to Tutorialspoint.com");

      System.out.print("Return Value :" );
      System.out.println(Str.startsWith("Welcome") );

      System.out.print("Return Value :" );
      System.out.println(Str.startsWith("Tutorials") );
   }
}</pre>
	<p class="imp">프렉티스016_ex/Test34.java에서 해당 프렉티스 진행한다.</p>
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class="code">
Return Value :true
Return Value :false</pre>
	<h1 class="subject sub">String startsWith(String
		prefix, int toffset)</h1>
	<h1>Description</h1>
	<p>This method has two variants and tests if a string
		starts with the specified prefix beginning a specified
		index or by default at the beginning.</p>
	<h1>Syntax</h1>
	<p>Here is the syntax of this method −</p>
	<pre class="code">
public boolean startsWith(String prefix, int toffset)</pre>
	<h1>Parameters</h1>
	<p>Here is the detail of parameters −</p>
	<ul>
		<li>prefix − the prefix to be matched.</li>
		<li>toffset − where to begin looking in the string.</li>
	</ul>
	<h1>Return Value</h1>
	<ul>
		<li>It returns true if the character sequence
			represented by the argument is a prefix of the character
			sequence represented by this string; false otherwise.</li>
	</ul>
	<h2>Example</h2>
	<pre class="code">
import java.io.*;
public class Test {

   public static void main(String args[]) {
      String Str = new String("Welcome to Tutorialspoint.com");

      System.out.print("Return Value :" );
      System.out.println(Str.startsWith("Tutorials", 11) );
   }
}</pre>
	<p class="imp">프렉티스016_ex/Test35.java에서 해당 프렉티스 진행한다.</p>
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class="code">
Return Value :true</pre>

	<h1 class="subject sub">Java - String subSequence()
		Method</h1>
	<h1>Description</h1>
	<p>This method returns a new character sequence that is
		a subsequence of this sequence.</p>
	<h1>Syntax</h1>
	<p>Here is the syntax of this method −</p>
	<pre class="code">
public CharSequence subSequence(int beginIndex, int endIndex)</pre>
	<h1>Parameters</h1>
	<p>Here is the detail of parameters −</p>
	<ul>
		<li>beginIndex − the begin index, inclusive.</li>
		<li>endIndex − the end index, exclusive.</li>
	</ul>
	<h1>Return Value</h1>
	<ul>
		<li>This method returns the specified subsequence.</li>
	</ul>
	<pre class="code">
import java.io.*;
public class Test {

   public static void main(String args[]) {
      String Str = new String("Welcome to Tutorialspoint.com");

      System.out.print("Return Value :" );
      System.out.println(Str.subSequence(0, 10) );

      System.out.print("Return Value :" );
      System.out.println(Str.subSequence(10, 15) );
   }
}</pre>
	<p class="imp">프렉티스016_ex/Test36.java 에서 해당 프렉티스 진행한다.</p>
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class="code">
Return Value :Welcome to
Return Value : Tuto</pre>
	<h1 class="subject sub">Java - String substring()
		Method</h1>
	<h1>Description</h1>
	<p>This method has two variants and returns a new
		string that is a substring of this string. The substring
		begins with the character at the specified index and
		extends to the end of this string or up to endIndex – 1,
		if the second argument is given.</p>
	<h1>Syntax</h1>
	<p>Here is the syntax of this method −</p>
	<pre class="code">
public String substring(int beginIndex)</pre>
	<h1>Parameters</h1>
	<p>Here is the detail of parameters −</p>
	<ul>
		<li>beginIndex − the begin index, inclusive.</li>
	</ul>
	<h1>Return Value</h1>
	<ul>
		<li>The specified substring.</li>
	</ul>
	<h2>Example</h2>
	<pre class="code">
import java.io.*;
public class Test {

   public static void main(String args[]) {
      String Str = new String("Welcome to Tutorialspoint.com");

      System.out.print("Return Value :" );
      System.out.println(Str.substring(10) );

   }
}</pre>
	<p class="imp">프렉티스016_ex/Test37.java 에서 해당 프렉티스 진행한다.</p>
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class="code">
Return Value : Tutorialspoint.com</pre>
	<h1 class="subject sub">String substring(beginIndex,
		endIndex)</h1>
	<h1>Description</h1>
	<p>This method has two variants and returns a new
		string that is a substring of this string. The substring
		begins with the character at the specified index and
		extends to the end of this string or up to endIndex – 1,
		if the second argument is given.</p>
	<h1>Syntax</h1>
	<p>Here is the syntax of this method −</p>
	<pre class="code">
public String substring(int beginIndex, int endIndex)</pre>
	<h1>Parameters</h1>
	<p>Here is the detail of parameters −</p>
	<ul>
		<li>beginIndex − the begin index, inclusive.</li>
		<li>endIndex − the end index, exclusive.</li>
	</ul>
	<h1>Return Value</h1>
	<ul>
		<li>The specified substring.</li>
	</ul>
	<h2>Example</h2>
	<pre class="code">
import java.io.*;
public class Test {

   public static void main(String args[]) {
      String Str = new String("Welcome to Tutorialspoint.com");

      System.out.print("Return Value :" );
      System.out.println(Str.substring(10, 15) );
   }
}</pre>
	<p class="imp">프렉티스016_ex/Test38.java에서 해당 프렉티스 진행한다.</p>
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class="code">
Return Value : Tuto</pre>
	<h1 class="subject sub">Java - String toCharArray()
		Method</h1>
	<h1>Description</h1>
	<p>This method converts this string to a new character
		array.</p>
	<h1>Syntax</h1>
	<p>Here is the syntax of this method −</p>
	<pre class="code">
public char[] toCharArray()</pre>
	<h1>Parameters</h1>
	<p>Here is the detail of parameters −</p>
	<ul>
		<li>NA</li>
	</ul>
	<h1>Return Value</h1>
	<ul>
		<li>It returns a newly allocated character array,
			whose length is the length of this string and whose
			contents are initialized to contain the character
			sequence represented by this string.</li>
	</ul>
	<h2>Example</h2>
	<pre class="code">
import java.io.*;
public class Test {

   public static void main(String args[]) {
      String Str = new String("Welcome to Tutorialspoint.com");

      System.out.print("Return Value :" );
      System.out.println(Str.toCharArray() );
   }
}</pre>
	<p class="imp">프렉티스016_ex/Test39.java에서 해당 프렉티스 진행한다.</p>
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class="code">Return Value :Welcome to Tutorialspoint.com</pre>
	<h1 class="subject sub">Java - String toLowerCase()
		Method</h1>
	<h1>Description</h1>
	<p>
		This method has two variants. The first variant converts
		all of the characters in this String to lower case using
		the rules of the given Locale. This is equivalent to
		calling toLowerCase(Locale.getDefault()). <br> <br>
		The second variant takes locale as an argument to be used
		while converting into lower case.
	</p>
	<h1>Syntax</h1>
	<p>Here is the syntax of this method −</p>
	<pre class="code">
public String toLowerCase()</pre>
	<h1>Parameters</h1>
	<p>Here is the detail of parameters −</p>
	<ul>
		<li>NA</li>
	</ul>
	<h1>Return Value</h1>
	<ul>
		<li>It returns the String, converted to lowercase.</li>
	</ul>
	<h2>Example</h2>
	<pre class="code">
import java.io.*;
public class Test {

   public static void main(String args[]) {
      String Str = new String("Welcome to Tutorialspoint.com");

      System.out.print("Return Value :");
      System.out.println(Str.toLowerCase());
   }
}</pre>
	<p class="imp">프렉티스016_ex/Test40.java에서 해당 프렉티스 진행한다.</p>
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class="code">
Return Value :welcome to tutorialspoint.com</pre>
	<h1 class="subject sub">String toLowerCase(Locale)
		Method</h1>
	<h1>Description</h1>
	<p>
		This method has two variants. The first variant converts
		all of the characters in this String to lower case using
		the rules of the given Locale. This is equivalent to
		calling toLowerCase(Locale.getDefault()). <br> <br>
		The second variant takes locale as an argument to be used
		while converting into lower case.
	</p>
	<h1>Syntax</h1>
	<p>Here is the syntax of this method −</p>
	<pre class="code">
public String toLowerCase(Locale locale)</pre>
	<h1>Parameters</h1>
	<p>Here is the detail of parameters −</p>
	<ul>
		<li>NA</li>
	</ul>
	<h1>Return Value</h1>
	<ul>
		<li>It returns the String, converted to lowercase.</li>
	</ul>
	<h2>Example</h2>
	<pre class="code">
import java.io.*;
public class Test {

   public static void main(String args[]) {
      String Str = new String("Welcome to Tutorialspoint.com");

      System.out.print("Return Value :");
      System.out.println(Str.toLowerCase());
   }
}</pre>
	<p class="imp">프렉티스016_ex/Test41.java에서 해당 프렉티스 진행한다.</p>
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class="code">
Return Value :welcome to tutorialspoint.com</pre>


	<h1 class="subject sub">Java - String toString()
		Method</h1>
	<h1>Description</h1>
	<p>This method returns itself a string.</p>
	<h1>Syntax</h1>
	<p>Here is the syntax of this method −</p>
	<pre class='code'>
public String toString()</pre>
	<h1>Parameters</h1>
	<p>Here is the detail of parameters −</p>
	<ul>
		<li>NA</li>
	</ul>
	<h1>Return Value</h1>
	<ul>
		<li>This method returns the string itself.</li>
	</ul>
	<h2>Example</h2>
	<pre class="code">
import java.io.*;
public class Test {

   public static void main(String args[]) {
      String Str = new String("Welcome to Tutorialspoint.com");

      System.out.print("Return Value :");
      System.out.println(Str.toString());
   }
}</pre>
	<p class="imp">프렉티스016_ex/Test42.java에서 해당 프렉티스 진행한다.</p>
	<h2>Output</h2>
	<pre class="code">
Return Value :Welcome to Tutorialspoint.com</pre>
	<h1 class="subject sub">Java - String toUpperCase()
		Method</h1>
	<h1>Description</h1>
	<p>
		This method has two variants. The first variant converts
		all of the characters in this String to upper case using
		the rules of the given Locale. This is equivalent to
		calling toUpperCase(Locale.getDefault()). <br> <br>
		The second variant takes locale as an argument to be used
		while converting into upper case.
	</p>
	<h1>Syntax</h1>
	<p>Here is the syntax of this method −</p>
	<pre class="code">
public String toUpperCase()</pre>
	<h1>Parameters</h1>
	<p>Here is the detail of parameters −</p>
	<ul>
		<li>NA</li>
	</ul>
	<h1>Return Value</h1>
	<ul>
		<li>It returns the String, converted to uppercase.</li>
	</ul>
	<h2>Example</h2>
	<pre class="code">
import java.io.*;
public class Test {

   public static void main(String args[]) {
      String Str = new String("Welcome to Tutorialspoint.com");

      System.out.print("Return Value :" );
      System.out.println(Str.toUpperCase() );
   }
}</pre>
	<p class='imp'>프렉티스016_ex/Test43.java에서 해당 프렉티스 진행한다.</p>

	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class="code">
Return Value :WELCOME TO TUTORIALSPOINT.COM</pre>
	<h1 class="subject sub">String toUpperCase(Locale)
		Method</h1>
	<h1>Description</h1>
	<p>
		This method has two variants. The first variant converts
		all of the characters in this String to upper case using
		the rules of the given Locale. This is equivalent to
		calling toUpperCase(Locale.getDefault()). <br> <br>
		The second variant takes locale as an argument to be used
		while converting into upper case.
	</p>
	<h1>Syntax</h1>
	<p>Here is the syntax of this method −</p>
	<pre class="code">
public String toUpperCase(Locale locale)</pre>
	<h1>Parameters</h1>
	<p>Here is the detail of parameters −</p>
	<pre class="code">
NA</pre>
	<h1>Return Value</h1>
	<pre class="code">
It returns the String, converted to uppercase.</pre>
	<h2>Example</h2>
	<pre class="code">
import java.io.*;
public class Test {

   public static void main(String args[]) {
      String Str = new String("Welcome to Tutorialspoint.com");

      System.out.print("Return Value :" );
      System.out.println(Str.toUpperCase() );
   }
}</pre>
	<p class="imp">프렉티스016_ex/Test44.java에서 해당 프렉티스 진행한다.</p>
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class="code">
Return Value :WELCOME TO TUTORIALSPOINT.COM</pre>
	<h1 class="subject sub">Java - String trim() Method</h1>
	<h1>Description</h1>
	<p>This method returns a copy of the string, with
		leading and trailing whitespace omitted.</p>
	<h1>Syntax</h1>
	<p>Here is the syntax of this method −</p>
	<pre class="code">public String trim()</pre>
	<h1>Parameters</h1>
	<p>Here is the detail of parameters −</p>
	<ul>
		<li>NA</li>
	</ul>
	<h1>Return Value</h1>
	<ul>
		<li>It returns a copy of this string with leading and
			trailing white space removed, or this string if it has no
			leading or trailing white space.</li>
	</ul>
	<h2>Example</h2>
	<pre class="code">
import java.io.*;
public class Test {

   public static void main(String args[]) {
      String Str = new String("   Welcome to Tutorialspoint.com   ");

      System.out.print("Return Value :" );
      System.out.println(Str.trim() );
   }
}</pre>
	<p class="imp">프렉티스016_ex/Test45.java에서 해당 프렉티스 진행한다.</p>
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class="code">
Return Value :Welcome to Tutorialspoint.com</pre>
	<h1 class="subject sub">Java - String valueOf() Method</h1>
	<h1>Description</h1>
	<p>This method has the following variants, which depend
		on the passed parameters. This method returns the string
		representation of the passed argument.</p>
	<ul>
		<li>valueOf(boolean b) − Returns the string
			representation of the boolean argument.</li>
		<li>valueOf(char c) − Returns the string
			representation of the char argument.</li>
		<li>valueOf(char[] data) − Returns the string
			representation of the char array argument.</li>
		<li>valueOf(char[] data, int offset, int count) −
			Returns the string representation of a specific subarray
			of the char array argument.</li>
		<li>valueOf(double d) − Returns the string
			representation of the double argument.</li>
		<li>valueOf(float f) − Returns the string
			representation of the float argument.</li>
		<li>valueOf(int i) − Returns the string
			representation of the int argument.</li>
		<li>valueOf(long l) − Returns the string
			representation of the long argument.</li>
		<li>valueOf(Object obj) − Returns the string
			representation of the Object argument.</li>
	</ul>
	<h1>Syntax</h1>
	<p>Here is the syntax of this method −</p>
	<pre class="code">
static String valueOf(boolean b) 
or 
static String valueOf(char c) 
or
static String valueOf(char[] data) 
or
static String valueOf(char[] data, int offset, int count) 
or
static String valueOf(double d) 
or
static String valueOf(float f) 
or
static String valueOf(int i)
or
static String valueOf(long l)
or
static String valueOf(Object obj) </pre>
	<h1>Parameters</h1>
	<p>Here is the detail of parameters −</p>
	<ul>
		<li>See the description.</li>
	</ul>
	<h1>Return Value</h1>
	<ul>
		<li>This method returns the string representation.</li>
	</ul>
	<h2>Example</h2>
	<pre class="code">
import java.io.*;
public class Test {

   public static void main(String args[]) {
      double d = 102939939.939;
      boolean b = true;
      long l = 1232874;
      char[] arr = {'a', 'b', 'c', 'd', 'e', 'f','g' };

      System.out.println("Return Value : " + String.valueOf(d) );
      System.out.println("Return Value : " + String.valueOf(b) );
      System.out.println("Return Value : " + String.valueOf(l) );
      System.out.println("Return Value : " + String.valueOf(arr) );
   }
}</pre>
	<p class='imp'>프렉티스016_ex/Test46.java에서 해당 프렉티스 진행한다.</p>
	<h2>Output</h2>
	<pre class="code">
Return Value : 1.02939939939E8
Return Value : true
Return Value : 1232874
Return Value : abcdefg</pre>




	<h1 class="subject">Java - Arrays</h1>
	<p>
		Java provides a data structure, the array, which stores a
		fixed-size sequential collection of elements of the same
		type. An array is used to store a collection of data, but
		it is often more useful to think of an array as a
		collection of variables of the same type. <br> <br>
		Instead of declaring individual variables, such as
		number0, number1, ..., and number99, you declare one array
		variable such as numbers and use numbers[0], numbers[1],
		and ..., numbers[99] to represent individual variables. <br>
		<br> This tutorial introduces how to declare array
		variables, create arrays, and process arrays using indexed
		variables.
	</p>
	<h1>Declaring Array Variables</h1>
	<p>To use an array in a program, you must declare a
		variable to reference the array, and you must specify the
		type of array the variable can reference. Here is the
		syntax for declaring an array variable −</p>
	<h2>Syntax</h2>
	<pre class="code">
dataType[] arrayRefVar;   // preferred way.
or
dataType arrayRefVar[];  // works but not preferred way.</pre>
	<p>
		Note − The style <span class="code">dataType[]
			arrayRefVar</span> is preferred. The style <span class='code'>dataType
			arrayRefVar[]</span> comes from the C/C++ language and was
		adopted in Java to accommodate C/C++ programmers.
	</p>
	<h2>Example</h2>
	<p>The following code snippets are examples of this
		syntax −</p>
	<pre class="code">
double[] myList;   // preferred way.
or
double myList[];   // works but not preferred way.</pre>
	<h1 class="bookmark">Creating Arrays</h1>
	<p>You can create an array by using the new operator
		with the following syntax −</p>
	<h2>Syntax</h2>
	<pre class="code">
arrayRefVar = new dataType[arraySize];</pre>
	<p>The above statement does two things −</p>
	<ul>
		<li>It creates an array using new
			dataType[arraySize].</li>
		<li>It assigns the reference of the newly created
			array to the variable arrayRefVar.</li>
	</ul>
	<p>Declaring an array variable, creating an array, and
		assigning the reference of the array to the variable can
		be combined in one statement, as shown below −</p>
	<pre class="code">
dataType[] arrayRefVar = new dataType[arraySize];</pre>
	<p>Alternatively you can create arrays as follows −</p>
	<pre class="code">
dataType[] arrayRefVar = {value0, value1, ..., valuek};</pre>
	<p>The array elements are accessed through the index.
		Array indices are 0-based; that is, they start from 0 to
		arrayRefVar.length-1.</p>
	<h2>Example</h2>
	<p>Following statement declares an array variable,
		myList, creates an array of 10 elements of double type and
		assigns its reference to myList −</p>
	<pre class="code">
double[] myList = new double[10];</pre>
	<p>Following picture represents array myList. Here,
		myList holds ten double values and the indices are from 0
		to 9.</p>
	<img alt="array" class="img" src="/java/img/java_array.jpg">
	<h1>Processing Arrays</h1>
	<p>When processing array elements, we often use either
		for loop or foreach loop because all of the elements in an
		array are of the same type and the size of the array is
		known.</p>
	<h2>Example</h2>
	<p>Here is a complete example showing how to create,
		initialize, and process arrays −</p>
	<pre class="code">
public class TestArray {

   public static void main(String[] args) {
      double[] myList = {1.9, 2.9, 3.4, 3.5};

      // Print all the array elements
      for (int i = 0; i &lt; myList.length; i++) {
         System.out.println(myList[i] + " ");
      }
     
      // Summing all elements
      double total = 0;
      for (int i = 0; i &lt; myList.length; i++) {
         total += myList[i];
      }
      System.out.println("Total is " + total);
      
      // Finding the largest element
      double max = myList[0];
      for (int i = 1; i &lt; myList.length; i++) {
         if (myList[i] > max) max = myList[i];
      }
      System.out.println("Max is " + max);  
   }
}</pre>
	<p class="imp">practice017/TestArray01.java에서 해당 프렉티스
		진행함.</p>
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class='code'>
1.9
2.9
3.4
3.5
Total is 11.7
Max is 3.5</pre>
	<h1>The foreach Loops</h1>
	<p>JDK 1.5 introduced a new for loop known as foreach
		loop or enhanced for loop, which enables you to traverse
		the complete array sequentially without using an index
		variable.</p>
	<h1>The foreach Loops</h1>
	<p>JDK 1.5 introduced a new for loop known as foreach
		loop or enhanced for loop, which enables you to traverse
		the complete array sequentially without using an index
		variable.</p>
	<h2>Example</h2>
	<p>The following code displays all the elements in the
		array myList −</p>
	<pre class="code">
public class TestArray {

   public static void main(String[] args) {
      double[] myList = {1.9, 2.9, 3.4, 3.5};

      // Print all the array elements
      for (double element: myList) {
         System.out.println(element);
      }
   }
}</pre>
	<p class="imp">/practice017/TestArray02.java에서 해당 프렉티스
		진행한다.</p>
	<p>This will produce the following result −</p>
	<h2>Output</h2>
	<pre class="code">
1.9
2.9
3.4
3.5</pre>
	<h1>Passing Arrays to Methods</h1>
	<p>Just as you can pass primitive type values to
		methods, you can also pass arrays to methods. For example,
		the following method displays the elements in an int array
		−</p>
	<h2>Example</h2>
	<pre class="code">
public static void printArray(int[] array) {
   for (int i = 0; i &lt; array.length; i++) {
      System.out.print(array[i] + " ");
   }
}</pre>
	<p>You can invoke it by passing an array. For example,
		the following statement invokes the printArray method to
		display 3, 1, 2, 6, 4, and 2 −</p>
	<h2>Example</h2>
	<pre class="code">
printArray(new int[]{3, 1, 2, 6, 4, 2});</pre>
	<p class="imp">practice017/TestArray03.java에서 해당 프렉티스
		진행한다.</p>
	<h1>Returning an Array from a Method</h1>
	<p>A method may also return an array. For example, the
		following method returns an array that is the reversal of
		another array −</p>
	<h2>Example</h2>
	<pre class="code">
public static int[] reverse(int[] list) {
   int[] result = new int[list.length];

   for (int i = 0, j = result.length - 1; i &lt; list.length; i++, j--) {
      result[j] = list[i];
   }
   return result;
}
	</pre>
	<p class="imp">/practice017/TestArray04.java에서 해당 프렉티스
		진행</p>
	<h1>The Arrays Class</h1>
	<p>The java.util.Arrays class contains various static
		methods for sorting and searching arrays, comparing
		arrays, and filling array elements. These methods are
		overloaded for all primitive types.</p>

	<table>
		<tbody>
			<tr>
				<th>Sr.No.</th>
				<th style="text-align: center;">Method &amp;
					Description</th>
			</tr>
			<tr>
				<td>1</td>
				<td><p>
						<b>public static int binarySearch(Object[] a,
							Object key)</b>
					</p>
					<p>
						Searches the specified array of Object ( Byte, Int ,
						double, etc.) for the specified value using the binary
						search algorithm. The array must be sorted prior to
						making this call. This returns index of the search
						key, if it is contained in the list; otherwise, it
						returns ( – (insertion point + 1)). <span class="imp">이진검색을
							하려면 먼저 소팅(즉, 정렬)을 해야한다.</span><span class="code">Arrays.sort()</span><span
							class="imp">/practice017/TestArray05.java 에서
							해당 프렉티스 진행 </span>
					</p></td>
			</tr>
			<tr>
				<td>2</td>
				<td><p>
						<b>public static boolean equals(long[] a, long[]
							a2)</b>
					</p>
					<p>
						Returns true if the two specified arrays of longs are
						equal to one another. Two arrays are considered equal
						if both arrays contain the same number of elements,
						and all corresponding pairs of elements in the two
						arrays are equal. This returns true if the two arrays
						are equal. Same method could be used by all other
						primitive data types (Byte, short, Int, etc.)<span
							class="imp">practice017/TestArray06.java에서 해당
							프렉티스 진행함.</span>
					</p></td>
			</tr>
			<tr>
				<td>3</td>
				<td><p>
						<b>public static void fill(int[] a, int val)</b>
					</p>
					<p>Assigns the specified int value to each element
						of the specified array of ints. The same method could
						be used by all other primitive data types (Byte,
						short, Int, etc.)</p> <pre class="code">
public static void fill(int[] a,
                        int fromIndex,
                        int toIndex,
                        int val)
						</pre>
					<p class="imp">/practice017/TestArray07.java에서 해당
						프렉티스 진행함.</p></td>
			</tr>
			<tr>
				<td>4</td>
				<td><p>
						<b>public static void sort(Object[] a)</b>
					</p>
					<p>Sorts the specified array of objects into an
						ascending order, according to the natural ordering of
						its elements. The same method could be used by all
						other primitive data types ( Byte, short, Int, etc.)</p>
					<p class="imp">/practice017/TestArray08.java에서 해당
						프렉티스 진행한다. sort는 기본적으로 오름차순정렬이며, 위에서 배웠던 reverse 함수
						이용해서 내림차순도 만든다.</p></td>
			</tr>
		</tbody>
	</table>

	<h1 class="subject">Java - Date and Time</h1>
	<p>
		Java provides the Date class available in java.util
		package, this class encapsulates the current date and
		time. <br> <br> The Date class supports two
		constructors as shown in the following table.
	</p>
	<table>
		<tbody>
			<tr>
				<th>Sr.No.</th>
				<th>Constructor &amp; Description</th>
			</tr>
			<tr>
				<td>1</td>
				<td><p>
						<b>Date( )</b>
					</p>
					<p>This constructor initializes the object with the
						current date and time.</p></td>
			</tr>
			<tr>
				<td>2</td>
				<td><p>
						<b>Date(long millisec)</b>
					</p>
					<p>This constructor accepts an argument that equals
						the number of milliseconds that have elapsed since
						midnight, January 1, 1970.</p></td>
			</tr>
		</tbody>
	</table>
	<p>Following are the methods of the date class.</p>



	<!-- 끝 -->
	<div class="fixed">
		<a href="#index_subject">▲</a>
	</div>
	<footer>자바 끝</footer>




</body>
</html>